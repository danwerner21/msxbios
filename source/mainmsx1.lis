mainmsx1.asm:
     1                          ; $Id: main_msx1.asm 525 2008-12-22 22:16:42Z mthuurne $
     2                          ; C-BIOS main ROM for a European MSX1 machine
     3                          ;
     4                          ; Copyright (c) 2005 Maarten ter Huurne.  All rights reserved.
     5                          ; Copyright (c) 2005 Joost Yervante Damad.  All rights reserved.
     6                          ; Copyright (C) 2005 BouKiCHi. All rights reserved.
     7                          ; Copyright (C) 2008 Eric Boon. All rights reserved.
     8                          ;
     9                          ; Redistribution and use in source and binary forms, with or without
    10                          ; modification, are permitted provided that the following conditions
    11                          ; are met:
    12                          ; 1. Redistributions of source code must retain the above copyright
    13                          ;    notice, this list of conditions and the following disclaimer.
    14                          ; 2. Redistributions in binary form must reproduce the above copyright
    15                          ;    notice, this list of conditions and the following disclaimer in the
    16                          ;    documentation and/or other materials provided with the distribution.
    17                          ;
    18                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    19                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    20                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    21                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    22                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    23                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    24                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    25                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    26                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    27                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    28                          ;
    29                          
    30                                  INCLUDE "hardware.asm"
hardware.asm:
     1                          ; $Id: hardware.asm 525 2008-12-22 22:16:42Z mthuurne $
     2                          ; C-BIOS hardware related declarations
     3                          ;
     4                          ; Copyright (c) 2002-2005 BouKiCHi.  All rights reserved.
     5                          ; Copyright (c) 2003 Reikan.  All rights reserved.
     6                          ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
     7                          ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
     8                          ; Copyright (c) 2004-2006 Albert Beevendorp.  All rights reserved.
     9                          ; Copyright (c) 2004-2005 Joost Yervante Damad.  All rights reserved.
    10                          ;
    11                          ; Redistribution and use in source and binary forms, with or without
    12                          ; modification, are permitted provided that the following conditions
    13                          ; are met:
    14                          ; 1. Redistributions of source code must retain the above copyright
    15                          ;    notice, this list of conditions and the following disclaimer.
    16                          ; 2. Redistributions in binary form must reproduce the above copyright
    17                          ;    notice, this list of conditions and the following disclaimer in the
    18                          ;    documentation and/or other materials provided with the distribution.
    19                          ;
    20                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    21                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    22                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    23                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    24                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    25                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    26                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    27                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    28                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    29                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    30                          ;
    31                          
    32                          ;---------------------------------------------------
    33                          ; I/O ports
    34                          
    35                                  IF      PLATFORM=1
    36                          DBG_CTRL:           EQU $01                           ; openMSX debugdevice control (mode)
    37                          DBG_DATA:           EQU $01                           ; openMSX debugdevice data
    38                          
    39                          PRN_STAT:           EQU $01                           ; printer status
    40                          PRN_DATA:           EQU $01                           ; printer data
    41                          
    42                          PSL_STAT:           EQU $01                           ; slot status
    43                          KBD_STAT:           EQU $01                           ; keyboard status
    44                          GIO_REGS:           EQU $01                           ; General IO Register
    45                          PPI_REGS:           EQU $01                           ; PPI register
    46                          
    47                          RTC_ADDR:           EQU $01                           ; RTC address
    48                          RTC_DATA:           EQU $01                           ; RTC data
    49                          
    50                          MAP_REG1:           EQU $01                           ; memory mapper: bank in $0000-$3FFF
    51                          MAP_REG2:           EQU $01                           ; memory mapper: bank in $4000-$7FFF
    52                          MAP_REG3:           EQU $01                           ; memory mapper: bank in $8000-$BFFF
    53                          MAP_REG4:           EQU $01                           ; memory mapper: bank in $C000-$FFFF
    54                                  ELSE
    55                          DBG_CTRL:           EQU $2E                           ; openMSX debugdevice control (mode)
    56                          DBG_DATA:           EQU $2F                           ; openMSX debugdevice data
    57                          
    58                          PRN_STAT:           EQU $90                           ; printer status
    59                          PRN_DATA:           EQU $91                           ; printer data
    60                          
    61                          PSL_STAT:           EQU $A8                           ; slot status
    62                          KBD_STAT:           EQU $A9                           ; keyboard status
    63                          GIO_REGS:           EQU $AA                           ; General IO Register
    64                          PPI_REGS:           EQU $AB                           ; PPI register
    65                          
    66                          RTC_ADDR:           EQU $B4                           ; RTC address
    67                          RTC_DATA:           EQU $B5                           ; RTC data
    68                          
    69                          MAP_REG1:           EQU $FC                           ; memory mapper: bank in $0000-$3FFF
    70                          MAP_REG2:           EQU $FD                           ; memory mapper: bank in $4000-$7FFF
    71                          MAP_REG3:           EQU $FE                           ; memory mapper: bank in $8000-$BFFF
    72                          MAP_REG4:           EQU $FF                           ; memory mapper: bank in $C000-$FFFF
    73                                  ENDIF
    74                          
    75                                  IF      PLATFORM=1
    76                          VDP_DATA:           EQU $A0                           ; VDP data port (VRAM read/write)
    77                          VDP_ADDR:           EQU $A1                           ; VDP address (write only)
    78                          VDP_STAT:           EQU $A1                           ; VDP status (read only)
    79                          VDP_ACR:            EQU $A6                           ; VDP ACCESS CONTROL REGISTER
    80                                  ELSE
    81                          VDP_DATA:           EQU $98                           ; VDP data port (VRAM read/write)
    82                          VDP_ADDR:           EQU $99                           ; VDP address (write only)
    83                          VDP_STAT:           EQU $99                           ; VDP status (read only)
    84                          VDP_PALT:           EQU $9A                           ; VDP palette latch (write only)
    85                          VDP_REGS:           EQU $9B                           ; VDP register access (write only)
    86                          VDP_ACR:            EQU $9C                           ; VDP ACCESS CONTROL REGISTER
    87                                  ENDIF
    88                          
    89                                  IF      PLATFORM=1
    90                          PSG_REGS:           EQU $A4                           ; PSG register write port
    91                          PSG_DATA:           EQU $A5                           ; PSG value write port
    92                          PSG_STAT:           EQU $A4                           ; PSG value read port
    93                          
    94                                  ELSE
    95                          ;PSG_REGS:       EQU     $A0             ; PSG register write port
    96                          ;PSG_DATA:       EQU     $A1             ; PSG value write port
    97                          ;PSG_STAT:       EQU     $A2             ; PSG value read port
    98                          
    99                          PSG_REGS:           EQU $9A                           ; PSG register write port
   100                          PSG_DATA:           EQU $9B                           ; PSG value write port
   101                          PSG_STAT:           EQU $9A                           ; PSG value read port
   102                                  ENDIF
   103                          
   104                                  IF      PLATFORM=1
   105                          UART0               EQU $58                           ; DATA IN/OUT
   106                          UART1               EQU $59                           ; INTERRUPT ENABLE
   107                          UART2               EQU $5A                           ; INTERRUPT IDENTIFICATION/FIFO CONTROL
   108                          UART3               EQU $5B                           ; LINE CONTROL
   109                          UART4               EQU $5C                           ; MODEM CONTROL
   110                          UART5               EQU $5D                           ; LINE STATUS
   111                          UART6               EQU $5E                           ; MODEM STATUS
   112                          UART7               EQU $5F                           ; SCRATCH REG.
   113                                  ELSE
   114                          KBPPIA              EQU 0F4h                          ; PPI PORT A
   115                          KBPPIB              EQU 0F5h                          ; PPI PORT B
   116                          KBPPIC              EQU 0F6h                          ; PPI PORT C
   117                          KBPPICONT           EQU 0F7h                          ; PPI CONTROL PORT
   118                          
   119                          UART0:              EQU 068H                          ;   DATA IN/OUT
   120                          UART1:              EQU 069H                          ;   CHECK RX
   121                          UART2:              EQU 06AH                          ;   INTERRUPTS
   122                          UART3:              EQU 06BH                          ;   LINE CONTROL
   123                          UART4:              EQU 06CH                          ;   MODEM CONTROL
   124                          UART5:              EQU 06DH                          ;   LINE STATUS
   125                                  ENDIF
   126                          
   127                          
   128                          
   129                          ;---------------------------------------------------
   130                          ; memory mapped I/O
   131                          
   132                          SSL_REGS:       EQU $FFFF                         ; secondary slot select registers
   133                          
   134                          ;---------------------------------------------------
   135                          ; Constants used to define which hardware the BIOS will run on.
   136                          ; Used by the main_<model>.asm sources.
   137                          
   138                          ; VDP models:
   139                          TMS99X8         EQU $9918
   140                          V9938           EQU $9938
   141                          V9958           EQU $9958
   142                          
   143                          ; MSX models:
   144                          MODEL_MSX1      EQU 0
   145                          MODEL_MSX2      EQU 1
   146                          MODEL_MSX2P     EQU 2
   147                          MODEL_MSXTR     EQU 3
   148                          
   149                          MODEL_SUBROM    EQU 4
   150                          
   151                          ; Locales:
   152                          ; -- ID byte 0
   153                          LOCAL_CHSET_JP  EQU $00
   154                          LOCAL_CHSET_US  EQU $01
   155                          LOCAL_CHSET_KO  EQU $02
   156                          
   157                          LOCAL_DATE_YMD  EQU $00
   158                          LOCAL_DATE_MDY  EQU $10
   159                          LOCAL_DATE_DMY  EQU $20
   160                          
   161                          LOCAL_INT_60HZ  EQU $00
   162                          LOCAL_INT_50HZ  EQU $80
   163                          
   164                          ; -- ID byte 1
   165                          LOCAL_KBD_JP    EQU $00
   166                          LOCAL_KBD_US    EQU $01
   167                          LOCAL_KBD_FR    EQU $02
   168                          LOCAL_KBD_UK    EQU $03
   169                          LOCAL_KBD_DE    EQU $04
   170                          
   171                          LOCAL_BASIC_JP  EQU $00
   172                          LOCAL_BASIC_US  EQU $01
   173                          
   174                          KB_USE_SERIAL   EQU 1                             ; SET TO 1 FOR SERIAL INPUT
   175                          KB_USE_PS2      EQU 0                             ; SET TO 1 FOR PS/2 INPUT
   176                          
   177                          ; BOOLEAN VALUES
   178                          YES             EQU 1
   179                          NO              EQU 0
   180                          
   181                          ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
   182                          
mainmsx1.asm:
    31                          
    32                                  IF      PLATFORM=1
    33                          VDP                 EQU V9958
    34                          MODEL_MSX           EQU MODEL_MSX1
    35                          RETROBREW           EQU 1
    36                                  ENDIF
    37                          
    38                          
    39                          ; -- generic US config (60Hz, US keyboard layout)
    40                          LOCALE_CHSET    EQU LOCAL_CHSET_US
    41                          LOCALE_DATE     EQU LOCAL_DATE_MDY
    42                          LOCALE_INT      EQU LOCAL_INT_60HZ
    43                          LOCALE_KBD      EQU LOCAL_KBD_US
    44                          LOCALE_BASIC    EQU LOCAL_BASIC_US
    45                          
    46                          CALL_SUB        EQU NO
    47                          
    48                                  INCLUDE "main.asm"
main.asm:
     1                          ;_CBIOS_RETROBREW______________________________________________________________________________________________________
     2                          ;
     3                          ;
     4                          ;  The following code is a heavily modified version of the C-BIOS ROM. (See below disclaimer)
     5                          ;  It has been modified for use with the RETROBREW, and the RETROBREW HC series of computers.   Strict MSX1 compatibility
     6                          ;  is no longer maintained in this version, but, it aims to be as compatible as possible within the contraints
     7                          ;  of the RETROBREW hardware.   Extra features not supported by the RETROBREW hardware were removed to conserve ROM space
     8                          ;  and improve maintainability of the system.
     9                          ;
    10                          ;  Some features have been added to further support the RETROBREW systems
    11                          ;
    12                          ;  Conversion done by:   Dan Werner	11/1/2010
    13                          ;  Duodyne support: D.Werner 3/16/2024
    14                          ;__________________________________________________________________________________________________________________
    15                          ;
    16                          ;
    17                          ;
    18                          ; $Id: main.asm 570 2010-05-24 11:36:23Z bifimsx $
    19                          ; C-BIOS main ROM
    20                          ;
    21                          ; Copyright (c) 2002-2005 BouKiCHi.  All rights reserved.
    22                          ; Copyright (c) 2003 Reikan.  All rights reserved.
    23                          ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
    24                          ; Copyright (c) 2004-2009 Albert Beevendorp.  All rights reserved.
    25                          ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
    26                          ; Copyright (c) 2004-2005 Joost Yervante Damad.  All rights reserved.
    27                          ; Copyright (c) 2004-2005 Jussi Pitkänen.  All rights reserved.
    28                          ; Copyright (c) 2006-2007 Eric Boon.  All rights reserved.
    29                          ;
    30                          ; Redistribution and use in source and binary forms, with or without
    31                          ; modification, are permitted provided that the following conditions
    32                          ; are met:
    33                          ; 1. Redistributions of source code must retain the above copyright
    34                          ;    notice, this list of conditions and the following disclaimer.
    35                          ; 2. Redistributions in binary form must reproduce the above copyright
    36                          ;    notice, this list of conditions and the following disclaimer in the
    37                          ;    documentation and/or other materials provided with the distribution.
    38                          ;
    39                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    40                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    41                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    42                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    43                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONS.equENTIAL DAMAGES (INCLUDING, BUT
    44                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    45                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    46                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    47                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    48                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                          ;
    50                          
    51                                  INCLUDE "systemva.asm"
systemva.asm:
     1                          ; $Id: systemvars.asm 566 2010-03-02 00:59:42Z mthuurne $
     2                          ;
     3                          ; C-BIOS system variable declarations
     4                          ;
     5                          ; Copyright (c) 2002-2003 BouKiCHi.  All rights reserved.
     6                          ; Copyright (c) 2003 Reikan.  All rights reserved.
     7                          ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
     8                          ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
     9                          ; Copyright (c) 2004-2006 Joost Yervante Damad.  All rights reserved.
    10                          ; Copyright (c) 2004-2005 Albert Beevendorp.  All rights reserved.
    11                          ; Copyright (c) 2005 Jussi Pitkänen.  All rights reserved.
    12                          ;
    13                          ; Redistribution and use in source and binary forms, with or without
    14                          ; modification, are permitted provided that the following conditions
    15                          ; are met:
    16                          ; 1. Redistributions of source code must retain the above copyright
    17                          ;    notice, this list of conditions and the following disclaimer.
    18                          ; 2. Redistributions in binary form must reproduce the above copyright
    19                          ;    notice, this list of conditions and the following disclaimer in the
    20                          ;    documentation and/or other materials provided with the distribution.
    21                          ;
    22                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    23                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    24                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    25                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    26                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSequENTIAL DAMAGES (INCLUDING, BUT
    27                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOO.ds OR SERVICES; LOSS OF USE,
    28                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    29                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    30                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    31                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                          ;
    33                          
    34                          
    35                          ;-------------------
    36                          ; help function area
    37                          ;-------------------
    38                          ; Note: Functions defined in "main.asm" are disabled here.
    39                          
    40                          
    41                          ; F39A-F3AD: workarea for the DEF USR statement
    42                          ; this area is initialized with the 10 times the value $475A, which gives
    43                          ; the error 'Syntax Error'
    44                          USRTAB:         EQU $F39A
    45                          
    46                          ;----------------------
    47                          ; screen parameter area
    48                          ;----------------------
    49                          
    50                          ; F3AE: # of positions on a line in SCREEN 0 (ini:39)
    51                          LINL40:         EQU $F3AE
    52                          
    53                          ; F3AF: # of positions on a line in SCREEN 1 (ini:29)
    54                          LINL32:         EQU $F3AF
    55                          
    56                          ; F3B0: # of actually used positions in the current screenmodus (ini:39)
    57                          LINLEN:         EQU $F3B0
    58                          
    59                          ; F3B1: # of used lines on screen (ini:24)
    60                          CRTCNT:         EQU $F3B1
    61                          
    62                          ; F3B2: # of positions within a tabulator-column (ini:14)
    63                          CLMLST:         EQU $F3B2
    64                          
    65                          ; F3B3-F3B4: BASE(0): name table address for SCREEN 0 (ini:$0000)
    66                          ; used to initialize NAMBAS when SCREEN 0 is activated
    67                          TXTNAM:         EQU $F3B3
    68                          
    69                          ; F3B5-F3B6: BASE(1): color table address for SCREEN 0, unused? (ini:$0000)
    70                          TXTCOL:         EQU $F3B5
    71                          
    72                          ; F3B7-F3B8: BASE(2): pattern table address for SCREEN 0 (ini:$0800)
    73                          ; used to initialize CGPBAS when SCREEN 0 is activated
    74                          TXTCGP:         EQU $F3B7
    75                          
    76                          ; F3B9-F3BA: BASE(3): sprite attribute table address for SCREEN 0, unused (ini:$0000)
    77                          ; used to initialize ATRBAS when SCREEN 0 is activated
    78                          TXTATR:         EQU $F3B9
    79                          
    80                          ; F3BB-F3BC: BASE(4): sprite pattern table address for SCREEN 0, unused (ini:$0000)
    81                          ; used to initialize PATBAS when SCREEN 0 is activated
    82                          TXTPAT:         EQU $F3BB
    83                          
    84                          ; F3BD-F3BE: BASE(5): nametable address for SCREEN 1 (ini:$1800)
    85                          ; used to initialize NAMBAS when SCREEN 1 is activated
    86                          T32NAM:         EQU $F3BD
    87                          
    88                          ; F3BF-F3C0: BASE(6): color table address for SCREEN 1 (ini:$2000)
    89                          T32COL:         EQU $F3BF
    90                          
    91                          ; F3C1-F3C2: BASE(7): pattern table address for SCREEN 1 (ini:$0000)
    92                          ; used to initialize CGPBAS when SCREEN 1 is activated
    93                          T32CGP:         EQU $F3C1
    94                          
    95                          ; F3C3-F3C4: BASE(8): sprite attribute table address for SCREEN 1 (ini:$1B00)
    96                          ; used to initialize ATRBAS when SCREEN 1 is activated
    97                          T32ATR:         EQU $F3C3
    98                          
    99                          ; F3C5-F3C6: BASE(9): sprite pattern table address for SCREEN 1 (ini:$0800)
   100                          ; used to initialize PATBAS when SCREEN 1 is activated
   101                          T32PAT:         EQU $F3C5
   102                          
   103                          ; F3C7-F3C8: BASE(10): name table address for SCREEN 2 (ini:$1800)
   104                          ; used to initialize NAMBAS when SCREEN 2 is activated
   105                          GRPNAM:         EQU $F3C7
   106                          
   107                          ; F3C9-F3CA: BASE(11): color table address for SCREEN 2 (ini:$2000)
   108                          GRPCOL:         EQU $F3C9                         ; Screen2 Color
   109                          
   110                          ; F3CB-F3CC: BASE(12): pattern table address for SCREEN 2 (ini:$0000)
   111                          ; used to initialize CGPBAS when SCREEN 2 is activated
   112                          GRPCGP:         EQU $F3CB
   113                          
   114                          ; F3CD-F3CE: BASE(13): sprite attribute table address for SCREEN 2 (ini:$1B00)
   115                          ; used to initialize ATRBAS when SCREEN 2 is activated
   116                          GRPATR:         EQU $F3CD
   117                          
   118                          ; F3CF-F3D0: BASE(14): sprite pattern table address for SCREEN 2 (ini:$3800)
   119                          ; used to initialize PATBAS when SCREEN 2 is activated
   120                          GRPPAT:         EQU $F3CF
   121                          
   122                          ; F3D1-F3D2: BASE(15): name table address for SCREEN 3 (ini:$0800)
   123                          ; used to initialize NAMBAS when SCREEN 3 is activated
   124                          MLTNAM:         EQU $F3D1
   125                          
   126                          ; F3D3-F3D4: BASE(16): color table address for SCREEN 3 (ini:$0000)
   127                          ; the color table is unused in SCREEN 3
   128                          MLTCOL:         EQU $F3D3
   129                          
   130                          ; F3D5-F3D6: BASE(17): pattern table address for SCREEN 3 (ini:$0000)
   131                          ; used to initialize CGPBAS when SCREEN 3 is activated
   132                          MLTCGP:         EQU $F3D5
   133                          
   134                          ; F3D7-F3D8: BASE(18): sprite attribute table address for SCREEN 3 (ini:$1B00)
   135                          ; used to initialize ATRBAS when SCREEN 3 is activated
   136                          MLTATR:         EQU $F3D7
   137                          
   138                          ; F3D9-F3DA: BASE(19): sprite pattern table address for SCREEN 3 (ini:$3800)
   139                          ; used to initialize PATBAS when SCREEN 3 is activated
   140                          MLTPAT:         EQU $F3D9
   141                          
   142                          ; F3db: keyclick when a key is pressed: 0: no, 1: yes (ini: 1)
   143                          ; SCREEN ,,n will write to this address
   144                          CLIKSW:         EQU $F3db
   145                          
   146                          ; F3DC: line where the cursor is located
   147                          ; starts to count at 1 for the topmost line
   148                          CSRY:           EQU $F3DC
   149                          
   150                          ; F3DD: column where the cursor is located
   151                          ; starts to count at 1 for the leftmost column
   152                          CSRX:           EQU $F3DD
   153                          
   154                          ; F3DE: function key definition shown: 0: no, -1: yes
   155                          ; Note: MSX BIOS will mess up end-of-screen if this variable contains
   156                          ;       something other than $00 or $FF.
   157                          CNSDFG:         EQU $F3DE
   158                          
   159                          ; F3DF-D3E6: storage for the last written value towar.ds VDP registers 0 till 7
   160                          ; this is needed because these registers are write only
   161                          RG0SAV:         EQU $F3DF
   162                          RG1SAV:         EQU $F3E0
   163                          RG2SAV:         EQU $F3E1
   164                          RG3SAV:         EQU $F3E2
   165                          RG4SAV:         EQU $F3E3
   166                          RG5SAV:         EQU $F3E4
   167                          RG6SAV:         EQU $F3E5
   168                          RG7SAV:         EQU $F3E6
   169                          ; F3E7: last read value of VDP register 8
   170                          STATFL:         EQU $F3E7
   171                          
   172                          ; F3E8: information about the joystick and space bar
   173                          ; 7 6 5 4 3 2 1 0
   174                          ; | | | |       +-- Space bar, trig(0) (0 = pressed)
   175                          ; | | | +---------- Stick 1, Trigger 1 (0 = pressed)
   176                          ; | | +------------ Stick 1, Trigger 2 (0 = pressed)
   177                          ; | +-------------- Stick 2, Trigger 1 (0 = pressed)
   178                          ; +---------------- Stick 2, Trigger 2 (0 = pressed)
   179                          TRGFLG:         EQU $F3E8
   180                          
   181                          ; F3E9: code for the standard foreground color (ini:15)
   182                          FORCLR:         EQU $F3E9
   183                          
   184                          ; F3EA: code for the standard background color (ini:4)
   185                          BAKCLR:         EQU $F3EA
   186                          
   187                          ; F3EB: code for the standard border color (ini:7)
   188                          BDRCLR:         EQU $F3EB
   189                          
   190                          ; F3EC-F3EE: Jump instruction used by Basic LINE command.
   191                          ; The routines used are: RIGHTC, LEFTC, UPC and DOWNC
   192                          MAXUPD:         EQU $F3EC
   193                          
   194                          ; F3EF-F3F1: Jump instruction used by Basic LINE command.
   195                          ; The routines used are: RIGHTC, LEFTC, UPC and DOWNC
   196                          MINUPD:         EQU $F3EF
   197                          
   198                          ; F3F2: working color, as used for graphical operations
   199                          ; normally equals to the foreground color (ini:15)
   200                          ATRBYT:         EQU $F3F2
   201                          
   202                          ; F3F3-F3F4: starting value of the address of the queue-table
   203                          ; the queue-table contains 4 queue's: 3 for sound and one for RS232
   204                          ; (ini: QUETAB ($F959))
   205                          QUEUES:         EQU $F3F3
   206                          
   207                          ; F3F5: CLOAD flag =0 when CLOAD =255 when CLOAD?
   208                          FRCNEW:         EQU $F3F5
   209                          
   210                          ; F3F6: VDP-interupt counter that counts from 3 to 0, when it reaches zero, the
   211                          ; keyboard matrix is scanned, and the counters is reset at 3
   212                          SCNCNT:         EQU $F3F6
   213                          
   214                          ; F3F7: key repeat counter. Runs from 13 to 0, and is changed when SCNCNT is changed
   215                          ; if the key remained the same. If it reaches 0, keyrepetition starts. If another key
   216                          ; is pressed the value is reset at 13.
   217                          REPCNT:         EQU $F3F7
   218                          
   219                          ; F3F8-F3F9: first free space in the inputbuffer of the keyboard
   220                          ; everytime a key is added to the inputbuffer, this address is incremented,
   221                          ; when it equals to GETPNT, the buffer is full
   222                          ; the buffer is located at KEYBUF
   223                          PUTPNT:         EQU $F3F8                         ; L[obt@ÖÌ|C^
   224                          
   225                          ; F3FA-F3FB: address in inputbuffer of first character that is not yet read
   226                          ; everytime a key is read from the buffer it is incremented
   227                          ; the buffer is located at KEYBUF
   228                          GETPNT:         EQU $F3FA                         ; L[obt@ÖÌ|C^
   229                          
   230                          ; F3FC-F400: memory area for tape system parameters for 1200 baud
   231                          ; F3FC: length of  low signal for 0     (ini:83)
   232                          ; F3FD: length of high signal for 0     (ini:92)
   233                          ; F3FE: length of  low signal for 1     (ini:38)
   234                          ; F3FF: length of high signal for 1     (ini:45)
   235                          ; F400: length of synchronization block (ini:15)
   236                          CS120:          EQU $F3FC
   237                          
   238                          ; F401-F405: memory area for tape system parameters for 1200 baud
   239                          ; F401: length of  low signal for 0     (ini:37)
   240                          ; F402: length of high signal for 0     (ini:45)
   241                          ; F403: length of  low signal for 1     (ini:14)
   242                          ; F404: length of high signal for 1     (ini:22)
   243                          ; F405: length of synchronization block (ini:31)
   244                          CS240:          EQU $F401
   245                          
   246                          ; F406-F407: lenghts of signal for 0 for the current speed of the tape system
   247                          ; either equal to the content of F3FC-F3FD or the content of F401-F402
   248                          ; (ini: 83, 92)
   249                          LOW_:           EQU $F406                         ; real name: LOW, but doesn't compile?
   250                          
   251                          ; F408-F409: lenghts of signal for 1 for the current speed of the tape system
   252                          ; either equal to the content of F3FE-F3FF or the content of F403-F404
   253                          ; (ini: 38, 45)
   254                          HIGH_:          EQU $F408                         ; real name: HIGH, but doesn't compile?
   255                          
   256                          ; F40A: lenghts of synchronization block for the current speed of the tape system
   257                          ; either equal to the content of F400 or the content of F405 (ini: 15)
   258                          HEADER:         EQU $F40A
   259                          
   260                          ; F40B-F40C: standard setting for the height/width aspect of the
   261                          ; BASIC statement CIRCLE; only the byte in F40B is actually used
   262                          ; If ASPECT2 is larger then 255, the value of F40B is the number of horizontal
   263                          ; dots per 256 verical dots of the radius (ini:$0100)
   264                          ; ! not verified :)
   265                          ASPCT1:         EQU $F40B
   266                          
   267                          ; F40D-F40E: standard setting for the height/width aspect of the
   268                          ; BASIC statement CIRCLE; If ASPCT2 is smaller then 512, then ASPCT2 is the
   269                          ; number of vertical dots per 256 horizontal dots of the radius (ini:$0100)
   270                          ; ! not verified :)
   271                          ASPCT2:         EQU $F40D
   272                          
   273                          ; F40F-F413: work area for the BASIC statement RESUME NEXT
   274                          ; contains a fake end of basic program
   275                          ; (ini: 58, 0, 0, 0, 0)
   276                          ENDPRG:         EQU $F40F
   277                          
   278                          ; F414: errornumber of last error that happened while executing a BASIC program
   279                          ; (ini:0)
   280                          ERRFLG:         EQU $F414
   281                          
   282                          ; F415: number of characters in the writebuffer of the printer that still
   283                          ; need printing
   284                          LPTPOS:         EQU $F415
   285                          
   286                          ; F416: switch indicating if output should be screen or printer
   287                          ; (think LIST vs LLIST) (ini:0) values: 0: screen, 1: printer
   288                          PRTFLG:         EQU $F416
   289                          
   290                          ; F417: switch indicating if hooked up printer is an MSX printer or not
   291                          ; values: 0: MSX-Printer, 1: no MSX-Printer
   292                          ; if the printer is no MSX-Printer, non-ASCII (>=128) characters are replaced
   293                          ; by spaces before sending them to the printer (ini: 0)
   294                          NTMSXP:         EQU $F417
   295                          
   296                          ; F418: switch indicating of printing routines should use raw-mode or
   297                          ; should convert:
   298                          ; =0 to convert tabs and unknown characters to spaces and remove graphical headers
   299                          ; =1 to send data just like it gets it (ini: 0)
   300                          ; if RAWPRT is 1, the value if NTMSXP is ignored
   301                          RAWPRT:         EQU $F418
   302                          
   303                          ; ---------------------------
   304                          ; basic interpreter work area
   305                          ; ---------------------------
   306                          
   307                          ; F419-F41A: work area for the BASIC command VAL: contains address of character that
   308                          ; has temporarely been replaced by O by VAL
   309                          VLZADR:         EQU $F419
   310                          
   311                          ; F41B: work area for the BASIC command VAL: contains the character originally at
   312                          ; the location of VLZADR
   313                          VLZDAT:         EQU $F41B
   314                          
   315                          ; F41C-F41D: line number of current BASIC line being executed, in direct modus this
   316                          ; contains $FFFF (ini:$FFFF)
   317                          CURLIN:         EQU $F41C
   318                          
   319                          ; F41E: error detection prefix for KBUF, always contains ":"
   320                          ; originally undocumented :)
   321                          KBFMIN:         EQU $F41E
   322                          
   323                          ; F41F-F55C: workarea for coding basic rules that have been typed in direct modus
   324                          ; this are contains the code for the line interpreted in direct modus
   325                          KBUF:           EQU $F41F
   326                          
   327                          ; F55D: byte used as first byte of BUF for input statements, giving them always
   328                          ; an extra ',' (ini:44 == ',')
   329                          BUFMIN:         EQU $F55D
   330                          
   331                          ; F55E-F65F: used in direct modus to store the ASCII codes of the line, or simulary
   332                          ; for INPUT or LINE INPUT BASIC statements
   333                          BUF:            EQU $F55E
   334                          
   335                          ; F562-F570: used by bitblit routines to store the register data
   336                          SX:             EQU $F562
   337                          SY:             EQU $F564
   338                          DX:             EQU $F566
   339                          DY:             EQU $F568
   340                          NX:             EQU $F56A
   341                          NY:             EQU $F56C
   342                          CDUMMY:         EQU $F56E
   343                          ARG_:           EQU $F56F
   344                          L_OP:           EQU $F570
   345                          
   346                          ; F660: last usable byte of BUF
   347                          ENDBUF:         EQU $F660
   348                          
   349                          ; F661: number of column of last written character on the screen
   350                          TTYPOS:         EQU $F661
   351                          
   352                          ; F662: switch indicating during variable lookup for arrays, if this has not already
   353                          ; been done for a DIM BASIC statement
   354                          DIMFLG:         EQU $F662
   355                          
   356                          ; F663: workarea for evaluation of expressions; contains type of last evaluated
   357                          ; expression; the value of the expression is in DAC, possible values of VALTYP:
   358                          ; 2: integer
   359                          ; 3: string
   360                          ; 4: normal real
   361                          ; 8: double real
   362                          VALTYP:         EQU $F663
   363                          
   364                          ; F664: workarea for coding of BASIC statements. switch indicating if keywor.ds have
   365                          ; to be encoded or not. E.g. in DATA fiel.ds they should not be encoded
   366                          ; 0: encoding on, 1: encoding off
   367                          DORES:          EQU $F664
   368                          
   369                          ; F665: workarea for coding of BASIC statements. swithc indication of numbers have to be
   370                          ; encoded; values: $0: encode as const, $1: encode as line number, $FF: do not encode
   371                          DONUM:          EQU $F665
   372                          
   373                          ; F666-F667: work area for evaluation of expressions: contains address of first character
   374                          ; after the code of the last evaluated expression
   375                          CONTXT:         EQU $F666
   376                          
   377                          ; F668: work area for evaluation of expressions: contains information byte about the
   378                          ; encoding of the last evaluated constant number; value of this constant is in CONLO
   379                          ; values:
   380                          ; $0B: octal (2 bytes)
   381                          ; $0C: hexadecimal (2 bytes)
   382                          ; $0F: decimal 0<=value<256 (1 byte)
   383                          ; $11-$1B: short encoding for 0->10
   384                          ; $1C: decimal (2bytes, 2s-compliment)
   385                          ; $26: $42 binary as ASCII
   386                          ; $0E: line number
   387                          ; $0D: line pointer
   388                          ; $1D: normal real (1 byte exp, 3 bytes BCD)
   389                          ; $1F: double real (1 byte exp, 7 bytes BCD)
   390                          CONSAV:         EQU $F668
   391                          
   392                          ; F669: work area for evaluation of expressions: contains type of last evaluated number
   393                          ; constant; the value is in CONLO, for values of CONTYP, see VALTYP
   394                          ; Strings are never contant in BASIC!
   395                          CONTYP:         EQU $F669
   396                          
   397                          ; F66A-F671: work area for evaluation of expressions: contains the value of the last
   398                          ; evaluated number contant; value starts at F66A, and takes bytes as needed for the type
   399                          CONLO:          EQU $F66A
   400                          
   401                          ; F672-F673: upper limit of memory area reserved for strings, contains the upper address
   402                          ; that is allowed to be used
   403                          MEMSIZ:         EQU $F672
   404                          
   405                          ; F674-F675: top of stack; also first byte below string area
   406                          STKTOP:         EQU $F674
   407                          
   408                          ; F676-F677: start address of current basic program, set at initialization, and
   409                          ; not changed by OS (ini:$8001)
   410                          TXTTAB:         EQU $F676
   411                          
   412                          ; F678-F679: address of first unused string-descriptor in TEMPST
   413                          ; (ini:value of TEMPST)
   414                          TEMPPT:         EQU $F678
   415                          
   416                          ; F67A-F697: work area for evaluation of string expressions; this area has space
   417                          ; for 10 string descriptors of 3 bytes; these can be used for temporarely results
   418                          ; of string arythmetics
   419                          TEMPST:         EQU $F67A
   420                          
   421                          ; F698-F69A: work area for evaluation of string expressions; this contains the
   422                          ; string descriptor of the intermediate result
   423                          DSCTMP:         EQU $F698
   424                          
   425                          ; F69B-F69C: first address within the string memory area that is still free
   426                          ; the string area is filled backwar.ds, soo the lower the value, the less space
   427                          ; remains (ini: value of MEMSIZ)
   428                          FRETOP:         EQU $F69B
   429                          
   430                          ; F69D-F69E: temporarely storage for adminstration of the basic interpreter
   431                          TEMP3:          EQU $F69D
   432                          
   433                          ; F69F-F6A0: temporarely storage for garbage collection
   434                          TEMP8:          EQU $F69F
   435                          
   436                          ; F6A1-F6A2: address of first byte in BASIC-code after last FOR statement
   437                          ENDFOR:         EQU $F6A1
   438                          
   439                          ; F6A3-F6A4: line number of last used line of DATA statements
   440                          DATLIN:         EQU $F6A3
   441                          
   442                          ; F6A5: switch indicating if a variable is allowed to be an array variable.
   443                          ; This is e.g. not allowed for the loop variable of a FOR statement
   444                          ; 0 = allowed, 1 = not allowed
   445                          SUBFLG:         EQU $F6A5
   446                          
   447                          ; F6A6: switch indicating if currently a READ or INPUT statement is being executed
   448                          FLKINP:         EQU $F6A6
   449                          
   450                          ; F6A7-F6A8: temporarely storage for adminstration of the basic interpreter
   451                          TEMP:           EQU $F6A7
   452                          
   453                          ; F6A9: switch indicating if there are still linenumber constants in the BASIC code
   454                          ; that are encoded as pointers?
   455                          PTRFLG:         EQU $F6A9
   456                          
   457                          ; F6AA: switch indication if currently an AUTO statement is active
   458                          ; 0 = no auto, 1 = auto
   459                          AUTFLG:         EQU $F6AA
   460                          
   461                          ; F6AB-F6AC: last generated AUTO line number
   462                          AUTLIN:         EQU $F6AB
   463                          
   464                          ; F6AD-F6AE: last used AUTO increment
   465                          AUTINC:         EQU $F6AD
   466                          
   467                          ; F6AF-F6B0: work area of the error system; contains address of first byte
   468                          ; of statement currently being executed
   469                          SAVTXT:         EQU $F6AF
   470                          
   471                          ; F6B1-F6B2: work area of the error system; contains address of the stack
   472                          ; before executing of the current statement started
   473                          SAVSTK:         EQU $F6B1
   474                          
   475                          ; F6B3-F6B4: line number of last failed line
   476                          ERRLIN:         EQU $F6B3
   477                          
   478                          ; F6B5-F6B6: line number of last used (changed, listed, added) line
   479                          DOT:            EQU $F6B5
   480                          
   481                          ; F6B7-F5B8: work area of the error system; contains the address of the first
   482                          ; byte of the statement that last failed; on failure it is stored with the
   483                          ; content of SAVTXT
   484                          ERRTXT:         EQU $F6B7
   485                          
   486                          ; F6B9-F6BA: work area of the error system; contains the line number where
   487                          ; execution should go to on error (as in basic: ON ERROR GOTO x)
   488                          ONELIN:         EQU $F6B9
   489                          
   490                          ; F6BB-F6BC: work area of the error system; indication if the interpreter is
   491                          ; currently executing an error catch routine
   492                          ; 0 = no, FF = yes
   493                          ONEFLG:         EQU $F6BB
   494                          
   495                          ; F6BC-F6BD: temporarely storage for the interpreter
   496                          TEMP2:          EQU $F6BC
   497                          
   498                          ; F6BE-F6BF: line number of last program break, reset at 0 at any program change
   499                          OLDLIN:         EQU $F6BE
   500                          
   501                          ; F6C0-F6C1: address of first statement that is not executed due to a break
   502                          OLDTXT:         EQU $F6C0
   503                          
   504                          ; F6C2-F6C3: begin address of storage of basic variables and function descriptors;
   505                          ; possibly adjusted when program changes in size
   506                          VARTAB:         EQU $F6C2
   507                          
   508                          ; F6C4-F6C5: begin address of array variables; possibly adjusted when program
   509                          ; changes size or more variables are allocated
   510                          ARYTAB:         EQU $F6C4
   511                          
   512                          ; F6C6-F6C7: address of first free byte not used for storage of code or variables
   513                          ; (ini: $8003)
   514                          STREND:         EQU $F6C6
   515                          
   516                          ; F6C8-F6C9: address where data nee.ds to be searched at next READ statement
   517                          DATPTR:         EQU $F6C8
   518                          
   519                          ; F6CA-F6E3: table with variable types, one for each letter in the alphabet
   520                          ; possible values:
   521                          ;       2 = integer     3 = string      4 = single      8 = double
   522                          DEFTBL:         EQU $F6CA
   523                          
   524                          ; F6E4-F7B4: work area for execution of self defined functions
   525                          
   526                          ; F6E4-F6E5: contains address ; of previous parameter block on the stack;
   527                          ; needed for garbage collection
   528                          PRMSTK:         EQU $F6E4
   529                          
   530                          ; F6E6-F6E7:  amount of valid bytes in PARM1
   531                          PRMLEN:         EQU $F6E6
   532                          
   533                          ; F6E8-F74B: contains definitions of the variables in the parameter lists
   534                          ; of self defined functions
   535                          PARM1:          EQU $F6E8
   536                          
   537                          ; F74C-F74D: previous value of PRMSTK
   538                          PRMDRV:         EQU $F74C
   539                          
   540                          ; F74E-F74F: number of valid bytes in PARM2
   541                          PRMLN2:         EQU $F74E
   542                          
   543                          ; F750-F7B3: area used for calculation of values that end up in PARM1
   544                          PARM2:          EQU $F750
   545                          
   546                          ; F7B4: switch indicating of while searching a variable name PARM1 has
   547                          ; been looked at; 0 = no, 1 = yes
   548                          PRMFLG:         EQU $F7B4
   549                          
   550                          ; F7B5-F7B6: address of first byte where it is no longer needed to search
   551                          ; for a variable name; it is equal to ARYTAB when the normal variable area
   552                          ; is searched, and equal to PARM1+PRMLEN when PARM1 is searched
   553                          ARYTA2:         EQU $F7B5
   554                          
   555                          ; F7B7-F7B8: switch indicating iif PARM1 contains a valid parameter block
   556                          ; 0 = no, 1 = yes
   557                          NOFUNS:         EQU $F7B7
   558                          
   559                          ; F7B8-F7B9: temporarely memory used while searching parameter blocks on
   560                          ; the stack
   561                          TEMP9:          EQU $F7B8
   562                          
   563                          ; F7BA-F7BB: counter of the nesting-dept of the function being evaluated
   564                          FUNACT:         EQU $F7BA
   565                          
   566                          ; F7BC-F7C3: work area when executing the SWAP statement; the first variable
   567                          ; is stored here
   568                          SWPTMP:         EQU $F7BC
   569                          
   570                          ; F7C4: switch indicating if TRON is on; 0 = off, >0 = on
   571                          TRCFLG:         EQU $F7C4
   572                          
   573                          ; F7C5-F7F4: workarea when executing numeric operators
   574                          FBUFFR:         EQU $F7C5
   575                          DECTMP:         EQU $F7F0
   576                          DECTM2:         EQU $F7F2
   577                          DECCNT:         EQU $F7F4
   578                          
   579                          ; F7F6-F805: workarea when executing numeric operators; intermediate
   580                          ; results are stored here; also used for parameter transfer when using
   581                          ; the USR functions; VALTYPE then contains the type, and the value is
   582                          ; stored like this:
   583                          ; typename  type  where
   584                          ; integer   2     F7F8-F7F9
   585                          ; string    3     F7F8-F7F9 (address descriptor)
   586                          ; single    4     F7F6-F7F9
   587                          ; double    8     F7F6-F7FD
   588                          DAC:            EQU $F7F6
   589                          
   590                          ; F806-F856: workarea when executing numeric operators
   591                          HOLD8:          EQU $F806
   592                          HOLD2:          EQU $F836
   593                          HOLD:           EQU $F83E
   594                          ARG:            EQU $F847
   595                          
   596                          ; F857-F85E: last calculated random double
   597                          RNDX:           EQU $F857
   598                          
   599                          ; --------------------
   600                          ; filesystem work area
   601                          ; --------------------
   602                          
   603                          ; F85F: # of filedescriptors reserved minus 1
   604                          ; this is also the maximum number of open files possible
   605                          MAXFIL:         EQU $F85F
   606                          
   607                          ; F860-F861: start address of the file information table
   608                          FILTAB:         EQU $F860
   609                          
   610                          ; F862-F863: start address of the first file-buffer
   611                          NULBUF:         EQU $F862
   612                          
   613                          ; F864-F865: during file I/O the start address of the active file-buffer
   614                          PTRFIL:         EQU $F864
   615                          
   616                          ; F866: flag indicating if the file that is being loaded have to be started
   617                          ; immediately; 0 = no, FF = yes
   618                          RUNFLG:         EQU $F866
   619                          
   620                          ; note that RUNFLG and FILNAM overlap!
   621                          
   622                          ; F866-F870: filename of last file that has been active;
   623                          ; first 8 chars are name, last 3 are extension
   624                          FILNAM:         EQU $F866
   625                          
   626                          ; F871-F87B: second filename if needed, e.g. the NAME command
   627                          FILNM2:         EQU $F871
   628                          
   629                          ; F87C: switch indicating if currently a BASIC program is being loaded
   630                          ; 0 = no, 1 = yes
   631                          NLONLY:         EQU $F87C
   632                          
   633                          ; F87D-F87E: workarea for BLOAD and BSAVE; when a part of normal memory
   634                          ; is written, it contains the end address of the written memory region
   635                          ; if video memory is written it contains $4BE5 + start address of the
   636                          ; written memory region ??
   637                          SAVEND:         EQU $F87D
   638                          
   639                          ; F87F-F91E: storage area for the text of the function keys 10x16 bytes,
   640                          ; but strings need to be zero-terminated, soo maximum length of command is
   641                          ; 15 characters
   642                          FNKSTR:         EQU $F87F
   643                          
   644                          ; ------------------------
   645                          ; screen routine work area
   646                          ; ------------------------
   647                          
   648                          ; F91F-F921: start address of the standard ASCII pattern table
   649                          ; at every change towar.ds a text mode it is copied in the pattern table
   650                          ; of the VDP
   651                          ;   F91F: slot indication (ini: 0)
   652                          ;   F920-F921: address (ini: 1BBF)
   653                          ; TODO: make CBIOS use this value instead of hardcoded value
   654                          CGPNT:          EQU $F91F
   655                          
   656                          ; F922-F923: start address of the nametable in the VRAM
   657                          NAMBAS:         EQU $F922
   658                          
   659                          ; F924-F925: start address of the pattern table in the VRAM
   660                          CGPBAS:         EQU $F924
   661                          
   662                          ; F926-F927: start address of the sprite pattern table in the VRAM
   663                          PATBAS:         EQU $F926
   664                          
   665                          ; F928-F929: start address of the sprite location table in the VRAM
   666                          ATRBAS:         EQU $F928
   667                          
   668                          ; F92A-F92B: address in VRAM of the pattern of the current position
   669                          ; on screen
   670                          CLOC:           EQU $F92A
   671                          
   672                          ; F92C: mask for CLOC selecting the right bits that correspond with
   673                          ; the current position
   674                          CMASK:          EQU $F92C
   675                          
   676                          ; F92D-F930: work area for graphical calculations
   677                          MINDEL:         EQU $F92D
   678                          MAXDEL:         EQU $F92F
   679                          
   680                          ; ----------------------------------------------
   681                          ; F931-F941: work area for calculation of CIRCLE
   682                          ; ----------------------------------------------
   683                          
   684                          ; F931-F932: ratio of # of dots in the horizontal and vertical direction
   685                          ; if = $0100 then ASPCT1 and ASPCT2 are used
   686                          ; if < $0100 then it is the # of dots in one direction for each
   687                          ; $0100 # of dots in the other direction; the direction is indicated
   688                          ; by CSCLXY
   689                          ASPECT:         EQU $F931
   690                          
   691                          ; F933:F934: ; distance, in # of dots from the center of the most
   692                          ; distant point of the circle
   693                          CENCNT:         EQU $F933
   694                          
   695                          ; F935: switch indication if the start and/or end point need to be
   696                          ; connected to the center
   697                          ;  bit 7: connect end point; 1 = yes
   698                          ;  bit 0: connect start point; 1 = yes
   699                          CLINEF:         EQU $F935
   700                          
   701                          ; F936-F937: used during calculation of CIRCLE
   702                          CNPNTS:         EQU $F936
   703                          
   704                          ; F938: direction of drawing of circle:
   705                          ;  00 = from CSTCNT towar.ds CENCNT
   706                          ;  FF = from CENCNT towar.ds CSTCNT
   707                          CPLOTF:         EQU $F938
   708                          
   709                          ; F939-F93A: used during calculation of CIRCLE
   710                          CPCNT:          EQU $F939
   711                          
   712                          ; F93B-F93C: ; contains the total # of dots of the full circle,
   713                          ; even when only a part is drawn
   714                          CPCNT8:         EQU $F93B
   715                          
   716                          ; F93D-F93E: used during calculation of CIRCLE
   717                          CRCSUM:         EQU $F93D
   718                          
   719                          ; F93F-F940: ; distance in dots from the center towar.ds the closest
   720                          ; circle point
   721                          CSTCNT:         EQU $F93F
   722                          
   723                          ; F941: switch indicating if the X or Y direction nee.ds to be streched:
   724                          ; 0 = X, 1 = Y
   725                          CSCLXY:         EQU $F941
   726                          
   727                          ; F942-F943: store of CLOC, also used for PAINT
   728                          CSAVEA:         EQU $F942
   729                          
   730                          ; F944: storage of CMASK; also used for PAINT
   731                          CSAVEM:         EQU $F944
   732                          
   733                          ; F945-F946: horizontal distance towar.ds the center
   734                          CXOFF:          EQU $F945
   735                          
   736                          ; F947-F948: vertical distance towar.ds the center
   737                          CYOFF:          EQU $F947
   738                          
   739                          ; -------------------------------------------
   740                          ; work area for executing the PAINT statement
   741                          ; -------------------------------------------
   742                          
   743                          ; F949: leftmost position of protrusion towar.ds the left
   744                          LOHMSK:         EQU $F949
   745                          
   746                          ; F94A: new workdirection for protrusion towar.ds the left
   747                          LOHDIR:         EQU $F94A
   748                          
   749                          ;F94B-F94C: leftmost position of protrusion towar.ds the left
   750                          LOHADR:         EQU $F94B
   751                          
   752                          ; F94D: size of protrusion towar.ds the left
   753                          LOHCNT:         EQU $F94D
   754                          
   755                          ; F94F-F950: # of pixels that may be skipped
   756                          SKPCNT:         EQU $F94F
   757                          
   758                          ; F951-F952: # of movements
   759                          MOVCNT:         EQU $F951
   760                          
   761                          ; F953: current direction; $40 = \/, $C0 = /\, $00 = stop
   762                          PDIREC:         EQU $F953
   763                          
   764                          ; F954: indicate if paint towar.ds the left worked
   765                          LFPROG:         EQU $F954
   766                          
   767                          ; F955: indicate of a paint towar.ds the right worked
   768                          RTPROG:         EQU $F955
   769                          
   770                          ; F956-F957: start address of a jumptable for subcomman.ds
   771                          ; contained in a string variable, used for both PLAY and DRAW
   772                          ; where this systemvar points to either the PLAY or the DRAW
   773                          ; table
   774                          MCLTAB:         EQU $F956
   775                          
   776                          ; F958: switch indication if MCLTAB is for PLAY or DRAW
   777                          ; $0 = DRAW, $FF = PLAY
   778                          MCLFLG:         EQU $F958
   779                          
   780                          ; ------------------------------------------
   781                          ; work area for sound and queueing and RS232
   782                          ; ------------------------------------------
   783                          
   784                          ; F959-F971: Variables for three music queues and one RS232 queue
   785                          ; F959: VOICAQ put position
   786                          ; F95A: VOICAQ get position
   787                          ; F95B: VOICAQ putback flag
   788                          ; F95C: VOICAQ size
   789                          ; F95D: VOICAQ address
   790                          ; F95F-F964: VOICBQ
   791                          ; F965-F96A: VOICCQ
   792                          ; F96B-F970: RS2IQ
   793                          QUETAB:         EQU $F959
   794                          
   795                          ; Putback characters for queues. TODO: what purpose do these have exactly?
   796                          QUEBAK:         EQU $F971
   797                          
   798                          ; Buffers for queues.
   799                          VOICAQ:         EQU $F975                         ; Voice A queue
   800                          VOICBQ:         EQU $F9F5                         ; Voice B queue
   801                          VOICCQ:         EQU $FA75                         ; Voice C queue
   802                          RS2IQ:          EQU $FAF5                         ; RS232   queue
   803                          
   804                          ; in MSX2 the content of RS2IQ is used differently:
   805                          DPPAGE:         EQU $FAF5                         ; Display page (SCR5+)
   806                          ACPAGE:         EQU $FAF6                         ; Active page (SCR5+)
   807                          
   808                          ; FAF7: AV control port value storage
   809                          AVCSAV:         EQU $FAF7
   810                          
   811                          ; FAF8: extended BASIC ROM slot address
   812                          EXBRSA:         EQU $FAF8                         ; TuÊu
   813                          
   814                          ; FAF9: character count for ROMA-KANA
   815                          CHRCNT:         EQU $FAF9
   816                          
   817                          ; FAFA-FAFB: character save for ROMA-KANA
   818                          ROMA:           EQU $FAFA
   819                          
   820                          ; ROMA-KANA extension mode switch or VRAM size??
   821                          MODE:           EQU $FAFC
   822                          ;Reserved       equ     $FAFD
   823                          
   824                          ; FAFE-FAFF: x position for mouse or lightpen
   825                          XSAVE:          EQU $FAFE
   826                          
   827                          ; FB00-FB01: y position for mouse or lightpen
   828                          YSAVE:          EQU $FB00
   829                          LOGOPR:         EQU $FB02
   830                          ; FB21-FB28: Table which contains info for up to 4 disk ROMs, 2 bytes each:
   831                          ; - first byte: number of drives connected to this interface
   832                          ; - second byte: slot ID of the disk ROM
   833                          DRVINF:         EQU $FB21
   834                          ; end of MSX2 only usage of RS2IQ
   835                          
   836                          ; --------------------------------
   837                          ; work area for the PLAY statement
   838                          ; --------------------------------
   839                          
   840                          ; FB35: status about the parsing of a PLAY string
   841                          ;  bit 7: only one time parsed; 1 = yes
   842                          ;  bit 1-0: number of parsed strings (0-3)
   843                          PRSCNT:         EQU $FB35
   844                          
   845                          ; FB36-FB37: storage of stack
   846                          SAVSP:          EQU $FB36
   847                          
   848                          ; FB38: # of voice currently being parsed (0-2)
   849                          VOICEN:         EQU $FB38
   850                          
   851                          ; FB39-FB3A: storage of volume of a muted voice
   852                          SAVVOL:         EQU $FB39
   853                          
   854                          ; FB3B: size of string being parsed (also used by DRAW)
   855                          MCLLEN:         EQU $FB3B
   856                          
   857                          ; FB3C-FB3D: address of string being parsed (also used by DRAW)
   858                          MCLPTR:         EQU $FB3C
   859                          
   860                          ; FB3E: temporarely storage of active queue # (0-2)
   861                          QUEUEN:         EQU $FB3E
   862                          
   863                          ; FB3F: flag indicating which queues are active
   864                          ; bit 2 = queue 2; 1 = active
   865                          ; bit 1 = queue 1; 1 = active
   866                          ; bit 0 = queue 0; 1 = active
   867                          MUSICF:         EQU $FB3F
   868                          
   869                          ; FB40: count of the # of PLAY statements parsed, but not executed yet
   870                          PLYCNT:         EQU $FB40
   871                          
   872                          ; FB41-FB65: Voice Control Block for voice A (queue 0)
   873                          VCBA:           EQU $FB41
   874                          ; FB66-FB8A: Voice Control Block for voice B (queue 1)
   875                          VCBB:           EQU $FB66
   876                          ; FB8B-FBAF: Voice Control Block for voice C (queue 2)
   877                          VCBC:           EQU $FB8B
   878                          
   879                          ; each VCB has the following structure:
   880                          
   881                          ; name                  offset  length  purpose
   882                          METREX:         EQU 0                             ;     2       interrupt counter
   883                          VCXLEN:         EQU 2                             ;     1       MCLLEN for voice
   884                          VCXPTR:         EQU 3                             ;     2       MCLPTR for voice
   885                          VCXSTP:         EQU 5                             ;     2       stack pointer
   886                          QLENGX:         EQU 7                             ;     1       # bytes in queue
   887                          NTICSX:         EQU 8                             ;     2       new counter ?
   888                          TONPRX:         EQU 10                            ;     2       pitch
   889                          AMPLTX:         EQU 12                            ;     1       amplitude
   890                          ENVPRX:         EQU 13                            ;     2       envelope speed
   891                          OCTAVX:         EQU 15                            ;     1       octave
   892                          NOTELX:         EQU 16                            ;     1       tone length
   893                          TEMPOX:         EQU 17                            ;     1       tempo
   894                          VOLUMX:         EQU 18                            ;     1       volume
   895                          ENVLPX:         EQU 19                            ;     1       envelope shape
   896                          MCLSTX:         EQU 33                            ;             space for stack storage
   897                          MCLSEX:         EQU 36                            ;             start of stack
   898                          ; the stack mentioned above is used to store bytevalues
   899                          ; that are readied to be put on the voice queue
   900                          
   901                          ; -----------------------------------------------
   902                          ; settings for screen editor and interrupt system
   903                          ; -----------------------------------------------
   904                          
   905                          ; FBB0: switch indicating if software reset is enabled
   906                          ; 0 = n, 1 = yes; can be used to reset BASIC by pressing
   907                          ; SHIFT-CODE-GRAPH; does not erase the existing program
   908                          ; (ini: 0)
   909                          ENSTOP:         EQU $FBB0
   910                          
   911                          ; FBB1: switch indicating if the current BASIC program is in a ROM
   912                          ; 0 = no; 1 = yes
   913                          BASROM:         EQU $FBB1
   914                          
   915                          ; FBB2-FBC9: table containing for each line if it continues on the
   916                          ; next line; 0 = yes, >0 = no
   917                          LINTTB:         EQU $FBB2
   918                          
   919                          ; FBCA-FBCB storage of location of cursor for INLIN and QINLIN
   920                          ;  FBCA: CSRY , FBCB: CSRX
   921                          FSTPOS:         EQU $FBCA
   922                          
   923                          ; ASCII code of the character currently covered by the cursor
   924                          ; TODO: is the name CURSAV or CO.dsAV ?
   925                          CURSAV:         EQU $FBCC
   926                          
   927                          ; FBCD: switch indicating which function keys are to be displayed
   928                          ; on the screen; 0 = F6-F10, 1 = F1-F5
   929                          FNKSWI:         EQU $FBCD
   930                          
   931                          ; FBCE-FBD7: for each function key, a flag indicating if it has
   932                          ; interrupt facility enabled; 0 = disabled, 1 = enabled
   933                          FNKFLG:         EQU $FBCE
   934                          
   935                          ; FBD8: counter of # of interrupts that still have a pending ON .. GOSUB
   936                          ONGSBF:         EQU $FBD8
   937                          
   938                          ; FBD9: flag indicating if a keyclick has already been generated, to avoid
   939                          ; keyclicks for a key that generates two ASCII codes
   940                          ; $00 = no click, $0F = click
   941                          CLIKFL:         EQU $FBD9
   942                          
   943                          ; FBDA-FBE4: storage of keyboard matrix, used for detection key repetition
   944                          OLDKEY:         EQU $FBDA
   945                          
   946                          ; FBE5-FBEF: current state of the keyboard matrix
   947                          NEWKEY:         EQU $FBE5
   948                          
   949                          ; keyboard buffer; each char entered via the keyboard en.ds up here
   950                          KEYBUF:         EQU $FBF0
   951                          ; LIMPNT: something about "key buffer pointer"
   952                          LIMPNT:         EQU $FC17                         ; L[obt@ÖÌ|C^
   953                          
   954                          ; FC18-FC3F: work area for processing the last typed line
   955                          LINWRK:         EQU $FC18                         ; 40ªÌobt@
   956                          
   957                          ; FC40-FC47: storage for the patter of an ASCII character
   958                          ; used when writing an ASCII character in a graphical mode
   959                          PATWRK:         EQU $FC40
   960                          
   961                          ; FC48-FC49: lowest address of the RAM memory; initialized at startup
   962                          ; and not changed normally
   963                          BOTTOM:         EQU $FC48
   964                          
   965                          ; FC4A-FC4B: highest address of the RAM memory that is not reserved by
   966                          ; the OS; string area, filebuffers and stack are below this address
   967                          ; initialized at startup and not changed normally
   968                          HIMEM:          EQU $FC4A
   969                          
   970                          ; FC4C-FC99: table for interrupt facilities of MSX BASIC
   971                          ; each 3 bytes are used like this:
   972                          ; byte 1 is a flag:
   973                          ;  bit 2: interrupt happened; 1 = yes
   974                          ;  bit 1: interrupt stop; 1 = yes
   975                          ;  bit 0: interrupt off; 1 = no
   976                          ; byte 2-3 is the adress of the line in BASIC where should be
   977                          ; jumped too
   978                          ; the offsets in the table are:
   979                          ;  offset  address interrupt
   980                          ;       0  FC4C    F1
   981                          ;       3  FC4F    F2
   982                          ;       6  FC52    F3
   983                          ;       9  FC55    F4
   984                          ;      12  FC58    F5
   985                          ;      15  FC5B    F6
   986                          ;      18  FC5E    F7
   987                          ;      21  FC61    F8
   988                          ;      24  FC64    F9
   989                          ;      27  FC67    F10
   990                          ;      30  FC6A    STOP
   991                          ;      33  FC6D    sprite collision
   992                          ;      36  FC70    SPACE (trigger 0)
   993                          ;      39  FC73    joystick 1 button 1 (trigger 1)
   994                          ;      39  FC76    joystick 2 button 1 (trigger 2)
   995                          ;      39  FC79    joystick 1 button 2 (trigger 3)
   996                          ;      39  FC7C    joystick 2 button 2 (trigger 4)
   997                          ;      39  FC7F    interval
   998                          TRPTBL:         EQU $FC4C
   999                          
  1000                          ; FC9A: usage unknown
  1001                          RTYCNT:         EQU $FC9A
  1002                          
  1003                          ; FC9B: STOP indication
  1004                          ; 0 = nothing; 3 = CTRL+STOP, 4 = STOP
  1005                          INTFLG:         EQU $FC9B
  1006                          
  1007                          ; FC9C: last read Y-position of a touchpad
  1008                          PADY:           EQU $FC9C
  1009                          
  1010                          ; FC9D: last read X-position of a touchpad
  1011                          PADX:           EQU $FC9D
  1012                          
  1013                          ; FC9E-FC9F: software clock, updated at each VDP interrupt
  1014                          JIFFY:          EQU $FC9E                         ; timer counter
  1015                          
  1016                          ; FCA0-FCA1: initial value of INTCNT, used when INTCNT
  1017                          ; reaches 0; used for ON INTERVAL GOSUB
  1018                          INTVAL:         EQU $FCA0
  1019                          
  1020                          ; FCA2-FCA3: interrupt counter; lowered at each VDP interrupt;
  1021                          ; reset with value of INTVAL when it reaches zero; if interval
  1022                          ; interrupt is needed, it is generated
  1023                          INTCNT:         EQU $FCA2
  1024                          
  1025                          ; FCA4-FCA5: parameter used at tap input, given a value during
  1026                          ; reading of a headerblock from tape
  1027                          LOWLIM:         EQU $FCA4
  1028                          WINWID:         EQU $FCA5
  1029                          
  1030                          ; FCA6: flag indicating if the previous character written
  1031                          ; to the screen was an extension character for graphical signs
  1032                          ; (ASCII 1); 0 = no, 1 = yes
  1033                          GRPHED:         EQU $FCA6
  1034                          
  1035                          ; FCA7 ESCCNT State of a state machine that handles the printing of escape
  1036                          ; sequences. A subset of the VT52 escape sequences is supported.
  1037                          ; values:
  1038                          ; $00: not inside an escape sequence
  1039                          ; $01: seen <ESC>x
  1040                          ; $02: seen <ESC>y
  1041                          ; $03: seen <ESC>Y<row>
  1042                          ; $04: seen <ESC>Y
  1043                          ; $FF: seen <ESC>
  1044                          ESCCNT:         EQU $FCA7
  1045                          
  1046                          ; FCA8: switch indicating insert or overwrite mode
  1047                          ; $00 = overwrite; $FF = insert
  1048                          ; the value of INSFLG is changed each time the INS key is pressed
  1049                          INSFLG:         EQU $FCA8
  1050                          
  1051                          ; FCA9: show cursor; 0 = no, 1 = yes
  1052                          ; can be changed with escape sequences x5 and y5
  1053                          CSRSW:          EQU $FCA9
  1054                          
  1055                          ; FCAA: shape of cursor; 0 = block; 1 = insert
  1056                          ; pressing the INS key changes the value of CSTYLE
  1057                          ; can be changed with escape sequences x4 and y4
  1058                          CSTYLE:         EQU $FCAA
  1059                          
  1060                          ; switch indicating if the CAPS-LOCK is on
  1061                          ; $00 = off, $FF = on (unofficial: $80 = perma-on)
  1062                          CAPST:          EQU $FCAB
  1063                          
  1064                          ; FCAC: dead key control in non-japanese MSX models
  1065                          ; ad.ds a mark on the next char pressed, if applicable
  1066                          ;  0 = no dead key
  1067                          ;  1 = dead key                => accent grave
  1068                          ;  2 = SHIFT + dead key        => accent aigu
  1069                          ;  3 = CODE + dead key         => accent circumflex
  1070                          ;  4 = SHIFT + CODE + dead key => trema
  1071                          ; in japanese models it controls the charset used
  1072                          KANAST:         EQU $FCAC
  1073                          
  1074                          ; FCAD: only used in japanese MSX models; it defines
  1075                          ; the used typeset (ini: $40)
  1076                          KANAMD:         EQU $FCAD
  1077                          
  1078                          ; ----
  1079                          ; misc
  1080                          ; ----
  1081                          
  1082                          FLBMEM:         EQU $FCAE
  1083                          SCRMOD:         EQU $FCAF
  1084                          OLDSCR:         EQU $FCB0
  1085                          CASPRV:         EQU $FCB1
  1086                          BRDATR:         EQU $FCB2
  1087                          GXPOS:          EQU $FCB3
  1088                          GYPOS:          EQU $FCB5
  1089                          GRPACX:         EQU $FCB7
  1090                          GRPACY:         EQU $FCB9
  1091                          DRWFLG:         EQU $FCBB
  1092                          DRWANG:         EQU $FCBD
  1093                          RUNBNF:         EQU $FCBE
  1094                          SAVENT:         EQU $FCBF
  1095                          
  1096                          ; ---------------------------
  1097                          ; storage of slot information
  1098                          ; ---------------------------
  1099                          
  1100                          ; FCC1-FCC4: Information for each primary slot. The most significant bit is
  1101                          ; set if the primary slot is found to be expanded.
  1102                          EXPTBL:         EQU $FCC1
  1103                          
  1104                          ; FCC5-FCC8: Duplicate the contents of the four possible secondary slot
  1105                          ; registers.
  1106                          SLTTBL:         EQU $FCC5
  1107                          
  1108                          ; FCC9-FD08: Information for any extension ROMs found during the power-up
  1109                          ; ROM search.
  1110                          ; FCC9-FCCC: primary slot 0, secondary slot 0
  1111                          ; FCCD-FCD0: primary slot 0, secondary slot 1
  1112                          ; FCD1-FCD4: primary slot 0, secondary slot 2
  1113                          ; FCD5-FCD8: primary slot 0, secondary slot 3
  1114                          ; FCD9-FCE8: primary slot 1
  1115                          ; FCE9-FCF8: primary slot 2
  1116                          ; FCF9-FD08: primary slot 3
  1117                          ; The information is stored as below.
  1118                          ; bit 7 (set): BASIC program
  1119                          ; bit 6 (set): device handler
  1120                          ; bit 5 (set): statement handler
  1121                          SLTATR:         EQU $FCC9
  1122                          
  1123                          SLTWRK:         EQU $FD09
  1124                          
  1125                          ; ------------------------------
  1126                          ; storage of ROM-page parameters
  1127                          ; ------------------------------
  1128                          
  1129                          PROCNM:         EQU $FD89
  1130                          DEVICE:         EQU $FD99
  1131                          ; ------------
  1132                          ; system hooks
  1133                          ; ------------
  1134                          
  1135                          ; system hooks are defined in hooks.asm
  1136                          
  1137                          ; ------------------
  1138                          ; storage of VDP8-23
  1139                          ; ------------------
  1140                          
  1141                          ; FFE7-FFF6: storage of VDP 8-23
  1142                          RG8SAV:         EQU $FFE7
  1143                          
  1144                          ; ----------------------
  1145                          ; extra slot information
  1146                          ; ----------------------
  1147                          
  1148                          ; FFF7: slot address of main-rom
  1149                          ;?????:         equ     $FFF7
  1150                          
  1151                          ; ------------------
  1152                          ; storage of VDP25-27
  1153                          ; ------------------
  1154                          
  1155                          ; FFFA-FFFC: storage of VDP 25-27
  1156                          RG25SAV:        EQU $FFFA
  1157                          
  1158                          ; ---------------------------
  1159                          ; subslot switching addresses
  1160                          ; ---------------------------
  1161                          
  1162                          ; FFFF: subslot switching address
  1163                          ; This is not actually a system variable, it is a har.dware register:
  1164                          ;   SSL_REGS (see har.dware.asm).
  1165                          
  1166                          ; -------
  1167                          ; the end
  1168                          ; -------
  1169                          
  1170                          ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
  1171                          
main.asm:
    52                                  INCLUDE "hooks.asm"
hooks.asm:
     1                          ; $Id: hooks.asm 525 2008-12-22 22:16:42Z mthuurne $
     2                          ; C-BIOS hook declarations
     3                          ;
     4                          ; Copyright (c) 2002-2003 BouKiCHi.  All rights reserved.
     5                          ; Copyright (c) 2003 Reikan.  All rights reserved.
     6                          ; Copyright (c) 2004 Maarten ter Huurne.  All rights reserved.
     7                          ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
     8                          ; Copyright (c) 2004-2006 Joost Yervante Damad.  All rights reserved.
     9                          ;
    10                          ; Redistribution and use in source and binary forms, with or without
    11                          ; modification, are permitted provided that the following conditions
    12                          ; are met:
    13                          ; 1. Redistributions of source code must retain the above copyright
    14                          ;    notice, this list of conditions and the following disclaimer.
    15                          ; 2. Redistributions in binary form must reproduce the above copyright
    16                          ;    notice, this list of conditions and the following disclaimer in the
    17                          ;    documentation and/or other materials provided with the distribution.
    18                          ;
    19                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    20                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    21                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    22                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    23                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSequENTIAL DAMAGES (INCLUDING, BUT
    24                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    25                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    26                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    27                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    28                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    29                          ;
    30                          
    31                          ; called at start of interrupt subroutine, before it has been checked if
    32                          ; the interrupt was from VDP; used by e.g. RS232
    33                          H_KEYI:         EQU $FD9A
    34                          
    35                          ; called at start of interrupt subroutine, when it is clear that
    36                          ; the interrupt is from the VDP
    37                          H_TIMI:         EQU $FD9F
    38                          
    39                          ; called at start of CHPUT(00A2)
    40                          H_CHPU:         EQU $FDA4
    41                          
    42                          ; called at start of the subroutine drawing the cursor
    43                          H_DSPC:         EQU $FDA9
    44                          
    45                          ; called at start of the subroutine that removes the cursor
    46                          H_ERAC:         EQU $FDAE
    47                          
    48                          ; called at start of DSPFNK(00CF)
    49                          H_DSPF:         EQU $FDB3
    50                          
    51                          ; called at start of ERAFNK(00CC)
    52                          H_ERAF:         EQU $FDB8
    53                          
    54                          ; called at start of TOTEXT(00D2)
    55                          H_TOTE:         EQU $FDBD
    56                          
    57                          ; called at start of CHGET(009F)
    58                          H_CHGE:         EQU $FDC2
    59                          
    60                          ; called at start of the subroutine that fills the pattern-table
    61                          ; can be used to override the default ASCII patterns
    62                          H_INIP:         EQU $FDC7
    63                          
    64                          ; called at part of subroutine that decodes combined keystrokes
    65                          ; like with CTRL/CODE/GRAPH/SHIFT to an ASCII code; can be used
    66                          ; to override the working of the keyboard
    67                          H_KEYC:         EQU $FDCC
    68                          
    69                          ; called at start of the subroutine that decodes single keystrokes;
    70                          ; can be used to override the working of the keyboard
    71                          H_KYEA:         EQU $FDD1
    72                          
    73                          ; called at start of NMI interrupt subroutine
    74                          H_NMI:          EQU $FDD6
    75                          
    76                          ; called at start of PINLIN(00AE)
    77                          H_PINL:         EQU $FDDB
    78                          
    79                          ; called at start of QINLIN(00B4)
    80                          H_QINL:         EQU $FDE0
    81                          
    82                          ; called at start of INLIN(00B1)
    83                          H_INLI:         EQU $FDE5
    84                          
    85                          ; BASIC interpreter hook
    86                          H_ONGO:         EQU $FDEA
    87                          
    88                          ; implementation hook for DSKO$
    89                          H_DSKO:         EQU $FDEF
    90                          
    91                          ; implementation hook for SET
    92                          H_SETS:         EQU $FDF4
    93                          
    94                          ; implementation hook for NAME
    95                          H_NAME:         EQU $FDF9
    96                          
    97                          ; implementation hook for KILL
    98                          H_KILL:         EQU $FDFE
    99                          
   100                          ; implementation hook for IPL
   101                          H_IPL:          EQU $FE03
   102                          
   103                          ; implementation hook for COPY
   104                          H_COPY:         EQU $FE08
   105                          
   106                          ; implementation hook for CMD
   107                          H_CMD:          EQU $FE0D
   108                          
   109                          ; implementation hook for DSKF
   110                          H_DSKF:         EQU $FE12
   111                          
   112                          ; implementation hook for DSKI$
   113                          H_DSKI:         EQU $FE17
   114                          
   115                          ; implementation hook for ATTR$
   116                          H_ATTR:         EQU $FE1C
   117                          
   118                          ; implementation hook for LSET
   119                          H_LSET:         EQU $FE21
   120                          
   121                          ; implementation hook for RSET
   122                          H_RSET:         EQU $FE26
   123                          
   124                          ; implementation hook for FIELD
   125                          H_FIEL:         EQU $FE2B
   126                          
   127                          ; implementation hook for MKI$
   128                          H_MKIS:         EQU $FE30
   129                          
   130                          ; implementation hook for MKS$
   131                          H_MKSS:         EQU $FE35
   132                          
   133                          ; implementation hook for MKD$
   134                          H_MKDS:         EQU $FE3A
   135                          
   136                          ; implementation hook for CVI
   137                          H_CVI:          EQU $FE3F
   138                          
   139                          ; implementation hook for CVS
   140                          H_CVS:          EQU $FE44
   141                          
   142                          ; implementation hook for CVD
   143                          H_CVD:          EQU $FE49
   144                          
   145                          ; called when looking up the value of PTRFIL(F864) for DISKBASIC
   146                          H_GETP:         EQU $FE4E
   147                          
   148                          ; called when PTRFIL(F864) is being given a new value
   149                          H_SETF:         EQU $FE53
   150                          
   151                          ; called when an OPEN statement was issued without a FOR-part
   152                          ; part of DISKBASIC
   153                          H_NOFO:         EQU $FE58
   154                          
   155                          ; called for an operation for file-buffer 0, in DISKBASIC
   156                          H_NULO:         EQU $FE5D
   157                          
   158                          ; called from DISKBASIC for a call with file-buffer not 0
   159                          H_NTFL:         EQU $FE62
   160                          
   161                          ; called when doing a MERGE command for disks
   162                          H_MERG:         EQU $FE67
   163                          
   164                          ; called when doing a SAVE commands for disks
   165                          H_SAVE:         EQU $FE6C
   166                          
   167                          ; called when doing a BSAVE command for disks
   168                          H_BINS:         EQU $FE71
   169                          
   170                          ; called when doing a BLOAD command for disks
   171                          H_BINL:         EQU $FE76
   172                          
   173                          ; implementation hook for FILES
   174                          H_FILE:         EQU $FE7B
   175                          
   176                          ;  DISKBASIC hook
   177                          H_DGET:         EQU $FE80
   178                          
   179                          ;  DISKBASIC hook
   180                          H_FILO:         EQU $FE85
   181                          
   182                          ;  DISKBASIC hook
   183                          H_INDS:         EQU $FE8A
   184                          
   185                          ; DISKBASIC entry for selecting the previous disk station for disk IO
   186                          H_RSLF:         EQU $FE8F
   187                          
   188                          ; DISKBASIC entry for remembering the current disk station
   189                          H_SAVD:         EQU $FE94
   190                          
   191                          ; implementation hook for LOC
   192                          H_LOC:          EQU $FE99
   193                          
   194                          ; implementation hook for LOF
   195                          G_LOF:          EQU $FE9E
   196                          
   197                          ; called when doing EOF for a disk in DISKBASIC
   198                          H_EOF:          EQU $FEA3
   199                          
   200                          ; implementation hook for FPOS
   201                          H_FPOS:         EQU $FEA8
   202                          
   203                          ; DISKBASIC hook
   204                          H_BAKU:         EQU $FEAD
   205                          
   206                          ; called when BASIC interpreter is decoding the device part of a filename
   207                          H_PARD:         EQU $FEB2
   208                          
   209                          ; called when BASIC interpreter finds a file without a device part
   210                          H_NODE:         EQU $FEB7
   211                          
   212                          ; DISKBASIC hook
   213                          H_POSD:         EQU $FEBC
   214                          
   215                          ; called when searching a device by name
   216                          H_DEVN:         EQU $FEC1
   217                          
   218                          ; BASIC interpreter hook
   219                          H_GEND:         EQU $FEC6
   220                          
   221                          ; Called when clearing variables during the preparation of a RUN statement.
   222                          ; Also used by the disk ROM to start boot sequence.
   223                          H_RUNC:         EQU $FECB
   224                          
   225                          ; called when doing CLEAR
   226                          H_CLEA:         EQU $FED0
   227                          
   228                          ; BASIC interpreter hook
   229                          H_LOPD:         EQU $FED5
   230                          
   231                          ; BASIC interpreter hook; called at stack error
   232                          H_STKE:         EQU $FEDA
   233                          
   234                          ; called at the start of ISFLIO(014A)
   235                          H_ISFL:         EQU $FEDF
   236                          
   237                          ; called at the start of OUTDO(0018)
   238                          H_OUTD:         EQU $FEE4
   239                          
   240                          ; BASIC interpreter hook
   241                          H_CRDO:         EQU $FEE9
   242                          
   243                          ; BASIC interpreter hook
   244                          H_DSKC:         EQU $FEEE
   245                          
   246                          ; called at the end of a BASIC program
   247                          H_PRGE:         EQU $FEF8
   248                          
   249                          ; BASIC interpreter hook
   250                          H_ERRP:         EQU $FEFD
   251                          
   252                          ; BASIC interpreter hook
   253                          H_ERRF:         EQU $FF02
   254                          
   255                          ; BASIC interpreter hook
   256                          H_READ:         EQU $FF07
   257                          
   258                          ; BASIC interpreter hook
   259                          H_MAIN:         EQU $FF0C
   260                          
   261                          ; called when executing a BASIC statement in direct mode
   262                          H_DIRD:         EQU $FF11
   263                          
   264                          ; BASIC interpreter hook
   265                          H_FINI:         EQU $FF16
   266                          
   267                          ; BASIC interpreter hook
   268                          H_FINE:         EQU $FF1B
   269                          
   270                          ; called while encoding a just typed BASIC statement
   271                          H_CRUN:         EQU $FF20
   272                          
   273                          ; called while encoding a just typed BASIC statement
   274                          H_CRUS:         EQU $FF25
   275                          
   276                          ; called when a keyword has been found while encoding a just typed
   277                          ; BASIC statement
   278                          H_ISRE:         EQU $FF2A
   279                          
   280                          ; called when a function has been found while encoding a just typed
   281                          ; BASIC statement
   282                          H_NTFN:         EQU $FF2F
   283                          
   284                          ; called when a non-keyword has been found while encoding a just
   285                          ; typed BASIC statement
   286                          H_NOTR:         EQU $FF34
   287                          
   288                          ; BASIC interpreter hook
   289                          H_SNGF:         EQU $FF39
   290                          
   291                          ; BASIC interpreter hook
   292                          H_NEWS:         EQU $FF3E
   293                          
   294                          ; BASIC interpreter hook
   295                          H_GONE:         EQU $FF43
   296                          
   297                          ; called at start of CHRGTR(0010)
   298                          H_CHRG:         EQU $FF48
   299                          
   300                          ; BASIC interpreter hook
   301                          H_RETU:         EQU $FF4D
   302                          
   303                          ; BASIC interpreter hook
   304                          H_PRTF:         EQU $FF52
   305                          
   306                          ; BASIC interpreter hook
   307                          H_COMP:         EQU $FF57
   308                          
   309                          ; BASIC interpreter hook
   310                          H_FINP:         EQU $FF5C
   311                          
   312                          ; BASIC interpreter hook
   313                          H_TRMN:         EQU $FF61
   314                          
   315                          ; BASIC interpreter hook
   316                          H_FRME:         EQU $FF66
   317                          
   318                          ; BASIC interpreter hook
   319                          H_NTPL:         EQU $FF6B
   320                          
   321                          ; called when calculating the value of an expression in BASIC
   322                          H_EVAL:         EQU $FF70
   323                          
   324                          ; BASIC interpreter hook
   325                          H_OKNO:         EQU $FF75
   326                          
   327                          ; BASIC interpreter hook
   328                          H_FING:         EQU $FF7A
   329                          
   330                          ; called when setting a value to a substring with MID$
   331                          H_ISMI:         EQU $FF7F
   332                          
   333                          ; called when executing the WIDTH statement
   334                          H_WIDT:         EQU $FF84
   335                          
   336                          ; called when executing the LIST statement
   337                          H_LIST:         EQU $FF89
   338                          
   339                          ; BASIC interpreter hook
   340                          H_BUFL:         EQU $FF8E
   341                          
   342                          ; BASIC interpreter hook
   343                          H_FRQI:         EQU $FF93
   344                          
   345                          ; BASIC interpreter hook
   346                          H_SCNE:         EQU $FF98
   347                          
   348                          ; BASIC interpreter hook
   349                          H_FRET:         EQU $FF9D
   350                          
   351                          ; called when looking up a variable in BASIC
   352                          H_PTRG:         EQU $FFA2
   353                          
   354                          ; called from within PHYDIO(0144), to allow its implementation
   355                          H_PHYD:         EQU $FFA7
   356                          
   357                          ; called from within FORMAT(147), to allow its implementation
   358                          H_FORM:         EQU $FFAC
   359                          
   360                          ; called form the error-handling routine of the BASIC interpreter
   361                          H_ERRO:         EQU $FFB1
   362                          
   363                          ; called at start of LPTOUT(00A5)
   364                          H_LPTO:         EQU $FFB6
   365                          
   366                          ; called at start of LPTSTT(00A8)
   367                          H_LPTS:         EQU $FFBB
   368                          
   369                          ; called when executing SCREEN
   370                          H_SCRE:         EQU $FFC0
   371                          
   372                          ; called when executing PLAY
   373                          H_PLAY:         EQU $FFC5
   374                          
   375                          ; allows for installation of expansion devices that contain extra OS subroutines
   376                          H_BEXT:         EQU $FFCA
   377                          
   378                          
   379                          ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
   380                          
main.asm:
    53                          
    54                          ;-----------------
    55                          ; A memory address for debug
    56                          ;-----------------
    57                          
    58                          COMPILE_FONT    EQU 1
    59                          
    60                          ;---------------------
    61                          ; Jump table
    62                          ;---------------------
    63                          
    64                          ; $0000 CHKRAM
    65                                  ORG     $0000
    66  0000  f3                        DI
    67  0001  c3120d                    JP      chkram
    68                          
    69                          ; Pointer to font
    70                          ; $0004 CGTABL  Base address of the MSX character set in ROM
    71                                  DS      $0004 - $
    72  0004  bf1b                      DW      B_Font
    73                          
    74                                  DS      $0006 - $
    75                          
    76                          ; $0006 VDP.DR  Base port address for VDP data read
    77                          vdp_dr:
    78  0006  a0                        DB      VDP_DATA                          ; VDP read port
    79                          ; $0007 VDP.WR  Base port address for VDP data write
    80                          vdp_dw:
    81  0007  a0                        DB      VDP_DATA                          ; VDP write port
    82                          
    83                          ; $0008 SYNCHR
    84                                  DS      $0008 - $
    85  0008  c3140f                    JP      synchr
    86                          
    87                          ; $000C RDSLT   Read memory from an optional slot
    88  000b  00                        DS      $000C - $
    89  000c  c3bf23                    JP      rdslt
    90                          
    91                          ; $0010 CHRGTR
    92  000f  00                        DS      $0010 - $
    93  0010  c3230f                    JP      chrgtr
    94                          
    95                          ; $0014 WRSLT   Write memory to an optional slot
    96  0013  00                        DS      $0014 - $
    97  0014  c30424                    JP      wrslt
    98                          
    99                          ; $0018 OUTDO
   100  0017  00                        DS      $0018 - $
   101  0018  c33f0f                    JP      outdo
   102                          
   103                          ; $001C CALSLT   inter slot call routine
   104  001b  00                        DS      $001C - $
   105  001c  c30524                    JP      calslt
   106                          
   107                          ; $0020 DCOMPR  Compare HL to DE
   108  001f  00                        DS      $0020 - $
   109  0020  c3450f                    JP      dcompr
   110                          
   111                          ; $0024 ENASLT  Change slot
   112  0023  00                        DS      $0024 - $
   113  0024  c30624                    JP      enaslt
   114                          
   115                          ; $0028 GETYPR
   116  0027  00                        DS      $0028 - $
   117  0028  c34b0f                    JP      getypr
   118                          
   119                          ; $002B IDBYT1
   120                                  DS      $002B - $
   121                          iDByt1:
   122                          ; Basic ROM version
   123                          ; 7 6 5 4 3 2 1 0
   124                          ; | | | | +-+-+-+-- Character set
   125                          ; | | | |           0 = Japanese, 1 = International (ASCII), 2=Korean
   126                          ; | +-+-+---------- Date format
   127                          ; |                 0 = Y-M-D, 1 = M-D-Y, 2 = D-M-Y
   128                          ; +---------------- Default interrupt fr.equency
   129                          ;                   0 = 60Hz, 1 = 50Hz
   130  002b  11                        DB      LOCALE_CHSET + LOCALE_DATE + LOCALE_INT
   131                          ; $002C IDBYT2
   132                          iDByt2:
   133                          ; Basic ROM version
   134                          ; 7 6 5 4 3 2 1 0
   135                          ; | | | | +-+-+-+-- Keyboard type
   136                          ; | | | |           0 = Japanese, 1 = International (QWERTY)
   137                          ; | | | |           2 = French (AZERTY), 3 = UK, 4 = German (DIN)
   138                          ; +-+-+-+---------- Basic version
   139                          ;                   0 = Japanese, 1 = International
   140  002c  02                        DB      LOCALE_KBD + LOCALE_BASIC
   141                          
   142                          ; $002D Version ID
   143                          romid:
   144                                  DS      $002D - $
   145                          ; version ID
   146                          ; MSX version number
   147                          ;  0 = MSX 1
   148                          ;  1 = MSX 2
   149                          ;  2 = MSX 2+
   150                          ;  3 = MSX turbo R
   151  002d  00                        DB      0
   152  002e  00                        DB      0
   153                          
   154                          
   155                          ; Reserved
   156  002f  00                        DB      0
   157                          
   158                          ; $0030 CALLF    Call interslot routine(RST30h version)
   159                                  DS      $0030 - $
   160  0030  c35a0f                    JP      callf
   161                          
   162                          ; $0038 KEYINT   Interrupt routines(RST38,VBlank,Timer...)
   163  0033  0000000000                DS      $0038 - $
   164  0038  c33817                    JP      keyint
   165                          
   166                          ; $003B INITIO  Initialize I/O
   167                                  DS      $003B - $
   168  003b  c36f0f                    JP      initio
   169                          
   170                          ; $003E INIFNK
   171                                  DS      $003E - $
   172  003e  c3790f                    JP      inifnk
   173                          
   174                          ; $0041 DISSCR  Disable screen display
   175                                  DS      $0041 - $
   176  0041  c31602                    JP      disscr
   177                          
   178                          ; $0044 ENASCR  Enable screen display
   179                                  DS      $0044 - $
   180  0044  c32202                    JP      enascr
   181                          
   182                          ;---------------
   183                          ;VDP routines
   184                          ;---------------
   185                          
   186                          ; $0047 WRTVDP
   187                                  DS      $0047 - $
   188  0047  c32e02                    JP      wrtvdp
   189                          
   190                          ; $004A RDVRM
   191                                  DS      $004A - $
   192  004a  c34502                    JP      rdvrm
   193                          
   194                          ; $004D WRTVRM
   195                                  DS      $004D - $
   196  004d  c34b02                    JP      wrtvrm
   197                          
   198                          ; $0050 SETRD
   199                                  DS      $0050 - $
   200  0050  c35302                    JP      setrd
   201                          
   202                          ; $0053 SETWRT  Set VRAM Write Address
   203                                  DS      $0053 - $
   204  0053  c35e02                    JP      setwrt
   205                          
   206                          ; $0056 FILVRM  Fill VRAM
   207                                  DS      $0056 - $
   208  0056  c36b02                    JP      filvrm
   209                          
   210                          ; $0059 LDIRMV  Copy VRAM to RAM
   211                                  DS      $0059 - $
   212  0059  c38002                    JP      ldirmv
   213                          
   214                          ; $005C LDIRVM  Copy RAM to VRAM
   215                                  DS      $005C - $
   216  005c  c39702                    JP      ldirvm
   217                          
   218                          ; $005F CHGMOD Change VDP screen mode
   219                                  DS      $005F - $
   220  005f  c3af02                    JP      chgmod
   221                          
   222                          ; $0062 CHGCLR
   223                                  DS      $0062 - $
   224  0062  c3d602                    JP      chgclr
   225                          
   226                          ; $0066 NMI     Non-maskable interrupt
   227  0065  00                        DS      $0066 - $
   228  0066  c38b17                    JP      nmi
   229                          
   230                          ; $0069 CLRSPR  Clear sprites
   231                                  DS      $0069 - $
   232  0069  c32003                    JP      clrspr
   233                          
   234                          ; $006C INITXT  Initialize display to mode TEXT1    (SCREEN 0)
   235                                  DS      $006C - $
   236  006c  c37f03                    JP      initxt
   237                          
   238                          ; $006F INIT32  Initialize display to mode GRAPHIC1 (SCREEN 1)
   239                                  DS      $006F - $
   240  006f  c3bf03                    JP      init32
   241                          
   242                          ; $0072 INITGRP Initialize display to mode GRAPHIC2 (SCREEN 2)
   243                                  DS      $0072 - $
   244  0072  c30204                    JP      inigrp
   245                          
   246                          ; $0075 INIMLT  Initialize display to mode MULTI    (SCREEN 3)
   247                                  DS      $0075 - $
   248  0075  c34004                    JP      inimlt
   249                          
   250                          ; $0078 SETTXT
   251                                  DS      $0078 - $
   252  0078  c38c04                    JP      settxt
   253                          
   254                          ; $007B SETT32
   255                                  DS      $007B - $
   256  007b  c3b404                    JP      sett32
   257                          
   258                          ; $007E SETGRP
   259                                  DS      $007E - $
   260  007e  c3e304                    JP      setgrp
   261                          
   262                          ; $0081 SETMLT
   263                                  DS      $0081 - $
   264  0081  c31605                    JP      setmlt
   265                          
   266                          ; $0084 CALPAT
   267                                  DS      $0084 - $
   268  0084  c36c05                    JP      calpat
   269                          
   270                          ; $0087 CALATR
   271                                  DS      $0087 - $
   272  0087  c37f05                    JP      calatr
   273                          
   274                          ; $008A GSPSIZ
   275                                  DS      $008A - $
   276  008a  c38905                    JP      gspsiz
   277                          
   278                          ; $008D GRPPRT
   279                                  DS      $008D - $
   280  008d  c39405                    JP      grpprt
   281                          
   282                          ; $0090 GICINI  initialize sound IC
   283                                  DS      $0090 - $
   284  0090  c36115                    JP      gicini
   285                          ; $0093 WRTPSG
   286                                  DS      $0093 - $
   287  0093  c37915                    JP      wrtpsg
   288                          ; $0096 RDPSG
   289                                  DS      $0096 - $
   290  0096  c38315                    JP      rdpsg
   291                          
   292                          ; $0099 STRTMS
   293                                  DS      $0099 - $
   294  0099  c3880f                    JP      strtms
   295                          
   296                          ; $009C CHSNS  .. check key buffer
   297                                  DS      $009C - $
   298  009c  c3970f                    JP      chsns
   299                          
   300                          ; $009F CHGET .. Get data from keyboard buffer
   301                                  DS      $009F - $
   302  009f  c3aa0f                    JP      chget
   303                          
   304                          ; $00A2 CHPUT .. Output charactor to display
   305                                  DS      $00A2 - $
   306  00a2  c3cf0f                    JP      chput
   307                          
   308                          ; $00A5 LPTOUT
   309                                  DS      $00A5 - $
   310  00a5  c3f412                    JP      lptout
   311                          
   312                          ; $00A8 LPTSTT
   313                                  DS      $00A8 - $
   314  00a8  c31e13                    JP      lptstt
   315                          
   316                          ; $00AB CNVCHR
   317                                  DS      $00AB - $
   318  00ab  c32c13                    JP      cnvchr
   319                          
   320                          ; $00AE PINLIN
   321                                  DS      $00AE - $
   322  00ae  c35113                    JP      pinlin
   323                          
   324                          ; $00B1 INLIN
   325                                  DS      $00B1 - $
   326  00b1  c36f13                    JP      inlin
   327                          
   328                          ; $00B4 QINLIN
   329                                  DS      $00B4 - $
   330  00b4  c36613                    JP      qinlin
   331                          
   332                          ; $00B7 BREAKX
   333                                  DS      $00B7 - $
   334  00b7  c37914                    JP      breakx
   335                          
   336                          ; $00BA ISCNTC
   337                                  DS      $00BA - $
   338  00ba  c38914                    JP      iscntc
   339                          
   340                          ; $00BD CKCNTC
   341                                  DS      $00BD - $
   342  00bd  c39814                    JP      ckcntc
   343                          
   344                          ; $00C0 BEEP
   345                                  DS      $00C0 - $
   346  00c0  c39b14                    JP      beep
   347                          
   348                          ; $00C3 CLS
   349                                  DS      $00C3 - $
   350  00c3  c3ab07                    JP      cls_z
   351                          
   352                          ; $00C6 POSIT
   353                                  DS      $00C6 - $
   354  00c6  c3a814                    JP      posit
   355                          
   356                          ; $00C9 FNKSB
   357                                  DS      $00C9 - $
   358  00c9  c3ac14                    JP      fnksb
   359                          
   360                          ; $00CC ERAFNK
   361                                  DS      $00CC - $
   362  00cc  c3ba14                    JP      erafnk
   363                          
   364                          ; $00CF DSPFNK
   365                                  DS      $00CF - $
   366  00cf  c3c914                    JP      dspfnk
   367                          
   368                          ; $00D2 TOTEXT
   369                                  DS      $00D2 - $
   370  00d2  c3d814                    JP      totext
   371                          
   372                          ; $00D5 GTSTCK .. Get joystick infomation
   373                                  DS      $00D5 - $
   374  00d5  c3aa15                    JP      gtstck
   375                          
   376                          ; $00D8 GTTRIG .. Get trigger infomation
   377                                  DS      $00D8 - $
   378  00d8  c35f16                    JP      gttrig
   379                          
   380                          ; $00db GTPAD
   381                                  DS      $00db - $
   382  00db  c3ad16                    JP      gtpad
   383                          
   384                          ; $00DE GTPDL
   385                                  DS      $00DE - $
   386  00de  c3bc16                    JP      gtpdl
   387                          
   388                          ; $00E1 TAPION
   389                                  DS      $00E1 - $
   390  00e1  c3eb14                    JP      tapion
   391                          
   392                          ; $00E4 TAPIN
   393                                  DS      $00E4 - $
   394  00e4  c3fb14                    JP      tapin
   395                          
   396                          ; $00E7 TAPIOF
   397                                  DS      $00E7 - $
   398  00e7  c30a15                    JP      tapiof
   399                          
   400                          ; $00EA TAPOON
   401                                  DS      $00EA - $
   402  00ea  c31915                    JP      tapoon
   403                          
   404                          ; $00ED TAPOUT
   405                                  DS      $00ED - $
   406  00ed  c32915                    JP      tapout
   407                          
   408                          ; $00F0 TAPOOF
   409                                  DS      $00F0 - $
   410  00f0  c33915                    JP      tapoof
   411                          
   412                          ; $00F3 STMOTR
   413                                  DS      $00F3 - $
   414  00f3  c34815                    JP      stmotr
   415                          
   416                          ; $00F6 LFTQ
   417                                  DS      $00F6 - $
   418  00f6  c3ca16                    JP      lftq
   419                          
   420                          ; $00F9 PUTQ
   421                                  DS      $00F9 - $
   422  00f9  c3d916                    JP      putq
   423                          
   424                          ; $00FC RIGHTC
   425                                  DS      $00FC - $
   426  00fc  c33a08                    JP      rightc
   427                          
   428                          ; $00FF LEFTC
   429                                  DS      $00FF - $
   430  00ff  c34908                    JP      leftc
   431                          
   432                          ; $0102 UPC
   433                                  DS      $0102 - $
   434  0102  c35708                    JP      upc
   435                          
   436                          ; $0105 TUPC
   437                                  DS      $0105 - $
   438  0105  c36308                    JP      tupc
   439                          
   440                          ; $0108 DOWNC
   441                                  DS      $0108 - $
   442  0108  c37008                    JP      downc
   443                          
   444                          ; $010B TDOWNC
   445                                  DS      $010B - $
   446  010b  c37e08                    JP      tdownc
   447                          
   448                          ; $010E SCALXY
   449                                  DS      $010E - $
   450  010e  c38d08                    JP      scalxy
   451                          
   452                          ; $0111 MAPXY
   453                                  DS      $0111 - $
   454  0111  c39d08                    JP      mapxy
   455                          
   456                          ; $0114 FETCHC
   457                                  DS      $0114 - $
   458  0114  c3d808                    JP      fetchc
   459                          
   460                          ; $0117 STOREC
   461                                  DS      $0117 - $
   462  0117  c3e608                    JP      storec
   463                          
   464                          ; $011A SETATR
   465                                  DS      $011A - $
   466  011a  c3f508                    JP      setatr
   467                          
   468                          ; $011D READC
   469                                  DS      $011D - $
   470  011d  c30409                    JP      readc
   471                          
   472                          ; $0120 SETC
   473                                  DS      $0120 - $
   474  0120  c31209                    JP      setc
   475                          
   476                          ; $0123 NSETCX
   477                                  DS      $0123 - $
   478  0123  c31f09                    JP      nsetcx
   479                          
   480                          ; $0126 GTASPC
   481                                  DS      $0126 - $
   482  0126  c32e09                    JP      gtaspc
   483                          
   484                          ; $0129 PNTINI
   485                                  DS      $0129 - $
   486  0129  c33d09                    JP      pntini
   487                          
   488                          ; $012C SCANR
   489                                  DS      $012C - $
   490  012c  c34c09                    JP      scanr
   491                          
   492                          ; $012F SCANL
   493                                  DS      $012F - $
   494  012f  c35a09                    JP      scanl
   495                          
   496                          ; $0132 CHGCAP
   497                                  DS      $0132 - $
   498  0132  c30717                    JP      chgcap
   499                          
   500                          ; $0135 CHGSND
   501                                  DS      $0135 - $
   502  0135  c38815                    JP      chgsnd
   503                          
   504                          ; $0138 RSLREG  Read infomation of primary slot
   505                                  DS      $0138 - $
   506  0138  c39115                    JP      rslreg
   507                          
   508                          ; $013B WSLREG  Write infomation to primary slot
   509                                  DS      $013B - $
   510  013b  c39415                    JP      wslreg
   511                          
   512                          ; $013E RDVDP   Read VDP status
   513                                  DS      $013E - $
   514  013e  c39715                    JP      rdvdp
   515                          
   516                          ; $0141 SNSMAT  Get key matrix
   517                                  DS      $0141 - $
   518  0141  c39a15                    JP      snsmat
   519                          
   520                          ; $0144 PHYDIO
   521                                  DS      $0144 - $
   522  0144  c39d15                    JP      phydio
   523                          
   524                          ; $0147 FORMAT
   525                                  DS      $0147 - $
   526  0147  c3a115                    JP      format
   527                          
   528                          ; $014A ISFLIO
   529                                  DS      $014A - $
   530  014a  c3a515                    JP      isflio
   531                          
   532                          ; $014D OUTDLP
   533                                  DS      $014D - $
   534  014d  c30817                    JP      outdlp
   535                          
   536                          ; $0150 GETVCP
   537                                  DS      $0150 - $
   538  0150  c31717                    JP      getvcp
   539                          
   540                          ; $0153 GETVC2
   541                                  DS      $0153 - $
   542  0153  c31b17                    JP      getvc2
   543                          
   544                          ; $0156 KILBUF  Clear keyboard buffer
   545                                  DS      $0156 - $
   546  0156  c33117                    JP      kilbuf
   547                          
   548                          ; $0159 CALBAS  Call BASIC interpreter
   549                                  DS      $0159 - $
   550  0159  c3da17                    JP      calbas
   551                          
   552                          
   553                          ; fake EXTROM call, fixes Nemesis 3 reset bug
   554  015c  000000                    DS      $015f - $
   555  015f  c9                        RET
   556                          
   557  0160  0000000000000000          DS      $0200 - $
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
   558                          
   559                                  INCLUDE "util.asm"
util.asm:
     1                          ; $Id: util.asm 525 2008-12-22 22:16:42Z mthuurne $
     2                          ; C-BIOS utility routines
     3                          ;
     4                          ; Copyright (c) 2004 Maarten ter Huurne.  All rights reserved.
     5                          ;
     6                          ; Redistribution and use in source and binary forms, with or without
     7                          ; modification, are permitted provided that the following conditions
     8                          ; are met:
     9                          ; 1. Redistributions of source code must retain the above copyright
    10                          ;    notice, this list of conditions and the following disclaimer.
    11                          ; 2. Redistributions in binary form must reproduce the above copyright
    12                          ;    notice, this list of conditions and the following disclaimer in the
    13                          ;    documentation and/or other materials provided with the distribution.
    14                          ;
    15                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    16                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    17                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    18                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    19                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    20                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    21                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    22                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    23                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    24                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    25                          ;
    26                          
    27                          ;----------------------------------
    28                          ; Generic routine that implements a jump table.
    29                          ; Input:   HL = address of jump table
    30                          ;          A  = index in table
    31                          ; Changes: F, HL, BC (these are changed *before* jumping)
    32                          jump_table:
    33  0200  4f                        LD      c,a
    34  0201  0600                      LD      b,0
    35  0203  09                        ADD     hl,bc
    36  0204  09                        ADD     hl,bc
    37  0205  c31102                    JP      table_jump
    38                          
    39                          ;----------------------------------
    40                          ; Generic routine that implements a search & jump table
    41                          ; Entries in the table consist of (character, jump address) pairs.
    42                          ; If the entry is not found, the routine will just RETurn.
    43                          ;
    44                          ; Input:   HL = address of search table
    45                          ;          A  = item to search for
    46                          ;          B  = number of entries in the table
    47                          ; Changes: F, BC, HL
    48                          search_table:
    49  0208  be                        CP      (hl)
    50  0209  23                        INC     hl
    51  020a  2805                      JR      z,table_jump
    52  020c  23                        INC     hl
    53  020d  23                        INC     hl
    54  020e  10f8                      DJNZ    search_table
    55  0210  c9                        RET
    56                          table_jump:
    57  0211  4e                        LD      c,(hl)
    58  0212  23                        INC     hl
    59  0213  66                        LD      h,(hl)
    60  0214  69                        LD      l,c
    61  0215  e9                        JP      (hl)
    62                          
    63                          ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
    64                          
main.asm:
   560                                  INCLUDE "video.asm"
video.asm:
     1                          ; $Id: video.asm 563 2009-12-20 20:26:40Z bifimsx $
     2                          ; C-BIOS video routines
     3                          ;
     4                          ; Copyright (c) 2002-2005 BouKiCHi.  All rights reserved.
     5                          ; Copyright (c) 2003 Reikan.  All rights reserved.
     6                          ; Copyright (c) 2004-2006 Maarten ter Huurne.  All rights reserved.
     7                          ; Copyright (c) 2004-2005 Albert Beevendorp.  All rights reserved.
     8                          ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
     9                          ; Copyright (c) 2004 Joost Yervante Damad.  All rights reserved.
    10                          ; Copyright (c) 2004-2005 Jussi Pitkänen.  All rights reserved.
    11                          ;
    12                          ; Redistribution and use in source and binary forms, with or without
    13                          ; modification, are permitted provided that the following conditions
    14                          ; are met:
    15                          ; 1. Redistributions of source code must retain the above copyright
    16                          ;    notice, this list of conditions and the following disclaimer.
    17                          ; 2. Redistributions in binary form must reproduce the above copyright
    18                          ;    notice, this list of conditions and the following disclaimer in the
    19                          ;    documentation and/or other materials provided with the distribution.
    20                          ;
    21                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    22                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    23                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    24                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    25                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    26                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    27                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    28                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    29                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    30                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    31                          ;
    32                          
    33                          ;--------------------------------
    34                          ; $0041 DISSCR
    35                          ; Function : inhibits the screen display
    36                          ; Registers: AF, BC
    37                          disscr:
    38  0216  3ae0f3                    LD      a,(RG1SAV)
    39  0219  e6bf                      AND     $BF
    40  021b  47                        LD      b,a
    41  021c  0e01                      LD      c,1
    42  021e  cd2e02                    CALL    wrtvdp
    43  0221  c9                        RET
    44                          
    45                          ;--------------------------------
    46                          ; $0044 ENASCR
    47                          ; Function : displays the screen
    48                          ; Registers: AF, BC
    49                          enascr:
    50  0222  3ae0f3                    LD      a,(RG1SAV)
    51  0225  f640                      OR      $40
    52  0227  47                        LD      b,a
    53  0228  0e01                      LD      c,1
    54  022a  cd2e02                    CALL    wrtvdp
    55  022d  c9                        RET
    56                          
    57                          ;--------------------------------
    58                          ; 0047$ WRTVDP
    59                          ; Function : write data in the VDP-register
    60                          ; Input    : B  - data to write
    61                          ;            C  - number of the register
    62                          ; Output   : RG0SAV(F3DF)-RG7SAV(F3E6)
    63                          ; Registers: AF, BC
    64                          wrtvdp:
    65  022e  f3                        DI
    66  022f  cbb9                      RES     7,c                               ; fixes High Way Star
    67  0231  78                        LD      a,b
    68  0232  d3a1                      OUT     (VDP_ADDR),a
    69  0234  79                        LD      a,c
    70  0235  f680                      OR      $80
    71  0237  d3a1                      OUT     (VDP_ADDR),a
    72  0239  fb                        EI
    73                          
    74  023a  e5                        PUSH    hl
    75  023b  21dff3                    LD      hl,RG0SAV
    76                          wrtvdp_sav:
    77  023e  78                        LD      a,b
    78  023f  0600                      LD      b,0
    79  0241  09                        ADD     hl,bc
    80  0242  77                        LD      (hl),a
    81                          wrtvdp_nosav:
    82  0243  e1                        POP     hl
    83  0244  c9                        RET
    84                          
    85                          ;--------------------------------
    86                          ; $004A RDVRM
    87                          ; Function : Reads the content of VRAM
    88                          ; Input    : HL - address read
    89                          ; Output   : A  - value which was read
    90                          ; Registers: AF
    91                          rdvrm:
    92  0245  cd5302                    CALL    setrd
    93  0248  dba0                      IN      a,(VDP_DATA)
    94  024a  c9                        RET
    95                          
    96                          
    97                          ;--------------------------------
    98                          ; $004D WRTVRM
    99                          ; Function : Writes data in VRAM
   100                          ; Input    : HL - address write
   101                          ;            A  - value write
   102                          ; Registers: AF
   103                          wrtvrm:
   104  024b  f5                        PUSH    af
   105  024c  cd5e02                    CALL    setwrt
   106  024f  f1                        POP     af
   107  0250  d3a0                      OUT     (VDP_DATA),a
   108  0252  c9                        RET
   109                          
   110                          ;--------------------------------
   111                          ; $0050 SETRD
   112                          ; Function : Enable VDP to read
   113                          ; Input    : HL - for VRAM-address
   114                          ; Registers: AF
   115                          setrd:
   116  0253  f3                        DI
   117                          
   118  0254  7d                        LD      a,l
   119  0255  d3a1                      OUT     (VDP_ADDR),a
   120  0257  7c                        LD      a,h
   121  0258  e63f                      AND     $3F
   122  025a  d3a1                      OUT     (VDP_ADDR),a
   123  025c  fb                        EI
   124  025d  c9                        RET
   125                          
   126                          ;--------------------------------
   127                          ; $0053 SETWRT
   128                          ; Function : Enable VDP to write
   129                          ; Input    : HL - Address
   130                          ; Registers: AF
   131                          setwrt:
   132  025e  f3                        DI
   133                          
   134  025f  7d                        LD      a,l
   135  0260  d3a1                      OUT     (VDP_ADDR),a
   136  0262  7c                        LD      a,h
   137  0263  e63f                      AND     $3F
   138  0265  f640                      OR      $40
   139  0267  d3a1                      OUT     (VDP_ADDR),a
   140  0269  fb                        EI
   141  026a  c9                        RET
   142                          
   143                          ;--------------------------------
   144                          ; $0056 FILVRM
   145                          ; Function : fill VRAM with value
   146                          ; Input    : A  - data byte
   147                          ;            BC - length of the area to be written
   148                          ;            HL - start address:
   149                          ;                 * SCREEN 0..4 -> 14-bit address
   150                          ;                 * SCREEN 5+ -> 17-bit address (uses ACPAGE)
   151                          ;                 Using 14-bit address for SCREEN4 doesn't really make sense,
   152                          ;                 but that's what we have to follow to be compatible.
   153                          ; Registers: AF, BC
   154                          filvrm:
   155  026b  f5                        PUSH    af
   156  026c  cd5e02                    CALL    setwrt
   157  026f  0b                        DEC     bc
   158  0270  0c                        INC     c
   159  0271  78                        LD      a,b
   160  0272  41                        LD      b,c
   161  0273  4f                        LD      c,a
   162  0274  0c                        INC     c
   163  0275  f1                        POP     af
   164                          ; Note: Interrupts should be enabled here.
   165                          ;       Penguin Adventure can hang on boot if the interrupt
   166                          ;       comes just after our RET, which is certain if the
   167                          ;       memory block written is large enough.
   168                          filvrm_lp:
   169  0276  d3a0                      OUT     (VDP_DATA),a
   170  0278  00                        NOP                                       ;
   171  0279  00                        NOP                                       ;
   172  027a  10fa                      DJNZ    filvrm_lp
   173  027c  0d                        DEC     c
   174  027d  20f7                      JR      nz,filvrm_lp
   175  027f  c9                        RET
   176                          
   177                          ;--------------------------------
   178                          ; $0059 LDIRMV
   179                          ; Function : Block transfer from VRAM to memory
   180                          ; Input    : BC - blocklength
   181                          ;            DE - Start address of memory
   182                          ;            HL - Start address of VRAM
   183                          ; Registers: AF BC DE
   184                          ; Note     : the function doesn't destroy HL
   185                          ; Note     : the routine doesn't change IM
   186                          ldirmv:
   187  0280  cd5302                    CALL    setrd
   188  0283  e5                        PUSH    hl
   189                          
   190                          ldirmv_lp:
   191  0284  dba0                      IN      A,(VDP_DATA)
   192  0286  00                        NOP
   193  0287  00                        NOP
   194  0288  12                        LD      (DE),A
   195  0289  13                        INC     DE
   196  028a  0b                        DEC     BC
   197  028b  78                        LD      A,B
   198  028c  fe00                      CP      0
   199  028e  20f4                      JR      nz,ldirmv_lp
   200  0290  79                        LD      A,C
   201  0291  fe00                      CP      0
   202  0293  20ef                      JR      nz,ldirmv_lp
   203  0295  e1                        POP     hl
   204  0296  c9                        RET
   205                          
   206                          ;--------------------------------
   207                          ; $005C LDIRVM
   208                          ; Function : Block transfer from memory to VRAM
   209                          ; Input    : BC - blocklength
   210                          ;            DE - Start address of VRAM
   211                          ;            HL - Start address of memory
   212                          ; Note     : the routine doesn't change IM
   213                          ; Registers: All
   214                          ldirvm:
   215  0297  eb                        EX      de,hl
   216  0298  cd5e02                    CALL    setwrt
   217  029b  eb                        EX      de,hl
   218                          ldirvm_lp:
   219  029c  7e                        LD      A,(HL)
   220  029d  d3a0                      OUT     (VDP_DATA),A
   221  029f  00                        NOP
   222  02a0  00                        NOP
   223  02a1  23                        INC     HL
   224  02a2  0b                        DEC     BC
   225  02a3  78                        LD      A,B
   226  02a4  fe00                      CP      0
   227  02a6  20f4                      JR      nz,ldirvm_lp
   228  02a8  79                        LD      A,C
   229  02a9  fe00                      CP      0
   230  02ab  20ef                      JR      nz,ldirvm_lp
   231                          ; Note: Without this, Quinpl shows glitches.
   232                          ; TODO: Investigate why.
   233  02ad  eb                        EX      de,hl
   234  02ae  c9                        RET
   235                          
   236                          ;----------------------------------
   237                          ; $005F CHGMOD  Changes screen mode
   238                          ; Function : Switches to given screenmode
   239                          ; Input    : A  - screen mode
   240                          ; Registers: All
   241                          chgmod:
   242  02af  fe04                      CP      4
   243  02b1  d0                        RET     nc
   244                          ; Redirect to initialisation routine.
   245  02b2  21b802                    LD      hl,chgmod_tbl
   246  02b5  c30002                    JP      jump_table
   247                          chgmod_tbl:
   248  02b8  7f03                      DW      initxt                            ; SCREEN0
   249  02ba  bf03                      DW      init32                            ; SCREEN1
   250  02bc  0204                      DW      inigrp                            ; SCREEN2
   251  02be  4004                      DW      inimlt                            ; SCREEN3
   252                          ; TODO: Now that we rewrite most regs at the end of CHGMOD,
   253                          ;       the ini* routines can just update RG?SAV instead of calling wrtvdp.
   254                          chgmod_finish:
   255                          ; Generic state resets.
   256                          ; Write new values from system RAM to the VDP.
   257  02c0  f3                        DI
   258                          ; Write R#0 - R#7.
   259  02c1  21dff3                    LD      hl,RG0SAV
   260  02c4  01a108                    LD      bc,8 * $100 + VDP_ADDR
   261  02c7  1680                      LD      d,$80
   262                          chgmod_finish_lp:
   263  02c9  eda3                      OUTI
   264  02cb  78                        LD      a,b
   265  02cc  ed51                      OUT     (c),d
   266  02ce  14                        INC     d
   267  02cf  b7                        OR      a
   268  02d0  20f7                      JR      nz,chgmod_finish_lp
   269                          
   270  02d2  fb                        EI
   271  02d3  c32202                    JP      enascr
   272                          
   273                          ;--------------------------------
   274                          ; $0062 CHGCLR
   275                          ; Function : Changes the screencolors
   276                          ; Input    : Foregroundcolor in FORCLR
   277                          ;            Backgroundcolor in BAKCLR
   278                          ;            Bordercolor in BDRCLR
   279                          ; Registers: All
   280                          chgclr:
   281  02d6  3aaffc                    LD      a,(SCRMOD)
   282  02d9  fe08                      CP      8
   283  02db  283a                      JR      z,chgclr_sc8
   284  02dd  3d                        DEC     a
   285  02de  f5                        PUSH    af
   286  02df  3ae9f3                    LD      a,(FORCLR)
   287  02e2  07                        RLCA
   288  02e3  07                        RLCA
   289  02e4  07                        RLCA
   290  02e5  07                        RLCA
   291  02e6  e6f0                      AND     $F0
   292  02e8  6f                        LD      l,a
   293  02e9  3aebf3                    LD      a,(BDRCLR)
   294  02ec  b5                        OR      l
   295                          
   296  02ed  47                        LD      b,a
   297  02ee  0e07                      LD      c,7
   298  02f0  cd2e02                    CALL    wrtvdp
   299  02f3  f1                        POP     af
   300  02f4  c0                        RET     nz
   301                          
   302                          ; SCREEN1
   303  02f5  3ae9f3                    LD      a,(FORCLR)
   304  02f8  07                        RLCA
   305  02f9  07                        RLCA
   306  02fa  07                        RLCA
   307  02fb  07                        RLCA
   308  02fc  e6f0                      AND     $F0
   309  02fe  21eaf3                    LD      hl,BAKCLR
   310  0301  b6                        OR      (hl)
   311  0302  2abff3                    LD      hl,(T32COL)
   312  0305  012000                    LD      bc,$0020
   313  0308  f5                        PUSH    af
   314  0309  cd5e02                    CALL    setwrt
   315                          cclr_lp:
   316  030c  f1                        POP     af
   317  030d  d3a0                      OUT     (VDP_DATA),a
   318  030f  f5                        PUSH    af
   319  0310  0b                        DEC     bc
   320  0311  78                        LD      a,b
   321  0312  b1                        OR      c
   322  0313  20f7                      JR      nz,cclr_lp
   323  0315  f1                        POP     af
   324  0316  c9                        RET
   325                          
   326                          chgclr_sc8:
   327                          ; SCREEN8
   328  0317  3aebf3                    LD      a,(BDRCLR)
   329  031a  47                        LD      b,a
   330  031b  0e07                      LD      c,7
   331  031d  c32e02                    JP      wrtvdp
   332                          
   333                          ;--------------------------------
   334                          ; $0069 CLRSPR
   335                          ; Function : Initialises all sprites
   336                          ; Input    : SCRMOD
   337                          ; Registers: All
   338                          clrspr:
   339                          ; Check screen mode.
   340  0320  3aaffc                    LD      a,(SCRMOD)
   341  0323  b7                        OR      a
   342  0324  c8                        RET     z                                 ; no sprites in SCREEN0
   343                          
   344                          ; Clear sprite attribute table.
   345  0325  cd4a03                    CALL    clrspr_attr
   346                          
   347                          ; Clear sprite colour table.
   348  0328  3aaffc                    LD      a,(SCRMOD)
   349  032b  fe04                      CP      4                                 ; sprite mode 1?
   350  032d  3810                      JR      c,clrspr_col_skip
   351  032f  2a28f9                    LD      hl,(ATRBAS)
   352  0332  25                        DEC     h
   353  0333  25                        DEC     h                                 ; HL = (ATRBAS) - $200
   354  0334  010002                    LD      bc,32 * 16
   355  0337  3ae9f3                    LD      a,(FORCLR)
   356  033a  e60f                      AND     $0F
   357  033c  cdcd06                    CALL    bigfil
   358                          clrspr_col_skip:
   359                          
   360                          ; Clear sprite pattern generator table.
   361  033f  2a26f9                    LD      hl,(PATBAS)
   362  0342  010008                    LD      bc,256 * 8
   363  0345  af                        XOR     a
   364  0346  cd6b02                    CALL    filvrm
   365  0349  c9                        RET
   366                          
   367                          ;--------------------------------
   368                          ; Clear sprite attribute table.
   369                          clrspr_attr:
   370  034a  3aaffc                    LD      a,(SCRMOD)
   371  034d  fe04                      CP      4
   372  034f  3804                      JR      c,clrspr_attr_spritemode1
   373                          
   374                          ; Note: This label is called directly by external routines.
   375                          clrspr_attr_spritemode2:
   376  0351  1ed9                      LD      e,217                             ; Y coordinate
   377  0353  1802                      JR      clrspr_attr_spritemode_start
   378                          
   379                          ; Note: This label is called directly by external routines.
   380                          clrspr_attr_spritemode1:
   381  0355  1ed1                      LD      e,209                             ; Y coordinate
   382                          
   383                          clrspr_attr_spritemode_start:
   384  0357  2a28f9                    LD      hl,(ATRBAS)
   385  035a  cd5e02                    CALL    setwrt
   386  035d  3ae9f3                    LD      a,(FORCLR)
   387  0360  57                        LD      d,a
   388  0361  010020                    LD      bc,$2000                          ; B = 32 = counter, C = pattern index
   389  0364  f3                        DI
   390                          clrspr_attr_lp:
   391  0365  7b                        LD      a,e
   392  0366  d3a0                      OUT     (VDP_DATA),a                      ; Y coordinate
   393  0368  3e00                      LD      a,0
   394  036a  d3a0                      OUT     (VDP_DATA),a                      ; X coordinate
   395  036c  79                        LD      a,c
   396  036d  d3a0                      OUT     (VDP_DATA),a                      ; pattern number
   397  036f  0c                        INC     c
   398  0370  cd8905                    CALL    gspsiz
   399  0373  3003                      JR      nc,clrspr_attr_8
   400  0375  0c                        INC     c
   401  0376  0c                        INC     c
   402  0377  0c                        INC     c
   403                          clrspr_attr_8:
   404  0378  7a                        LD      a,d
   405  0379  d3a0                      OUT     (VDP_DATA),a                      ; color
   406  037b  10e8                      DJNZ    clrspr_attr_lp
   407  037d  fb                        EI
   408  037e  c9                        RET
   409                          
   410                          ;--------------------------------
   411                          ; $006C INITXT
   412                          ; Function : Switch to SCREEN 0
   413                          ; Input    : TXTNAM, TXTCGP
   414                          ; Output   : NAMBAS, CGPBAS, LINLEN, SCRMOD, OLDSCR
   415                          ; Registers: All
   416                          initxt:
   417                          ; Disable video output.
   418  037f  cd1602                    CALL    disscr
   419                          
   420                          ; New screen mode.
   421  0382  3e00                      LD      a,$00
   422  0384  32affc                    LD      (SCRMOD),a
   423  0387  32b0fc                    LD      (OLDSCR),a
   424                          
   425                          
   426                          ; Line length.
   427  038a  3aaef3                    LD      a,(LINL40)
   428  038d  32b0f3                    LD      (LINLEN),a
   429                          
   430                          ; Cursor position: top-left.
   431  0390  3e01                      LD      a,1
   432  0392  32dcf3                    LD      (CSRY),a
   433  0395  32ddf3                    LD      (CSRX),a
   434                          
   435                          ; Table base addresses.
   436  0398  2ab3f3                    LD      hl,(TXTNAM)                       ; name table
   437  039b  2222f9                    LD      (NAMBAS),hl
   438  039e  2ab7f3                    LD      hl,(TXTCGP)                       ; pattern table
   439  03a1  2224f9                    LD      (CGPBAS),hl
   440  03a4  2ab9f3                    LD      hl,(TXTATR)                       ; sprite attribute table (unused)
   441  03a7  2228f9                    LD      (ATRBAS),hl
   442  03aa  2abbf3                    LD      hl,(TXTPAT)                       ; sprite pattern table (unused)
   443  03ad  2226f9                    LD      (PATBAS),hl
   444                          
   445                          ; Update VDP regs and VRAM.
   446  03b0  cdd602                    CALL    chgclr
   447  03b3  cd8c04                    CALL    settxt
   448                                  IF      COMPILE_FONT != NO
   449  03b6  cd9e07                        CALL    init_font
   450                                  ENDIF
   451  03b9  cdc307                    CALL    cls_screen0
   452  03bc  c3c002                    JP      chgmod_finish
   453                          
   454                          ;--------------------------------
   455                          ; $006F INIT32
   456                          ; Function : Switches to SCREEN 1 (text screen with 32*24 characters)
   457                          ; Input    : T32NAM, T32CGP, T32COL, T32ATR, T32PAT
   458                          ; Output   : NAMBAS, CGPBAS, LINLEN, SCRMOD, OLDSCR
   459                          ; Registers: All
   460                          init32:
   461                          ; Disable video output.
   462  03bf  cd1602                    CALL    disscr
   463                          
   464  03c2  3e01                      LD      a,$01                             ; SCREEN1
   465  03c4  32affc                    LD      (SCRMOD),a
   466  03c7  32b0fc                    LD      (OLDSCR),a
   467                          
   468  03ca  3e01                      LD      a,1
   469  03cc  32dcf3                    LD      (CSRY),a
   470  03cf  32ddf3                    LD      (CSRX),a
   471                          
   472  03d2  cdd602                    CALL    chgclr
   473                          
   474  03d5  2abdf3                    LD      hl,(T32NAM)
   475  03d8  2222f9                    LD      (NAMBAS),hl
   476  03db  2ac1f3                    LD      hl,(T32CGP)
   477  03de  2224f9                    LD      (CGPBAS),hl
   478  03e1  2ac5f3                    LD      hl,(T32PAT)
   479  03e4  2226f9                    LD      (PATBAS),hl
   480  03e7  2ac3f3                    LD      hl,(T32ATR)
   481  03ea  2228f9                    LD      (ATRBAS),hl
   482                          
   483                                  IF      COMPILE_FONT != NO
   484  03ed  cd9e07                        CALL    init_font
   485                                  ENDIF
   486                          
   487  03f0  3aaff3                    LD      a,(LINL32)
   488  03f3  32b0f3                    LD      (LINLEN),a
   489                          
   490  03f6  cdb404                    CALL    sett32
   491  03f9  cd5503                    CALL    clrspr_attr_spritemode1
   492  03fc  cdd207                    CALL    cls_screen1
   493  03ff  c3c002                    JP      chgmod_finish
   494                          
   495                          ;--------------------------------
   496                          ; $0072 INIGRP
   497                          ; Function : Switches to SCREEN 2 (high resolution screen with 256*192 pixels)
   498                          ; Input    : GRPNAM, GRPCGP, GRPCOL, GRPATR, GRPPAT
   499                          ; Output   : NAMBAS-ATRBAS, SCRMOD
   500                          ; Registers: All
   501                          inigrp:
   502                          ; Disable video output.
   503  0402  cd1602                    CALL    disscr
   504                          
   505  0405  3e02                      LD      a,$02
   506  0407  32affc                    LD      (SCRMOD),a
   507                          
   508  040a  cdd602                    CALL    chgclr
   509                          
   510  040d  2ac7f3                    LD      hl,(GRPNAM)
   511  0410  2222f9                    LD      (NAMBAS),hl
   512  0413  cd5e02                    CALL    setwrt
   513  0416  0603                      LD      b,3
   514  0418  af                        XOR     a
   515  0419  f3                        DI
   516                          inigrp_lp:
   517  041a  d3a0                      OUT     (VDP_DATA),a
   518  041c  3c                        INC     a
   519  041d  20fb                      JR      nz,inigrp_lp
   520  041f  10f9                      DJNZ    inigrp_lp
   521  0421  fb                        EI
   522                          
   523  0422  2acbf3                    LD      hl,(GRPCGP)
   524  0425  2224f9                    LD      (CGPBAS),hl
   525                          
   526  0428  2acdf3                    LD      hl,(GRPATR)
   527  042b  2228f9                    LD      (ATRBAS),hl
   528                          
   529  042e  2acff3                    LD      hl,(GRPPAT)
   530  0431  2226f9                    LD      (PATBAS),hl
   531                          
   532  0434  cde304                    CALL    setgrp
   533  0437  cd5503                    CALL    clrspr_attr_spritemode1
   534  043a  cdee07                    CALL    cls_screen2
   535  043d  c3c002                    JP      chgmod_finish
   536                          
   537                          ;------------------------------
   538                          ; $0075 INIMLT
   539                          ; Function : Switches to SCREEN 3 (multi-color screen 64*48 pixels)
   540                          ; Input    : MLTNAM, MLTCGP, MLTCOL, MLTATR, MLTPAT
   541                          ; Output   : NAMBAS-ATRBAS, SCRMOD
   542                          ; Registers: All
   543                          inimlt:
   544                          ; Disable video output.
   545  0440  cd1602                    CALL    disscr
   546                          
   547  0443  3e03                      LD      a,$03
   548  0445  32affc                    LD      (SCRMOD),a
   549                          
   550  0448  cdd602                    CALL    chgclr
   551                          
   552  044b  2ad1f3                    LD      hl,(MLTNAM)
   553  044e  2222f9                    LD      (NAMBAS),hl
   554  0451  cd5e02                    CALL    setwrt
   555  0454  af                        XOR     a
   556  0455  0e06                      LD      c,6
   557  0457  f3                        DI
   558                          inimlt_loop1:
   559  0458  f5                        PUSH    af
   560  0459  1e04                      LD      e,4
   561                          inimlt_loop2:
   562  045b  f5                        PUSH    af
   563  045c  0620                      LD      b,32
   564                          inimlt_loop3:
   565  045e  d3a0                      OUT     (VDP_DATA),a
   566  0460  3c                        INC     a
   567  0461  10fb                      DJNZ    inimlt_loop3
   568  0463  f1                        POP     af
   569  0464  1d                        DEC     e
   570  0465  20f4                      JR      nz,inimlt_loop2
   571  0467  f1                        POP     af
   572  0468  c620                      ADD     a,32
   573  046a  0d                        DEC     c
   574  046b  20eb                      JR      nz,inimlt_loop1
   575  046d  fb                        EI
   576                          
   577  046e  2ad5f3                    LD      hl,(MLTCGP)
   578  0471  2224f9                    LD      (CGPBAS),hl
   579  0474  2ad7f3                    LD      hl,(MLTATR)
   580  0477  2228f9                    LD      (ATRBAS),hl
   581  047a  2ad9f3                    LD      hl,(MLTPAT)
   582  047d  2226f9                    LD      (PATBAS),hl
   583                          
   584  0480  cd1605                    CALL    setmlt
   585  0483  cd5503                    CALL    clrspr_attr_spritemode1
   586  0486  cd0408                    CALL    cls_screen3
   587  0489  c3c002                    JP      chgmod_finish
   588                          
   589                          
   590                          ;------------------------------
   591                          ; $0078 SETTXT
   592                          ; Function : Switches to VDP in SCREEN 0 mode
   593                          ; Input    : TXTNAM, TXTCGP
   594                          ; Registers: All
   595                          settxt:
   596                          
   597  048c  3adff3                    LD      a,(RG0SAV)
   598  048f  e6f1                      AND     $F1                               ; MASK 11110001
   599  0491  47                        LD      b,a
   600  0492  0e00                      LD      c,0
   601  0494  cd2e02                    CALL    wrtvdp                            ; write VDP R#0
   602                          
   603  0497  3ae0f3                    LD      a,(RG1SAV)
   604  049a  e6e7                      AND     $E7                               ; MASK 11100111
   605  049c  f610                      OR      $10
   606  049e  47                        LD      b,a
   607  049f  0c                        INC     c
   608  04a0  cd2e02                    CALL    wrtvdp                            ; write VDP R#1
   609                          
   610                          ; Set the VDP base address registers. This works because
   611                          ; TXTNAM, TXTCOL and TXTCGP are in same order as the VDP
   612                          ; base address registers.
   613  04a3  11b3f3                    LD      de,TXTNAM
   614  04a6  0e02                      LD      c,2
   615                          
   616  04a8  af                        XOR     a
   617  04a9  cd4705                    CALL    set_base_address
   618  04ac  13                        INC     de                                ; Skip TXTCOL.
   619  04ad  13                        INC     de
   620  04ae  0c                        INC     c
   621  04af  af                        XOR     a
   622  04b0  cd4705                    CALL    set_base_address
   623                          
   624  04b3  c9                        RET
   625                          
   626                          
   627                          ;------------------------------
   628                          ; $007B SETT32
   629                          ; Function : Switches VDP to SCREEN 1 mode
   630                          ; Input    : T32NAM, T32COL, T32CGP, T32ATR, T32PAT
   631                          ; Registers: All
   632                          sett32:
   633  04b4  3adff3                    LD      a,(RG0SAV)
   634  04b7  e6f1                      AND     $F1                               ; MASK 11110001
   635  04b9  47                        LD      b,a
   636  04ba  0e00                      LD      c,0
   637  04bc  cd2e02                    CALL    wrtvdp                            ; write VDP R#0
   638                          
   639  04bf  3ae0f3                    LD      a,(RG1SAV)
   640  04c2  e6e7                      AND     $E7                               ; MASK 11100111
   641  04c4  47                        LD      b,a
   642  04c5  0c                        INC     c
   643  04c6  cd2e02                    CALL    wrtvdp                            ; write VDP R#1
   644                          
   645                          ; Set the base address registers. This works because T32NAM,
   646                          ; T32COL, T32CGP, T32ATR and T32PAT are in same order as the
   647                          ; VDP base address registers.
   648  04c9  11bdf3                    LD      de,T32NAM
   649  04cc  0e02                      LD      c,2
   650                          
   651  04ce  af                        XOR     a
   652  04cf  cd4705                    CALL    set_base_address
   653  04d2  af                        XOR     a
   654  04d3  cd4705                    CALL    set_base_address
   655  04d6  af                        XOR     a
   656  04d7  cd4705                    CALL    set_base_address
   657  04da  af                        XOR     a
   658  04db  cd4705                    CALL    set_base_address
   659  04de  af                        XOR     a
   660  04df  cd4705                    CALL    set_base_address
   661                          
   662  04e2  c9                        RET
   663                          
   664                          ;------------------------------
   665                          ; $007E SETGRP
   666                          ; Function : Switches VDP to SCREEN 2 mode
   667                          ; Input:     GRPNAM, GRPCOL, GRPCGP, GRPATR, GRPPAT
   668                          ; Registers: All
   669                          setgrp:
   670  04e3  3adff3                    LD      a,(RG0SAV)
   671  04e6  e6f1                      AND     $F1                               ; MASK 11110001
   672  04e8  f602                      OR      $02                               ; M3 = 1
   673  04ea  47                        LD      b,a
   674  04eb  0e00                      LD      c,0
   675  04ed  cd2e02                    CALL    wrtvdp                            ; write VDP R#0
   676                          
   677  04f0  3ae0f3                    LD      a,(RG1SAV)
   678  04f3  e6e7                      AND     $E7                               ; MASK 11100111
   679  04f5  47                        LD      b,a
   680  04f6  0c                        INC     c
   681  04f7  cd2e02                    CALL    wrtvdp                            ; write VDP R#1
   682                          
   683                          ; Set the base address registers. This works because GRPNAM,
   684                          ; GRPCOL, GRPCGP, GRPATR and GRPPAT are in same order as the
   685                          ; VDP base address registers.
   686  04fa  11c7f3                    LD      de,GRPNAM
   687  04fd  0e02                      LD      c,2
   688                          
   689  04ff  af                        XOR     a
   690  0500  cd4705                    CALL    set_base_address
   691  0503  3e7f                      LD      a,$7F
   692  0505  cd4705                    CALL    set_base_address
   693  0508  3e03                      LD      a,$03
   694  050a  cd4705                    CALL    set_base_address
   695  050d  af                        XOR     a
   696  050e  cd4705                    CALL    set_base_address
   697  0511  af                        XOR     a
   698  0512  cd4705                    CALL    set_base_address
   699                          
   700  0515  c9                        RET
   701                          
   702                          ;------------------------------
   703                          ; $0081 SETMLT
   704                          ; Function : Switches VDP to SCREEN 3 mode
   705                          ; Input    : MLTNAM, MLTCGP, MLTCOL, MLTATR, MLTPAT
   706                          ; Registers: All
   707                          setmlt:
   708  0516  3adff3                    LD      a,(RG0SAV)
   709  0519  e6f1                      AND     $F1
   710  051b  47                        LD      b,a
   711  051c  0e00                      LD      c,0
   712  051e  cd2e02                    CALL    wrtvdp
   713                          
   714  0521  3ae0f3                    LD      a,(RG1SAV)
   715  0524  e6e7                      AND     $E7
   716  0526  f608                      OR      $08                               ; M2 = 1
   717  0528  47                        LD      b,a
   718  0529  0c                        INC     c
   719  052a  cd2e02                    CALL    wrtvdp
   720                          
   721                          ; Set the base address registers. This works because MLTNAM,
   722                          ; MLTCOL, MLTCGP, MLTATR and MLTPAT are in same order as the
   723                          ; VDP base address registers.
   724  052d  11d1f3                    LD      de,MLTNAM
   725  0530  0e02                      LD      c,2
   726                          
   727  0532  af                        XOR     a
   728  0533  cd4705                    CALL    set_base_address
   729  0536  af                        XOR     a
   730  0537  cd4705                    CALL    set_base_address                  ; TODO: Should we ignore MLTCOL?
   731  053a  af                        XOR     a
   732  053b  cd4705                    CALL    set_base_address
   733  053e  af                        XOR     a
   734  053f  cd4705                    CALL    set_base_address
   735  0542  af                        XOR     a
   736  0543  cd4705                    CALL    set_base_address
   737                          
   738  0546  c9                        RET
   739                          
   740                          ;------------------------------
   741                          ; Get an address from a base address table, convert it into a register value,
   742                          ; and set the corresponding VDP base address register.
   743                          ; Input:     DE = pointer to a base address table
   744                          ;             C = VDP base address register
   745                          ;             A = OR-mask over the converted address
   746                          ; Output:    DE = DE + 2
   747                          ;             C =  C + 1
   748                          ; Changes:   AF, B, HL
   749                          set_base_address:
   750  0547  d5                        PUSH    de
   751  0548  f5                        PUSH    af
   752                          
   753                          ; Get the shift value.
   754  0549  216505                    LD      hl,set_base_address_table
   755  054c  0600                      LD      b,0
   756  054e  09                        ADD     hl,bc
   757  054f  46                        LD      b,(hl)
   758                          
   759                          ; Get the address from (HL) to HL.
   760  0550  eb                        EX      de,hl
   761  0551  7e                        LD      a,(hl)
   762  0552  23                        INC     hl
   763  0553  66                        LD      h,(hl)
   764  0554  6f                        LD      l,a
   765                          
   766                          ; Shift it to left in register A. After this A contains the
   767                          ; converted address.
   768                          set_base_address_loop:
   769  0555  29                        ADD     hl,hl
   770  0556  8f                        ADC     a,a
   771  0557  10fc                      DJNZ    set_base_address_loop
   772  0559  47                        LD      b,a
   773                          
   774                          ; Set the base address register.
   775  055a  f1                        POP     af
   776  055b  b0                        OR      b
   777  055c  47                        LD      b,a
   778  055d  cd2e02                    CALL    wrtvdp
   779                          
   780                          ; Increase pointer and register number.
   781  0560  d1                        POP     de
   782  0561  13                        INC     de
   783  0562  13                        INC     de
   784  0563  0c                        INC     c
   785                          
   786  0564  c9                        RET
   787                          
   788                          set_base_address_table:
   789  0565  0000060a050905            DB      $00,$00,$06,$0A,$05,$09,$05
   790                          
   791                          ;------------------------------
   792                          ; $0084 CALPAT
   793                          ; Returns the address of a sprite pattern in the sprite pattern table.
   794                          ; Input:     A  = pattern number
   795                          ; Output:    HL = address
   796                          ; Changes:   AF, DE, HL
   797                          calpat:
   798  056c  2600                      LD      h,0
   799  056e  6f                        LD      l,a
   800  056f  29                        ADD     hl,hl
   801  0570  29                        ADD     hl,hl
   802  0571  29                        ADD     hl,hl
   803  0572  cd8905                    CALL    gspsiz
   804  0575  3002                      JR      nc,calpat_8
   805  0577  29                        ADD     hl,hl
   806  0578  29                        ADD     hl,hl
   807                          calpat_8:
   808  0579  ed5b26f9                  LD      de,(PATBAS)
   809  057d  19                        ADD     hl,de
   810  057e  c9                        RET
   811                          
   812                          ;------------------------------
   813                          ; $0087 CALATR
   814                          ; Returns the address of a sprite in the sprite attribute table.
   815                          ; Input:     A  = sprite number
   816                          ; Output:    HL = address
   817                          ; Changes:   AF, DE, HL
   818                          calatr:
   819  057f  87                        ADD     a,a
   820  0580  87                        ADD     a,a
   821  0581  2a28f9                    LD      hl,(ATRBAS)
   822  0584  1600                      LD      d,0
   823  0586  5f                        LD      e,a
   824  0587  19                        ADD     hl,de
   825  0588  c9                        RET
   826                          
   827                          ;------------------------------
   828                          ; $008A GSPSIZ
   829                          ; Returns the current sprite-size in bytes.
   830                          ; Output:    A  = sprite-size in bytes
   831                          ;            CF = set when size is 16x16, otherwise reset
   832                          ; Changes:   AF
   833                          gspsiz:
   834  0589  3ae0f3                    LD      a,(RG1SAV)
   835  058c  0f                        RRCA
   836  058d  0f                        RRCA
   837  058e  3e08                      LD      a,8
   838  0590  d0                        RET     nc
   839  0591  3e20                      LD      a,32
   840  0593  c9                        RET
   841                          
   842                          ;------------------------------
   843                          ; $008D GRPPRT
   844                          ; Function:  Places a character on graphic screen
   845                          ; Input:     A  - Character
   846                          ;            GRPACX , GRPACY : X, Y coordinate
   847                          ;            FORCLR
   848                          ; Input (SCREEN 5 and above) :
   849                          ;            LOGOPR for logical operator
   850                          ; NOTE : the function doesn't support without SCREEN 2
   851                          ;        and also slower yet.
   852                          ; Register : AF ???
   853                          grpprt:
   854  0594  f5                        PUSH    af
   855                          
   856                          ; Printable character or control character?
   857  0595  fe20                      CP      $20
   858  0597  380d                      JR      c,grpprt_control
   859                          
   860                          ; Different implementation depending on screen mode.
   861  0599  3aaffc                    LD      a,(SCRMOD)
   862  059c  fe02                      CP      2
   863  059e  2822                      JR      z,grpprt_sc2
   864  05a0  fe05                      CP      5
   865  05a2  301c                      JR      nc,grpprt_sc5                     ; SCRMOD >= 5
   866                          grpprt_end:
   867  05a4  f1                        POP     af
   868  05a5  c9                        RET
   869                          
   870                          grpprt_control:
   871                          ; Ignore everything except carriage return ($0D).
   872  05a6  fe0d                      CP      $0D
   873  05a8  20fa                      JR      nz,grpprt_end
   874                          
   875  05aa  f1                        POP     af
   876                          ; Handle carriage return.
   877  05ab  e5                        PUSH    hl
   878  05ac  c5                        PUSH    bc
   879  05ad  2ab9fc                    LD      hl,(GRPACY)
   880  05b0  010800                    LD      bc,$0008
   881  05b3  09                        ADD     hl,bc
   882  05b4  22b9fc                    LD      (GRPACY),hl
   883  05b7  210000                    LD      hl,$0000
   884  05ba  22b7fc                    LD      (GRPACX),hl
   885  05bd  c1                        POP     bc
   886  05be  e1                        POP     hl
   887  05bf  c9                        RET
   888                          
   889                          grpprt_sc5:
   890  05c0  f1                        POP     af
   891                          
   892                          ; TODO: should these routines be merged?
   893                          
   894  05c1  c9                        RET
   895                          
   896                          grpprt_sc2:
   897  05c2  f1                        POP     af
   898  05c3  e5                        PUSH    hl
   899  05c4  d5                        PUSH    de
   900  05c5  c5                        PUSH    bc
   901  05c6  f5                        PUSH    af
   902                          
   903  05c7  cd1808                    CALL    getpat
   904                          
   905  05ca  ed5bb9fc                  LD      de,(GRPACY)
   906  05ce  ed4bb7fc                  LD      bc,(GRPACX)
   907  05d2  cd9d08                    CALL    mapxy
   908                          
   909  05d5  3ae9f3                    LD      a,(FORCLR)
   910  05d8  32f2f3                    LD      (ATRBYT),a
   911                          
   912  05db  2a2af9                    LD      hl,(CLOC)
   913  05de  ed4bcbf3                  LD      bc,(GRPCGP)
   914  05e2  09                        ADD     hl,bc
   915                          
   916                          
   917  05e3  1140fc                    LD      de,PATWRK
   918  05e6  3ab9fc                    LD      a,(GRPACY)
   919  05e9  e607                      AND     $07
   920                          
   921  05eb  0600                      LD      b,$00
   922  05ed  4f                        LD      c,a
   923  05ee  09                        ADD     hl,bc
   924  05ef  cd0f06                    CALL    grpprt_chr_x
   925                          
   926  05f2  01f000                    LD      bc,$00F0
   927  05f5  09                        ADD     hl,bc
   928  05f6  3ab9fc                    LD      a,(GRPACY)
   929  05f9  2f                        CPL
   930  05fa  e607                      AND     $07
   931  05fc  4f                        LD      c,a
   932                          
   933  05fd  cd0f06                    CALL    grpprt_chr_x
   934                          
   935  0600  2ab7fc                    LD      hl,(GRPACX)
   936  0603  010800                    LD      bc,$0008
   937  0606  09                        ADD     hl,bc
   938  0607  22b7fc                    LD      (GRPACX),hl
   939                          
   940  060a  f1                        POP     af
   941  060b  c1                        POP     bc
   942  060c  d1                        POP     de
   943  060d  e1                        POP     hl
   944                          
   945  060e  c9                        RET
   946                          
   947                          grpprt_chr_x:
   948  060f  3ab7fc                    LD      a,(GRPACX)
   949  0612  e607                      AND     $07
   950  0614  f5                        PUSH    af
   951  0615  c5                        PUSH    bc
   952  0616  d5                        PUSH    de
   953  0617  e5                        PUSH    hl
   954  0618  cd9806                    CALL    grpprt_chr                        ; half left
   955  061b  3ab7fc                    LD      a,(GRPACX)
   956  061e  e607                      AND     $07
   957  0620  281a                      JR      z,grpprt_skip_hr
   958  0622  3a2cf9                    LD      a,(CMASK)
   959  0625  2f                        CPL
   960  0626  322cf9                    LD      (CMASK),a
   961  0629  e1                        POP     hl
   962  062a  010800                    LD      bc,$0008
   963  062d  09                        ADD     hl,bc
   964  062e  d1                        POP     de
   965  062f  c1                        POP     bc
   966  0630  f1                        POP     af
   967                          
   968  0631  cd9806                    CALL    grpprt_chr                        ; half right
   969  0634  3a2cf9                    LD      a,(CMASK)
   970  0637  2f                        CPL
   971  0638  322cf9                    LD      (CMASK),a
   972  063b  c9                        RET
   973                          grpprt_skip_hr:
   974  063c  c1                        POP     bc                                ; HL = the result of last grpprt_chr
   975  063d  010800                    LD      bc,$0008
   976  0640  09                        ADD     hl,bc
   977  0641  c1                        POP     bc                                ; DE = the result of last grpprt_chr
   978  0642  c1                        POP     bc
   979  0643  f1                        POP     af
   980  0644  c9                        RET
   981                          
   982                          
   983                          
   984                          ; A = Pattern , B = Pattern in VRAM
   985                          grpprt_attr:
   986  0645  f5                        PUSH    af
   987  0646  e5                        PUSH    hl
   988  0647  c5                        PUSH    bc
   989  0648  d5                        PUSH    de
   990                          
   991  0649  57                        LD      d,a                               ; D = Pattern of charactor
   992  064a  58                        LD      e,b                               ; E = Pattern in VRAM
   993                          
   994  064b  ed4bc9f3                  LD      bc,(GRPCOL)
   995  064f  09                        ADD     hl,bc
   996  0650  4f                        LD      c,a
   997  0651  3af2f3                    LD      a,(ATRBYT)
   998  0654  e60f                      AND     $0f
   999  0656  47                        LD      b,a
  1000  0657  cd4502                    CALL    rdvrm
  1001                          
  1002  065a  f5                        PUSH    af                                ; A = an attribute in VRAM
  1003  065b  e60f                      AND     $0f
  1004  065d  b8                        CP      b
  1005  065e  2811                      JR      z,grpprt_attr_black
  1006  0660  f1                        POP     af
  1007  0661  f5                        PUSH    af
  1008  0662  0f                        RRCA
  1009  0663  0f                        RRCA
  1010  0664  0f                        RRCA
  1011  0665  0f                        RRCA
  1012  0666  e60f                      AND     $0f
  1013  0668  b8                        CP      b
  1014  0669  200d                      JR      nz,grpprt_attr_nomatch
  1015  066b  f1                        POP     af
  1016                          grpprt_attr_end:
  1017  066c  d1                        POP     de
  1018  066d  c1                        POP     bc
  1019  066e  e1                        POP     hl
  1020  066f  f1                        POP     af
  1021  0670  c9                        RET
  1022                          grpprt_attr_black:
  1023  0671  f1                        POP     af
  1024                          grpprt_attr_blk_end:
  1025  0672  d1                        POP     de
  1026  0673  c1                        POP     bc
  1027  0674  e1                        POP     hl
  1028  0675  f1                        POP     af
  1029  0676  2f                        CPL
  1030  0677  c9                        RET
  1031                          grpprt_attr_nomatch:
  1032  0678  7a                        LD      a,d
  1033  0679  b3                        OR      e
  1034  067a  feff                      CP      $ff
  1035  067c  2811                      JR      z,grpprt_attr_make_black
  1036  067e  f1                        POP     af
  1037  067f  cb00                      RLC     b
  1038  0681  cb00                      RLC     b
  1039  0683  cb00                      RLC     b
  1040  0685  cb00                      RLC     b
  1041  0687  e60f                      AND     $0f
  1042  0689  b0                        OR      b
  1043  068a  cd4b02                    CALL    wrtvrm
  1044  068d  18dd                      JR      grpprt_attr_end
  1045                          grpprt_attr_make_black:
  1046  068f  f1                        POP     af
  1047  0690  e6f0                      AND     $f0
  1048  0692  b0                        OR      b
  1049  0693  cd4b02                    CALL    wrtvrm
  1050  0696  18da                      JR      grpprt_attr_blk_end
  1051                          
  1052                          
  1053                          ; A = X MOD 8,C = Y MOD 8, HL = CLOC
  1054                          grpprt_chr:
  1055  0698  41                        LD      b,c
  1056  0699  3c                        INC     a
  1057  069a  4f                        LD      c,a
  1058                          
  1059  069b  3e07                      LD      a,$07
  1060  069d  a8                        XOR     b
  1061  069e  3c                        INC     a
  1062  069f  47                        LD      b,a
  1063                          
  1064                          grpprt_lp:
  1065  06a0  c5                        PUSH    bc
  1066  06a1  cd4502                    CALL    rdvrm
  1067  06a4  47                        LD      b,a
  1068  06a5  1a                        LD      a,(de)
  1069  06a6  cd4506                    CALL    grpprt_attr
  1070                          grpprt_sft_lp:
  1071  06a9  0d                        DEC     c
  1072  06aa  2803                      JR      z,grpprt_sft_ed
  1073  06ac  0f                        RRCA
  1074  06ad  18fa                      JR      grpprt_sft_lp
  1075                          grpprt_sft_ed:
  1076  06af  4f                        LD      c,a
  1077  06b0  3a2cf9                    LD      a,(CMASK)
  1078  06b3  a1                        AND     c
  1079  06b4  4f                        LD      c,a                               ; charactor with mask
  1080                          
  1081  06b5  78                        LD      a,b                               ; B = pattern in VRAM
  1082  06b6  b1                        OR      c
  1083                          
  1084  06b7  cd4b02                    CALL    wrtvrm
  1085  06ba  23                        INC     hl
  1086  06bb  13                        INC     de
  1087  06bc  c1                        POP     bc
  1088  06bd  10e1                      DJNZ    grpprt_lp
  1089  06bf  c9                        RET
  1090                          
  1091                          
  1092                          grpprt_text:
  1093  06c0  47525050525400            DB      "GRPPRT",0
  1094                          
  1095                          ;--------------------------------
  1096                          ; 0165h CHKNEW
  1097                          ; Is the current screen mode a bitmap mode?
  1098                          ; Output:  Carry flag set if current screen mode is SCREEN 5 or higher.
  1099                          ; Changes: AF
  1100                          chknew:
  1101  06c7  3aaffc                    LD      a,(SCRMOD)
  1102  06ca  fe05                      CP      5
  1103  06cc  c9                        RET
  1104                          
  1105                          ;--------------------------------
  1106                          ; 016Bh BIGFIL
  1107                          ; Fills VRAM with a fixed value.
  1108                          ; Like FILVRM, but supports 128K of VRAM.
  1109                          ; Input:   HL = VRAM start address
  1110                          ;    (ACPAGE) = active VRAM page
  1111                          ;          BC = number of bytes to fill
  1112                          ;          A  = value to fill VRAM with
  1113                          ; Changes: AF, BC
  1114                          bigfil:
  1115  06cd  f5                        PUSH    af
  1116  06ce  cdec06                    CALL    nsetwr
  1117  06d1  0b                        DEC     bc
  1118  06d2  0c                        INC     c
  1119  06d3  78                        LD      a,b
  1120  06d4  41                        LD      b,c
  1121  06d5  4f                        LD      c,a
  1122  06d6  0c                        INC     c
  1123  06d7  f1                        POP     af
  1124  06d8  f3                        DI
  1125                          bigfil_lp:
  1126  06d9  d3a0                      OUT     (VDP_DATA),a
  1127  06db  10fc                      DJNZ    bigfil_lp
  1128  06dd  0d                        DEC     c
  1129  06de  20f9                      JR      nz,bigfil_lp
  1130  06e0  fb                        EI
  1131  06e1  c9                        RET
  1132                          
  1133                          ;--------------------------------
  1134                          ; 016Eh NSETRD
  1135                          ; Set VRAM address and read mode.
  1136                          ; Like SETRD, but supports 128K of VRAM.
  1137                          ; Input:   HL = VRAM address
  1138                          ;    (ACPAGE) = active VRAM page
  1139                          ; Changes: AF
  1140                          ; Note: If an odd-numbered 32K page is active and HL >= $8000,
  1141                          ;       16-bit wrap around occurs.
  1142                          nsetrd:
  1143  06e2  cdf806                    CALL    nset_addr
  1144  06e5  7c                        LD      a,h
  1145  06e6  e63f                      AND     $3F
  1146  06e8  d3a1                      OUT     (VDP_ADDR),a                      ; A13..A8
  1147  06ea  fb                        EI
  1148  06eb  c9                        RET
  1149                          
  1150                          ;--------------------------------
  1151                          ; 0171h NSETWR
  1152                          ; Set VRAM address and write mode.
  1153                          ; Like SETWRT, but supports 128K of VRAM.
  1154                          ; Input:   HL = VRAM address
  1155                          ;    (ACPAGE) = active VRAM page
  1156                          ; Changes: AF
  1157                          ; Note: If an odd-numbered 32K page is active and HL >= $8000,
  1158                          ;       16-bit wrap around occurs.
  1159                          nsetwr:
  1160  06ec  cdf806                    CALL    nset_addr
  1161  06ef  7c                        LD      a,h
  1162  06f0  e63f                      AND     $3F
  1163  06f2  f640                      OR      $40
  1164  06f4  d3a1                      OUT     (VDP_ADDR),a                      ; A13..A8
  1165  06f6  fb                        EI
  1166  06f7  c9                        RET
  1167                          
  1168                          nset_addr:
  1169  06f8  3af6fa                    LD      a,(ACPAGE)
  1170  06fb  b7                        OR      a
  1171  06fc  2810                      JR      z,nset_32k
  1172                          
  1173  06fe  3aaffc                    LD      a,(SCRMOD)
  1174  0701  fe05                      CP      5
  1175  0703  da5e02                    JP      c,setwrt
  1176  0706  fe07                      CP      7
  1177  0708  3af6fa                    LD      a,(ACPAGE)
  1178  070b  3801                      JR      c,nset_32k                        ; SCREEN5/6 -> 32K pages
  1179  070d  87                        ADD     a,a                               ; SCREEN7/8 -> 64K pages
  1180                          nset_32k:
  1181  070e  e5                        PUSH    hl
  1182  070f  e603                      AND     $03                               ; A  =  0   0   0   0   0   0   P1  P0
  1183  0711  0f                        RRCA
  1184  0712  6f                        LD      l,a                               ; L  =  P0  0   0   0   0   0   0   P1
  1185  0713  e680                      AND     $80                               ; A  =  P0  0   0   0   0   0   0   0
  1186  0715  ac                        XOR     h                                 ; A  = A15 A14 A13 A12 A11 A10  A9  A8
  1187  0716  17                        RLA                                       ; CF = A15
  1188  0717  cb15                      RL      l                                 ; L  =  0   0   0   0   0   0   P1 A15
  1189  0719  17                        RLA                                       ; CF = A14
  1190  071a  7d                        LD      a,l
  1191  071b  17                        RLA                                       ; A  =  0   0   0   0   0   P1 A15 A14
  1192  071c  f3                        DI
  1193  071d  d3a1                      OUT     (VDP_ADDR),a                      ; A16..A14
  1194  071f  3e8e                      LD      a,$8E
  1195  0721  d3a1                      OUT     (VDP_ADDR),a                      ; R#14
  1196  0723  e1                        POP     hl
  1197  0724  7d                        LD      a,l
  1198  0725  d3a1                      OUT     (VDP_ADDR),a                      ; A7..A0
  1199  0727  c9                        RET
  1200                          
  1201                          
  1202                          
  1203                          ;--------------------------------
  1204                          ; 0174h NRDVRM
  1205                          ; Read a byte from VRAM.
  1206                          ; Leaves the VRAM in read mode at the byte after the one read.
  1207                          ; Like RDVRM, but supports 128K of VRAM.
  1208                          ; Input:   HL = VRAM address
  1209                          ;    (ACPAGE) = active VRAM page
  1210                          ; Output:   A = the byte read
  1211                          nrdvrm:
  1212  0728  cde206                    CALL    nsetrd
  1213  072b  dba0                      IN      a,(VDP_DATA)
  1214  072d  c9                        RET
  1215                          
  1216                          ;--------------------------------
  1217                          ; 0177h NWRVRM
  1218                          ; Write a byte to VRAM.
  1219                          ; Leaves the VRAM in write mode at the byte after the one written.
  1220                          ; Like WRTVRM, but supports 128K of VRAM.
  1221                          ; Input:   HL = VRAM address
  1222                          ;    (ACPAGE) = active VRAM page
  1223                          ;           A = the byte to write
  1224                          nwrvrm:
  1225  072e  f5                        PUSH    af
  1226  072f  cdec06                    CALL    nsetwr
  1227  0732  f1                        POP     af
  1228  0733  d3a0                      OUT     (VDP_DATA),a
  1229  0735  c9                        RET
  1230                          
  1231                          
  1232                          ; VDP routines which only exist in sub rom, but are useful for C-BIOS internal
  1233                          ; use as well:
  1234                          
  1235                          ;-------------------------------------
  1236                          ; $0131(sub) VDPSTA
  1237                          ; Read VDP status register.
  1238                          ; Input:   A = number of status register
  1239                          ; Output:  A = value read
  1240                          ; Changes: F
  1241                          vdpsta:
  1242  0736  f3                        DI
  1243                          ; Select desired status register.
  1244  0737  d3a1                      OUT     (VDP_ADDR),a
  1245  0739  3e8f                      LD      a,$80 + 15
  1246  073b  d3a1                      OUT     (VDP_ADDR),a
  1247                          ; Read status register.
  1248  073d  dba1                      IN      a,(VDP_STAT)
  1249  073f  f5                        PUSH    af
  1250                          ; Restore status register 0.
  1251  0740  af                        XOR     a
  1252  0741  d3a1                      OUT     (VDP_ADDR),a
  1253  0743  3e8f                      LD      a,$80 + 15
  1254  0745  d3a1                      OUT     (VDP_ADDR),a
  1255  0747  fb                        EI
  1256  0748  f1                        POP     af
  1257  0749  c9                        RET
  1258                          
  1259                          
  1260                          ;--------------------
  1261                          ;Initializes VDP routine
  1262                          ;--------------------
  1263                          
  1264                          init_vdp:
  1265  074a  dba1                      IN      a,(VDP_STAT)                      ; reset latch
  1266                          
  1267  074c  010000                    LD      bc,$0000                          ; R#0
  1268  074f  cd2e02                    CALL    wrtvdp
  1269  0752  0101e0                    LD      bc,$E001                          ; R#1
  1270  0755  cd2e02                    CALL    wrtvdp
  1271  0758  010200                    LD      bc,$0002                          ; R#2
  1272  075b  cd2e02                    CALL    wrtvdp
  1273  075e  010380                    LD      bc,$8003                          ; R#3
  1274  0761  cd2e02                    CALL    wrtvdp
  1275  0764  010401                    LD      bc,$0104                          ; R#4
  1276  0767  cd2e02                    CALL    wrtvdp
  1277                          
  1278  076a  3e01                      LD      a,1
  1279  076c  32dcf3                    LD      (CSRY),a
  1280  076f  32ddf3                    LD      (CSRX),a
  1281  0772  cdd207                    CALL    cls_screen1
  1282                          
  1283  0775  3e00                      LD      a ,$00
  1284  0777  210008                    LD      hl,$0800
  1285  077a  010008                    LD      bc,$0800
  1286  077d  cd6b02                    CALL    filvrm
  1287                          
  1288                          ; for screen 1 color table
  1289  0780  3ef5                      LD      a ,$F5
  1290  0782  210020                    LD      hl,$2000
  1291  0785  012000                    LD      bc,$0020
  1292  0788  cd6b02                    CALL    filvrm
  1293                          
  1294                          
  1295                          ; PatGenTbl
  1296                          ;        76543210 76543210
  1297                          ;        00000100 00000000
  1298                          ;             04h      00h
  1299                          
  1300  078b  0107f5                    LD      bc,$F507                          ; R#7
  1301  078e  cd2e02                    CALL    wrtvdp
  1302                          
  1303                                  IF      COMPILE_FONT != NO
  1304  0791  21bf1b                        LD      hl,B_Font
  1305  0794  110008                        LD      de,$0800
  1306  0797  010008                        LD      bc,$0800
  1307  079a  cd9702                        CALL    ldirvm
  1308                                  ENDIF
  1309  079d  c9                        RET
  1310                          
  1311                          
  1312                          
  1313                                  IF      COMPILE_FONT != NO
  1314                          ;------------------------------
  1315                          ; Initialise font.
  1316                          ; Uploads font to VRAM address specified by CGPBAS.
  1317                          init_font:
  1318  079e  21bf1b                        LD      hl,B_Font
  1319  07a1  ed5b24f9                      LD      de,(CGPBAS)
  1320  07a5  010008                        LD      bc,$0800
  1321  07a8  c39702                        JP      ldirvm
  1322                                  ENDIF
  1323                          
  1324                          
  1325                          ;--------------------------------
  1326                          ; $00C3 CLS
  1327                          ; Clears the screen.
  1328                          ; Input:   BAKCLR,
  1329                          ;          Z-Flag has to be low if the main ROM version of CLS is called;
  1330                          ;          in the sub ROM version of CVS the Z-Flag is ignored.
  1331                          ; Changes: AF, BC, DE
  1332                          ;TODO: add optional borders to text based screens
  1333                          ;      -> Should that happen in CLS?
  1334                          cls_z:
  1335  07ab  c0                        RET     nz
  1336                          cls:
  1337  07ac  3aaffc                    LD      a,(SCRMOD)
  1338  07af  fe04                      CP      4
  1339  07b1  d0                        RET     nc                                ; Out of range?
  1340  07b2  e5                        PUSH    hl
  1341  07b3  21bb07                    LD      hl,cls_table
  1342  07b6  cd0002                    CALL    jump_table
  1343  07b9  e1                        POP     hl
  1344  07ba  c9                        RET
  1345                          cls_table:
  1346  07bb  c307                      DW      cls_screen0
  1347  07bd  d207                      DW      cls_screen1
  1348  07bf  ee07                      DW      cls_screen2
  1349  07c1  0408                      DW      cls_screen3
  1350                          
  1351                          cls_screen0:
  1352  07c3  3ab0f3                    LD      a,(LINLEN)
  1353  07c6  fe28                      CP      40
  1354  07c8  01c003                    LD      bc,40*24
  1355  07cb  3808                      JR      c,cls_text
  1356  07cd  018007                    LD      bc,80*24
  1357  07d0  1803                      JR      cls_text
  1358                          
  1359                          cls_screen1:
  1360  07d2  010003                    LD      bc,32*24
  1361                          
  1362                          cls_text:
  1363  07d5  2a22f9                    LD      hl,(NAMBAS)
  1364  07d8  3e20                      LD      a,$20
  1365  07da  cd6b02                    CALL    filvrm
  1366                          
  1367  07dd  3e01                      LD      a,1
  1368  07df  21b2fb                    LD      hl,LINTTB
  1369  07e2  77                        LD      (hl),a
  1370  07e3  11b3fb                    LD      de,LINTTB+1
  1371  07e6  011700                    LD      bc,23
  1372  07e9  edb0                      LDIR
  1373  07eb  c36010                    JP      chput_ctrl_home
  1374                          
  1375                          cls_screen2:
  1376  07ee  af                        XOR     a
  1377  07ef  010018                    LD      bc,$1800
  1378  07f2  2a24f9                    LD      hl,(CGPBAS)
  1379  07f5  6f                        LD      l,a
  1380  07f6  c5                        PUSH    bc
  1381  07f7  cd6b02                    CALL    filvrm
  1382  07fa  c1                        POP     bc
  1383                          
  1384  07fb  3aeaf3                    LD      a,(BAKCLR)
  1385  07fe  2ac9f3                    LD      hl,(GRPCOL)
  1386  0801  c36b02                    JP      filvrm
  1387                          
  1388                          cls_screen3:
  1389  0804  3aeaf3                    LD      a,(BAKCLR)
  1390  0807  e60f                      AND     $0F
  1391  0809  47                        LD      b,a
  1392  080a  07                        RLCA
  1393  080b  07                        RLCA
  1394  080c  07                        RLCA
  1395  080d  07                        RLCA
  1396  080e  b0                        OR      b
  1397  080f  010008                    LD      bc,$800
  1398  0812  2a24f9                    LD      hl,(CGPBAS)
  1399  0815  c36b02                    JP      filvrm
  1400                          
  1401                          
  1402                          ; $0105 GETPAT
  1403                          ; Function : Returns current pattern of a character
  1404                          ; Input    : A  - ASCII code of character
  1405                          ; Output   : Pattern in PATWRK starting from address #FC40
  1406                          ; Registers: All
  1407                          ; Remark   : Same as routine in MSX1-BIOS, but there it doesn't exist as
  1408                          ;            a BIOS-call
  1409                          getpat:
  1410  0818  ed4b20f9                  LD      bc,(CGPNT+1)
  1411  081c  6f                        LD      l,a
  1412  081d  2600                      LD      h,0
  1413  081f  29                        ADD     hl,hl
  1414  0820  29                        ADD     hl,hl
  1415  0821  29                        ADD     hl,hl
  1416  0822  09                        ADD     hl,bc
  1417  0823  0608                      LD      b,8
  1418  0825  1140fc                    LD      de,PATWRK
  1419                          getpat_loop:
  1420  0828  c5                        PUSH    bc
  1421  0829  d5                        PUSH    de
  1422  082a  e5                        PUSH    hl
  1423  082b  3a1ff9                    LD      a,(CGPNT)
  1424  082e  cdbf23                    CALL    rdslt
  1425  0831  e1                        POP     hl
  1426  0832  d1                        POP     de
  1427  0833  c1                        POP     bc
  1428  0834  12                        LD      (de),a
  1429  0835  13                        INC     de
  1430  0836  23                        INC     hl
  1431  0837  10ef                      DJNZ    getpat_loop
  1432  0839  c9                        RET
  1433                          
  1434                          ;--------------------------------
  1435                          ; $00FC RIGHTC
  1436                          ; Function : Shifts screenpixel to the right
  1437                          ; Registers: AF
  1438                          ; NOTE     : This implementation is still a stub!
  1439                          rightc:
  1440  083a  e5                        PUSH    hl
  1441  083b  f5                        PUSH    af
  1442  083c  214208                    LD      hl,rightc_text
  1443                          ;                call    print_debug
  1444  083f  f1                        POP     af
  1445  0840  e1                        POP     hl
  1446  0841  c9                        RET
  1447                          rightc_text:
  1448  0842  52494748544300            DB      "RIGHTC",0
  1449                          
  1450                          ;--------------------------------
  1451                          ; $00FF LEFTC
  1452                          ; Function : Shifts screenpixel to the left
  1453                          ; Registers: AF
  1454                          ; NOTE     : This implementation is still a stub!
  1455                          leftc:
  1456  0849  e5                        PUSH    hl
  1457  084a  f5                        PUSH    af
  1458  084b  215108                    LD      hl,leftc_text
  1459                          ;                call    print_debug
  1460  084e  f1                        POP     af
  1461  084f  e1                        POP     hl
  1462  0850  c9                        RET
  1463                          leftc_text:
  1464  0851  4c4546544300              DB      "LEFTC",0
  1465                          
  1466                          ;--------------------------------
  1467                          ; $0102 UPC
  1468                          ; Function : Shifts screenpixel up
  1469                          ; Registers: AF
  1470                          ; NOTE     : This implementation is still a stub!
  1471                          upc:
  1472  0857  e5                        PUSH    hl
  1473  0858  f5                        PUSH    af
  1474  0859  215f08                    LD      hl,upc_text
  1475                          ;                call    print_debug
  1476  085c  f1                        POP     af
  1477  085d  e1                        POP     hl
  1478  085e  c9                        RET
  1479                          upc_text:
  1480  085f  55504300                  DB      "UPC",0
  1481                          
  1482                          ;--------------------------------
  1483                          ; $0105 TUPC
  1484                          ; Function : Tests whether UPC is possible, if possible, execute UPC
  1485                          ; Output   : C-flag set if operation would end outside the screen
  1486                          ; Registers: AF
  1487                          ; NOTE     : This implementation is still a stub!
  1488                          tupc:
  1489  0863  e5                        PUSH    hl
  1490  0864  f5                        PUSH    af
  1491  0865  216b08                    LD      hl,tupc_text
  1492                          ;                call    print_debug
  1493  0868  f1                        POP     af
  1494  0869  e1                        POP     hl
  1495  086a  c9                        RET
  1496                          tupc_text:
  1497  086b  5455504300                DB      "TUPC",0
  1498                          
  1499                          ;--------------------------------
  1500                          ; $0108 DOWNC
  1501                          ; Function : Shifts screenpixel down
  1502                          ; Registers: AF
  1503                          ; NOTE     : This implementation is still a stub!
  1504                          downc:
  1505  0870  e5                        PUSH    hl
  1506  0871  f5                        PUSH    af
  1507  0872  217808                    LD      hl,downc_text
  1508                          ;                call    print_debug
  1509  0875  f1                        POP     af
  1510  0876  e1                        POP     hl
  1511  0877  c9                        RET
  1512                          downc_text:
  1513  0878  444f574e4300              DB      "DOWNC",0
  1514                          
  1515                          ;--------------------------------
  1516                          ; $010B TDOWNC
  1517                          ; Function : Tests whether DOWNC is possible, if possible, execute DOWNC
  1518                          ; Output   : C-flag set if operation would end outside the screen
  1519                          ; Registers: AF
  1520                          ; NOTE     : This implementation is still a stub!
  1521                          tdownc:
  1522  087e  e5                        PUSH    hl
  1523  087f  f5                        PUSH    af
  1524  0880  218608                    LD      hl,tdownc_text
  1525                          ;                call    print_debug
  1526  0883  f1                        POP     af
  1527  0884  e1                        POP     hl
  1528  0885  c9                        RET
  1529                          tdownc_text:
  1530  0886  54444f574e4300            DB      "TDOWNC",0
  1531                          
  1532                          ;--------------------------------
  1533                          ; $010E SCALXY
  1534                          ; Function : Scales X and Y coordinates
  1535                          ; NOTE     : This implementation is still a stub!
  1536                          scalxy:
  1537  088d  ed4bb7fc                  LD      bc,(GRPACX)
  1538  0891  ed5bb9fc                  LD      de,(GRPACY)
  1539  0895  c9                        RET
  1540                          scalxy_text:
  1541  0896  5343414c585900            DB      "SCALXY",0
  1542                          
  1543                          ;--------------------------------
  1544                          ; $0111 MAPXYC
  1545                          ; Function : Places cursor at current cursor address
  1546                          ; Input    : BC = X coordinate,DE=Y coordinate
  1547                          ; Register : AF,D,HL
  1548                          ; NOTE     : This is a test version
  1549                          mapxy:
  1550  089d  c5                        PUSH    bc
  1551  089e  ed43b7fc                  LD      (GRPACX),bc
  1552  08a2  ed53b9fc                  LD      (GRPACY),de
  1553  08a6  2ab9fc                    LD      hl,(GRPACY)
  1554  08a9  29                        ADD     hl,hl
  1555  08aa  29                        ADD     hl,hl
  1556  08ab  29                        ADD     hl,hl
  1557  08ac  29                        ADD     hl,hl
  1558  08ad  29                        ADD     hl,hl
  1559  08ae  2e00                      LD      l,$00
  1560  08b0  0600                      LD      b,$00
  1561                          
  1562  08b2  3eff                      LD      a,$ff
  1563  08b4  322cf9                    LD      (CMASK),a
  1564  08b7  79                        LD      a,c
  1565  08b8  e607                      AND     $07
  1566  08ba  280a                      JR      z,mapxy_mask_ed
  1567  08bc  47                        LD      b,a
  1568  08bd  3eff                      LD      a,$ff
  1569                          mapxy_mask_lp:
  1570  08bf  a7                        AND     a
  1571  08c0  1f                        RRA
  1572  08c1  10fc                      DJNZ    mapxy_mask_lp
  1573  08c3  322cf9                    LD      (CMASK),a
  1574                          mapxy_mask_ed:
  1575  08c6  79                        LD      a,c
  1576  08c7  e6f8                      AND     $F8
  1577  08c9  4f                        LD      c,a
  1578  08ca  0600                      LD      b,$00
  1579  08cc  09                        ADD     hl,bc
  1580                          
  1581  08cd  222af9                    LD      (CLOC),hl
  1582  08d0  c1                        POP     bc
  1583  08d1  c9                        RET
  1584                          mapxy_text:
  1585  08d2  4d4150585900              DB      "MAPXY",0
  1586                          
  1587                          ;--------------------------------
  1588                          ; $0114 FETCHC
  1589                          ; Function : Gets current cursor addresses mask pattern
  1590                          ; Output   : HL - Cursor address
  1591                          ;            A  - Mask pattern
  1592                          fetchc:
  1593  08d8  3a2cf9                    LD      a,(CMASK)
  1594  08db  2a2af9                    LD      hl,(CLOC)
  1595  08de  c9                        RET
  1596                          fetchc_text:
  1597  08df  46455443484300            DB      "FETCHC",0
  1598                          
  1599                          ;--------------------------------
  1600                          ; $0117 STOREC
  1601                          ; Function : Record current cursor addresses mask pattern
  1602                          ; Input    : HL - Cursor address
  1603                          ;            A  - Mask pattern
  1604                          ; NOTE     : This implementation is still a stub!
  1605                          storec:
  1606  08e6  e5                        PUSH    hl
  1607  08e7  f5                        PUSH    af
  1608  08e8  21ee08                    LD      hl,storec_text
  1609                          ;                call    print_debug
  1610  08eb  f1                        POP     af
  1611  08ec  e1                        POP     hl
  1612  08ed  c9                        RET
  1613                          storec_text:
  1614  08ee  53544f52454300            DB      "STOREC",0
  1615                          
  1616                          ;--------------------------------
  1617                          ; $011A SETATR
  1618                          ; Function : Set attribute byte
  1619                          ; NOTE     : This implementation is still a stub!
  1620                          setatr:
  1621  08f5  e5                        PUSH    hl
  1622  08f6  f5                        PUSH    af
  1623  08f7  21fd08                    LD      hl,setatr_text
  1624                          ;                call    print_debug
  1625  08fa  f1                        POP     af
  1626  08fb  e1                        POP     hl
  1627  08fc  c9                        RET
  1628                          setatr_text:
  1629  08fd  53455441545200            DB      "SETATR",0
  1630                          
  1631                          ;--------------------------------
  1632                          ; $011D READC
  1633                          ; Function : Reads attribute byte of current screenpixel
  1634                          ; NOTE     : This implementation is still a stub!
  1635                          readc:
  1636  0904  e5                        PUSH    hl
  1637  0905  f5                        PUSH    af
  1638  0906  210c09                    LD      hl,readc_text
  1639                          ;                call    print_debug
  1640  0909  f1                        POP     af
  1641  090a  e1                        POP     hl
  1642  090b  c9                        RET
  1643                          readc_text:
  1644  090c  524541444300              DB      "READC",0
  1645                          
  1646                          ;--------------------------------
  1647                          ; $0120 SETC
  1648                          ; Function : Returns currenct screenpixel of specificed attribute byte
  1649                          ; NOTE     : This implementation is still a stub!
  1650                          setc:
  1651  0912  e5                        PUSH    hl
  1652  0913  f5                        PUSH    af
  1653  0914  211a09                    LD      hl,setc_text
  1654                          ;                call    print_debug
  1655  0917  f1                        POP     af
  1656  0918  e1                        POP     hl
  1657  0919  c9                        RET
  1658                          setc_text:
  1659  091a  5345544300                DB      "SETC",0
  1660                          
  1661                          ;--------------------------------
  1662                          ; $0123 NSETCX
  1663                          ; Function : Set horizontal screenpixels
  1664                          ; NOTE     : This implementation is still a stub!
  1665                          nsetcx:
  1666  091f  e5                        PUSH    hl
  1667  0920  f5                        PUSH    af
  1668  0921  212709                    LD      hl,nsetcx_text
  1669                          ;                call    print_debug
  1670  0924  f1                        POP     af
  1671  0925  e1                        POP     hl
  1672  0926  c9                        RET
  1673                          nsetcx_text:
  1674  0927  4e534554435800            DB      "NSETCX",0
  1675                          
  1676                          ;--------------------------------
  1677                          ; $0126 GTASPC
  1678                          ; Function : Gets screen relations
  1679                          ; Output   : DE, HL
  1680                          ; Registers: DE, HL
  1681                          ; NOTE     : This implementation is still a stub!
  1682                          gtaspc:
  1683  092e  e5                        PUSH    hl
  1684  092f  f5                        PUSH    af
  1685  0930  213609                    LD      hl,gtaspc_text
  1686                          ;                call    print_debug
  1687  0933  f1                        POP     af
  1688  0934  e1                        POP     hl
  1689  0935  c9                        RET
  1690                          gtaspc_text:
  1691  0936  47544153504300            DB      "GTASPC",0
  1692                          
  1693                          ;--------------------------------
  1694                          ; $0129 PNTINI
  1695                          ; Function : Initalises the PAINT instruction
  1696                          ; NOTE     : This implementation is still a stub!
  1697                          pntini:
  1698  093d  e5                        PUSH    hl
  1699  093e  f5                        PUSH    af
  1700  093f  214509                    LD      hl,pntini_text
  1701                          ;                call    print_debug
  1702  0942  f1                        POP     af
  1703  0943  e1                        POP     hl
  1704  0944  c9                        RET
  1705                          pntini_text:
  1706  0945  504e54494e4900            DB      "PNTINI",0
  1707                          
  1708                          ;--------------------------------
  1709                          ; $012C SCANR
  1710                          ; Function : Scans screenpixels to the right
  1711                          ; NOTE     : This implementation is still a stub!
  1712                          scanr:
  1713  094c  e5                        PUSH    hl
  1714  094d  f5                        PUSH    af
  1715  094e  215409                    LD      hl,scanr_text
  1716                          ;                call    print_debug
  1717  0951  f1                        POP     af
  1718  0952  e1                        POP     hl
  1719  0953  c9                        RET
  1720                          scanr_text:
  1721  0954  5343414e5200              DB      "SCANR",0
  1722                          
  1723                          ;--------------------------------
  1724                          ; $012F SCANL
  1725                          ; Function : Scans screenpixels to the left
  1726                          ; NOTE     : This implementation is still a stub!
  1727                          scanl:
  1728  095a  e5                        PUSH    hl
  1729  095b  f5                        PUSH    af
  1730  095c  216209                    LD      hl,scanl_text
  1731                          ;                call    print_debug
  1732  095f  f1                        POP     af
  1733  0960  e1                        POP     hl
  1734  0961  c9                        RET
  1735                          scanl_text:
  1736  0962  5343414e4c00              DB      "SCANL",0
  1737                          
  1738                          ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
  1739                          
main.asm:
   561                          
   562                          ;
   563                          ;	AROUND 800 BYTES FREE HERE
   564                          ;
   565                          ;
   566                          
   567                          ; The game "Hacker" jumps directly to this location($0D02).
   568                          ; Star force calls $0D0E.
   569                          
   570  0968  0000000000000000          DS      $0D01 - $
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              00                
   571                          ; for all wrong jumper,put RET instruction there
   572  0d01  c9                        RET
   573  0d02  dde1                      POP     ix                                ; $0D02
   574  0d04  fde1                      POP     iy
   575  0d06  f1                        POP     af
   576  0d07  c1                        POP     bc
   577  0d08  d1                        POP     de
   578  0d09  e1                        POP     hl
   579  0d0a  d9                        EXX
   580  0d0b  08                        EX      af,af'
   581  0d0c  f1                        POP     af
   582  0d0d  c1                        POP     bc
   583  0d0e  d1                        POP     de
   584  0d0f  e1                        POP     hl
   585  0d10  fb                        EI
   586  0d11  c9                        RET
   587                          
   588                          ; $0000 CHKRAM
   589                          ; Function : Tests RAM and sets RAM slot for the system
   590                          ; Registers: All
   591                          ; Remark   : After this, a jump must be made to INIT, for further initialisation.
   592                          chkram:
   593  0d12  ed56                      IM      1
   594                                  IF     PLATFORM=1
   595  0d14  3efe                      LD      A,$FE
   596  0d16  d3a6                      OUT     (VDP_ACR),A                       ; INITIALIZE ACR REGISTER FOR DUODYNE HARDWARE
   597                                  ENDIF
   598                          
   599                                  IF     PLATFORM=3
   600                                  LD      A,$FD
   601                                  OUT     (VDP_ACR),A                       ; INITIALIZE ACR REGISTER FOR RETROBREW HARDWARE
   602                                  ENDIF
   603                          
   604                          ;----------------------
   605                          ; User interface
   606                          ;----------------------
   607                          
   608  0d18  2100f3                    LD      hl,$F300
   609  0d1b  f9                        LD      sp,hl                             ; set $F300 to stack pointer
   610                          
   611  0d1c  cd920d                    CALL    init_ram
   612                          
   613  0d1f  cd4a07                    CALL    init_vdp
   614                          
   615  0d22  fb                        EI
   616                          
   617  0d23  cd6f0f                    CALL    initio
   618                          
   619  0d26  3e0f                      LD      a,15
   620  0d28  32e9f3                    LD      (FORCLR),a
   621  0d2b  3e05                      LD      a,5
   622  0d2d  32eaf3                    LD      (BAKCLR),a
   623  0d30  32ebf3                    LD      (BDRCLR),a
   624  0d33  3e1d                      LD      a,29
   625  0d35  32aff3                    LD      (LINL32),a
   626  0d38  cdbf03                    CALL    init32
   627                          
   628  0d3b  210724                    LD      hl,str_proginfo
   629  0d3e  cdb50e                    CALL    prn_text
   630                          
   631  0d41  cd650d                    CALL    search_roms
   632  0d44  cddafe                    CALL    H_STKE
   633                          
   634                          ; Set up hooks and system vars so NMS8250 disk ROM will try
   635                          ; to load and execute the boot sector.
   636  0d47  3e01                      LD      a,1
   637  0d49  3299fd                    LD      (DEVICE),a
   638  0d4c  af                        XOR     a
   639                          ; TODO: Find out or invent name for $FB29.
   640  0d4d  3229fb                    LD      ($FB29),a
   641                          
   642                          ; This is the hook the disk ROM uses for booting.
   643  0d50  cdcbfe                    CALL    H_RUNC
   644                          
   645  0d53  cd6c00                    CALL    $006C
   646  0d56  cd7800                    CALL    $0078
   647  0d59  cdc300                    CALL    $00C3
   648                          
   649                          ;   JP	STARTBASIC
   650                          
   651  0d5c  215c24                    LD      hl,str_nocart
   652  0d5f  cdb50e                    CALL    prn_text
   653                          
   654  0d62  c3cf17                    JP      hang_up_mode
   655                          
   656                          
   657                          
   658                          ;----------------------
   659                          ; Search for any extension ROMs and initialize them.
   660                          search_roms:
   661  0d65  ed5b0080                  LD      DE,($8000)
   662  0d69  214142                    LD      hl,$4241                          ; "AB"
   663  0d6c  cd450f                    CALL    dcompr                            ; ZF is set if the ROM is present.
   664  0d6f  ca800d                    JP      z,search_roms_8k
   665  0d72  ed5b0040                  LD      DE,($4000)
   666  0d76  214142                    LD      hl,$4241                          ; "AB"
   667  0d79  cd450f                    CALL    dcompr                            ; ZF is set if the ROM is present.
   668  0d7c  ca890d                    JP      z,search_roms_4k
   669  0d7f  c9                        RET
   670                          search_roms_8k:
   671  0d80  3a0280                    LD      A,($8002)
   672  0d83  6f                        LD      L,A
   673  0d84  3a0380                    LD      A,($8003)
   674  0d87  67                        LD      H,A
   675  0d88  e9                        JP      (HL)
   676                          search_roms_4k:
   677  0d89  3a0240                    LD      A,($4002)
   678  0d8c  6f                        LD      L,A
   679  0d8d  3a0340                    LD      A,($4003)
   680  0d90  67                        LD      H,A
   681  0d91  e9                        JP      (HL)
   682                          
   683                          ;
   684                          ;		LD	HL,$0000
   685                          ;		LD	A,%00000101
   686                          ;		CALL	rdslt
   687                          ;		LD	E,A
   688                          ;		LD	HL,$0001
   689                          ;		LD	A,%00000101
   690                          ;		CALL	rdslt
   691                          ;		LD	D,A
   692                          ;		CALL	search_roms_check
   693                          ;		JP	Z,search_roms_FOUND_P1
   694                          ;		LD	HL,$0000
   695                          ;		LD	A,%00000110
   696                          ;		CALL	rdslt
   697                          ;		LD	E,A
   698                          ;		LD	HL,$0001
   699                          ;		LD	A,%00000110
   700                          ;		CALL	rdslt
   701                          ;		LD	D,A
   702                          ;		CALL	search_roms_check
   703                          ;		JP	Z,search_roms_FOUND_P2
   704                          ;		RET
   705                          ;s;earch_roms_check:
   706                          ;		LD	($8500),DE
   707                          ;                ld      hl,$4241        ; "AB"
   708                          ; ;               call    dcompr          ; ZF is set if the ROM is present.
   709                          ;                ret
   710                          ;search_roms_FOUND_P1:;
   711                          ;		LD	HL,$0000
   712                          ;		LD	BC,$8000
   713                          ;		LD	DE,$4000
   714                          ;search_roms_FOUND_P1_LOOP:
   715                          ;		LD	A,%00000101
   716                          ;		CALL	rdslt
   717                          ;		LD	(DE),A
   718                          ;		INC	HL
   719                          ;		INC	DE
   720                          ;		DEC	BC
   721                          ;		LD	A,B
   722                          ;		CP	$00
   723                          ;		JP	NZ,search_roms_FOUND_P1_LOOP
   724                          ;		ADD	A,C
   725                          ;		CP	$00
   726                          ;		JP	NZ,search_roms_FOUND_P1_LOOP
   727                          ;		LD	A,($4002)
   728                          ;		LD	L,A
   729                          ;		LD	A,($4003)
   730                          ;		LD	H,A
   731                          ;		JP	(HL)
   732                          
   733                          ;search_roms_FOUND_P2:
   734                          ;		LD	HL,$0000
   735                          ;		LD	BC,$4000
   736                          ;		LD	DE,$8000
   737                          ;search_roms_FOUND_P2_LOOP:
   738                          ;		LD	A,%00000110
   739                          ;		CALL	rdslt
   740                          ;		LD	(DE),A
   741                          ;		INC	HL
   742                          ;		INC	DE
   743                          ;		DEC	BC
   744                          ;		LD	A,B
   745                          ;		CP	$00
   746                          ;		JP	NZ,search_roms_FOUND_P2_LOOP
   747                          ;		ADD	A,C
   748                          ;		CP	$00
   749                          ;		JP	NZ,search_roms_FOUND_P2_LOOP
   750                          ;		LD	A,($8002)
   751                          ;		LD	L,A
   752                          ;		LD	A,($8003)
   753                          ;		LD	H,A
   754                          ;		JP	(HL)
   755                          
   756                          ;------------------------
   757                          ; Initialize RAM
   758                          
   759                          init_ram:
   760                          
   761                          ; Initialize workarea
   762  0d92  3e00                      LD      a,$00
   763  0d94  2180f3                    LD      hl,$F380
   764  0d97  77                        LD      (hl),a
   765  0d98  1181f3                    LD      de,$F381
   766  0d9b  017d0c                    LD      bc,$0C7D
   767  0d9e  edb0                      LDIR
   768                          
   769                          ; Initialize Disk work
   770  0da0  3ec9                      LD      a,$C9
   771  0da2  2100f3                    LD      hl,$F300
   772  0da5  77                        LD      (hl),a
   773  0da6  1101f3                    LD      de,$F301
   774  0da9  017f00                    LD      bc,$007F
   775  0dac  edb0                      LDIR
   776                          
   777                          ; initialize hook area with $C9 (assembler code for ret)
   778  0dae  3ec9                      LD      a,$C9                             ; ret code
   779  0db0  219afd                    LD      hl,H_KEYI
   780  0db3  77                        LD      (hl),a
   781  0db4  119bfd                    LD      de,H_KEYI+1
   782  0db7  014d02                    LD      bc,$024D                          ; shouldn't this be $0235 ?
   783  0dba  edb0                      LDIR
   784                          
   785                          ; Initialize key matrix
   786  0dbc  3eff                      LD      a,$FF
   787  0dbe  21dafb                    LD      hl,OLDKEY
   788  0dc1  77                        LD      (hl),a
   789  0dc2  11dbfb                    LD      de,OLDKEY+1
   790  0dc5  011500                    LD      bc,21
   791  0dc8  edb0                      LDIR
   792                          
   793                          ; Initialize Key buffer
   794  0dca  3e00                      LD      a,$00
   795  0dcc  21f0fb                    LD      hl,KEYBUF
   796  0dcf  77                        LD      (hl),a
   797  0dd0  11f1fb                    LD      de,KEYBUF+1
   798  0dd3  012700                    LD      bc,39
   799  0dd6  edb0                      LDIR
   800                          
   801                          
   802                          ; Set address pointer
   803  0dd8  21f0fb                    LD      hl,KEYBUF
   804  0ddb  22f8f3                    LD      (PUTPNT),hl
   805  0dde  22faf3                    LD      (GETPNT),hl
   806                          
   807                          ;                ld      hl,$8000
   808  0de1  d9                        EXX
   809  0de2  2248fc                    LD      (BOTTOM),hl                       ; Page1 and 2 is ROM,Page3 and 4 is RAM.
   810  0de5  d9                        EXX
   811                          
   812                          ; I don't know exactly what is stored between $F168 and $F380,
   813                          ; but the disk ROM neeDS some space there, so I'll just
   814                          ; reserve all of it.
   815  0de6  2180f3                    LD      hl,$F380                          ; was $F168, but neeDS to be changed by disk ROM
   816  0de9  224afc                    LD      (HIMEM),hl                        ; limit of usable memory
   817  0dec  2274f6                    LD      (STKTOP),hl                       ; position of BASIC stack
   818                          
   819                          
   820                          ; Initialize table of screen 0
   821  0def  210000                    LD      hl,$0000
   822  0df2  22b3f3                    LD      (TXTNAM),hl
   823  0df5  210008                    LD      hl,$0800
   824  0df8  22b7f3                    LD      (TXTCGP),hl
   825                          
   826                          ; Initialize table of screen 1
   827  0dfb  210018                    LD      hl,$1800
   828  0dfe  22bdf3                    LD      (T32NAM),hl
   829  0e01  210020                    LD      hl,$2000
   830  0e04  22bff3                    LD      (T32COL),hl
   831  0e07  210000                    LD      hl,$0000
   832  0e0a  22c1f3                    LD      (T32CGP),hl
   833  0e0d  21001b                    LD      hl,$1B00
   834  0e10  22c3f3                    LD      (T32ATR),hl
   835  0e13  210038                    LD      hl,$3800
   836  0e16  22c5f3                    LD      (T32PAT),hl
   837                          
   838                          ; Initialize table of screen 2
   839                          
   840  0e19  210018                    LD      hl,$1800
   841  0e1c  22c7f3                    LD      (GRPNAM),hl
   842  0e1f  210020                    LD      hl,$2000
   843  0e22  22c9f3                    LD      (GRPCOL),hl
   844  0e25  210000                    LD      hl,$0000
   845  0e28  22cbf3                    LD      (GRPCGP),hl
   846  0e2b  21001b                    LD      hl,$1B00
   847  0e2e  22cdf3                    LD      (GRPATR),hl
   848  0e31  210038                    LD      hl,$3800
   849  0e34  22cff3                    LD      (GRPPAT),hl
   850                          
   851                          ; Initialize table fo screen 3
   852  0e37  210008                    LD      hl,$0800
   853  0e3a  22d1f3                    LD      (MLTNAM),hl
   854  0e3d  210000                    LD      hl,$0000
   855  0e40  22d5f3                    LD      (MLTCGP),hl
   856  0e43  21001b                    LD      hl,$1B00
   857  0e46  22d7f3                    LD      (MLTATR),hl
   858  0e49  210038                    LD      hl,$3800
   859  0e4c  22d9f3                    LD      (MLTPAT),hl
   860                          
   861                          ; Initialise QUETAB.
   862  0e4f  2159f9                    LD      hl,QUETAB
   863  0e52  22f3f3                    LD      (QUEUES),hl
   864  0e55  2175f9                    LD      hl,VOICAQ
   865  0e58  225df9                    LD      ($FFFF &(QUETAB+0*6+4)),hl
   866  0e5b  21f5f9                    LD      hl,VOICBQ
   867  0e5e  2263f9                    LD      ($FFFF &(QUETAB+1*6+4)),hl
   868  0e61  2175fa                    LD      hl,VOICCQ
   869  0e64  2269f9                    LD      ($FFFF &(QUETAB+2*6+4)),hl
   870  0e67  3e7f                      LD      a,$7F
   871  0e69  325cf9                    LD      ($FFFF &(QUETAB+0*6+3)),a
   872  0e6c  3262f9                    LD      ($FFFF &(QUETAB+1*6+3)),a
   873  0e6f  3268f9                    LD      ($FFFF &(QUETAB+2*6+3)),a
   874                          
   875                          ; other settings
   876  0e72  3e27                      LD      a,39
   877  0e74  32aef3                    LD      (LINL40),a
   878  0e77  3e20                      LD      a,32                              ; Set to 29 after splash screen.
   879  0e79  32aff3                    LD      (LINL32),a
   880                          ;TODO: Rely on call to INIT32 instead.
   881  0e7c  3aaff3                    LD      a,(LINL32)
   882  0e7f  32b0f3                    LD      (LINLEN),a
   883  0e82  3e18                      LD      a,24
   884  0e84  32b1f3                    LD      (CRTCNT),a
   885                          
   886  0e87  3e04                      LD      a,$04
   887  0e89  32ebf3                    LD      (BDRCLR),a
   888  0e8c  32eaf3                    LD      (BAKCLR),a
   889  0e8f  3e0f                      LD      a,$0F
   890  0e91  32e9f3                    LD      (FORCLR),a
   891                          
   892  0e94  3ea0                      LD      a,$A0
   893  0e96  32e0f3                    LD      (RG1SAV),a
   894                          
   895  0e99  3ac1fc                    LD      a,(EXPTBL)
   896  0e9c  321ff9                    LD      (CGPNT),a
   897  0e9f  2a0400                    LD      hl,(4)
   898  0ea2  2220f9                    LD      (CGPNT+1),hl
   899                          
   900                          ; set up hook
   901  0ea5  3ec3                      LD      a,$c3
   902  0ea7  21cf0f                    LD      hl,chput
   903  0eaa  22e5fe                    LD      (H_OUTD+1),hl
   904  0ead  32e4fe                    LD      (H_OUTD),a
   905                          
   906  0eb0  c9                        RET
   907                          
   908                          
   909                          ;------------------------
   910                          ; wait routine
   911                          ; caution,already EI when call the rouine
   912                          ; B = frequency of loop
   913                          wait_b:
   914  0eb1  76                        HALT
   915  0eb2  10fd                      DJNZ    wait_b
   916  0eb4  c9                        RET
   917                          
   918                          ;------------------------
   919                          ;prn_text
   920                          ; HL = string with null termination
   921                          
   922                          prn_text:
   923  0eb5  3aaffc                    LD      a,(SCRMOD)
   924  0eb8  fe05                      CP      5
   925  0eba  3009                      JR      nc,prn_text_graph
   926                          prn_text_char:
   927  0ebc  7e                        LD      a,(hl)
   928  0ebd  b7                        OR      a
   929  0ebe  c8                        RET     z
   930  0ebf  cdcf0f                    CALL    chput
   931  0ec2  23                        INC     hl
   932  0ec3  18f7                      JR      prn_text_char
   933                          prn_text_graph:
   934  0ec5  7e                        LD      a,(hl)
   935  0ec6  b7                        OR      a
   936  0ec7  c8                        RET     z
   937  0ec8  dd218900                  LD      ix,$0089
   938  0ecc  cdce17                    CALL    extrom
   939  0ecf  23                        INC     hl
   940  0ed0  18f3                      JR      prn_text_graph
   941                          
   942                          ;--------------------------------
   943                          ; Determine bytes per line in the current text mode.
   944                          ; Input:   SCRMOD, LINLEN
   945                          ; Output:  C = number of bytes per line
   946                          ; Changes: AF
   947                          text_bytes_per_line:
   948  0ed2  0e20                      LD      c,32                              ; text32
   949  0ed4  3aaffc                    LD      a,(SCRMOD)
   950  0ed7  b7                        OR      a
   951  0ed8  c0                        RET     nz
   952  0ed9  0e28                      LD      c,40                              ; text40
   953  0edb  3ab0f3                    LD      a,(LINLEN)
   954  0ede  fe29                      CP      41
   955  0ee0  d8                        RET     c
   956  0ee1  0e50                      LD      c,80                              ; text80
   957  0ee3  c9                        RET
   958                          
   959                          ;--------------------------------
   960                          ; Calculate the VRAM address that corresponDS to the current cursor position.
   961                          ; Input:   CSRX, CSRY
   962                          ; Output:  HL = VRAM address
   963                          ; Changes: none
   964                          curs2hl:
   965  0ee4  c5                        PUSH    bc
   966  0ee5  f5                        PUSH    af
   967                          
   968  0ee6  cdd20e                    CALL    text_bytes_per_line
   969                          
   970                          ; Calculate left border.
   971  0ee9  3ab0f3                    LD      a,(LINLEN)
   972  0eec  ed44                      NEG
   973  0eee  81                        ADD     a,c                               ; A = bytes_per_line - LINLEN
   974  0eef  3c                        INC     a                                 ; round up
   975  0ef0  cb3f                      SRL     a                                 ; A = A / 2
   976  0ef2  6f                        LD      l,a                               ; L = size of left border
   977                          
   978                          ; Add X coordinate.
   979  0ef3  3addf3                    LD      a,(CSRX)
   980  0ef6  3d                        DEC     a                                 ; from 1-based to 0-based
   981  0ef7  85                        ADD     a,l                               ; add border size
   982  0ef8  6f                        LD      l,a
   983                          
   984                          ; Convert to 16-bits counters.
   985  0ef9  2600                      LD      h,0
   986  0efb  44                        LD      b,h
   987                          
   988                          ; Add Y * bytes_per_line.
   989  0efc  3adcf3                    LD      a,(CSRY)
   990  0eff  3d                        DEC     a                                 ; from 1-based to 0-based
   991                          curs2hl_mult_loop:
   992  0f00  cb3f                      SRL     a
   993  0f02  3001                      JR      nc,curs2hl_mult_skip
   994  0f04  09                        ADD     hl,bc
   995                          curs2hl_mult_skip:
   996  0f05  cb21                      SLA     c                                 ; BC = BC * 2
   997  0f07  cb10                      RL      b
   998  0f09  b7                        OR      a
   999  0f0a  20f4                      JR      nz,curs2hl_mult_loop
  1000                          
  1001                          ; Add base address.
  1002  0f0c  ed4b22f9                  LD      bc,(NAMBAS)
  1003  0f10  09                        ADD     hl,bc
  1004                          
  1005  0f11  f1                        POP     af
  1006  0f12  c1                        POP     bc
  1007  0f13  c9                        RET
  1008                          
  1009                          
  1010                          ;---------------------------
  1011                          ; Subroutines
  1012                          ;---------------------------
  1013                          
  1014                          ; the extensive descriptions were taken with permission from http://map.tni.nl/
  1015                          
  1016                          ;-------------------------------------
  1017                          ;0008h SYNCHR
  1018                          ;Function:  tests whether the character of [HL] is the specified character
  1019                          ;           if not, it generates SYNTAX ERROR, otherwise it goes to CHRGTR
  1020                          ;           (#0010)
  1021                          ;Input:     set the character to be tested in [HL] and the character to be
  1022                          ;           compared next to RST instruction which calls this routine (inline
  1023                          ;           parameter)
  1024                          ;Output:    HL is increased by one and A receives [HL], When the tested character
  1025                          ;           is numerical, the CY flag is set the end of the statement (00h or
  1026                          ;           3Ah) causes the Z flag to be set
  1027                          ;Registers: AF, HL
  1028                          ;NOTE: this implementation is still a stub!
  1029                          synchr:
  1030  0f14  e5                        PUSH    hl
  1031  0f15  f5                        PUSH    af
  1032  0f16  211c0f                    LD      hl,synchr_text
  1033                          ;                call    print_debug
  1034  0f19  f1                        POP     af
  1035  0f1a  e1                        POP     hl
  1036  0f1b  c9                        RET
  1037                          synchr_text:
  1038  0f1c  53594e43485200            DB      "SYNCHR",0
  1039                          
  1040                          ;-------------------------------------
  1041                          ; $0010 CHRGTR
  1042                          ; Read the next program character.
  1043                          ; In:      HL = pointer to the program text
  1044                          ; Out:     A  = the next program character
  1045                          ;          HL = pointer to the next program character
  1046                          ;          ZF = set if it's the end of statement
  1047                          ;          CF = set if it's a number
  1048                          ; Changes: AF, HL
  1049                          chrgtr:
  1050  0f23  cd48ff                    CALL    H_CHRG
  1051                          chrgtr_lp:
  1052  0f26  7e                        LD      a,(hl)
  1053  0f27  23                        INC     hl
  1054                          ; Check for the end of statement.
  1055  0f28  fe00                      CP      $00                               ; end of line
  1056  0f2a  c8                        RET     z
  1057  0f2b  fe3a                      CP      $3A                               ; statement separator
  1058  0f2d  c8                        RET     z
  1059                          ; Check for digits.
  1060  0f2e  fe30                      CP      '0'
  1061  0f30  3803                      JR      c,chrgtr_no_digit
  1062  0f32  fe3a                      CP      '9'+1
  1063  0f34  d8                        RET     c
  1064                          chrgtr_no_digit:
  1065                          ; Skip whitespace.
  1066  0f35  fe20                      CP      $20                               ; space
  1067  0f37  28ed                      JR      z,chrgtr_lp
  1068  0f39  fe09                      CP      $09                               ; tab
  1069  0f3b  28e9                      JR      z,chrgtr_lp
  1070                          ; Otherwise it's a normal program character.
  1071  0f3d  b7                        OR      a                                 ; Clear CF and ZF.
  1072  0f3e  c9                        RET
  1073                          
  1074                          ;-------------------------------------
  1075                          ; $0018 OUTDO
  1076                          ; Function : Output to current outputchannel (printer, diskfile, etc.)
  1077                          ; Input    : A  - PRTFIL, PRTFLG
  1078                          ; Remark   : Used in basic, in ML it's pretty difficult.
  1079                          outdo:
  1080  0f3f  f5                        PUSH    af
  1081  0f40  cde4fe                    CALL    H_OUTD                            ; H_OUTD does the real outputting
  1082  0f43  f1                        POP     af
  1083  0f44  c9                        RET
  1084                          
  1085                          ;--------------------------------
  1086                          ; $0020 DCOMPR
  1087                          ; Function : Compared HL to DE
  1088                          ; Output   : flags influenced like CP instruction
  1089                          ; Registers: A
  1090                          dcompr:
  1091  0f45  7c                        LD      a,h
  1092  0f46  ba                        CP      d
  1093  0f47  c0                        RET     nz
  1094  0f48  7d                        LD      a,l
  1095  0f49  bb                        CP      e
  1096  0f4a  c9                        RET
  1097                          
  1098                          ;--------------------------------
  1099                          ; $0028 GETYPR
  1100                          ; Function : Returns Type of DAC
  1101                          ; Input    : VALTYP(F663)
  1102                          ; Output   : C, Z, S
  1103                          ;       C       Z       S       Type    VALTYP
  1104                          ;       low     -       -       double  8
  1105                          ;       high    high    low     string  3
  1106                          ;       high    low     high    integer 2
  1107                          ;       high    low     low     float   4
  1108                          ; Registers: AF
  1109                          ;NOTE: this implementation is still a stub!
  1110                          getypr:
  1111  0f4b  e5                        PUSH    hl
  1112  0f4c  f5                        PUSH    af
  1113  0f4d  21530f                    LD      hl,getypr_text
  1114                          ;                call    print_debug
  1115  0f50  f1                        POP     af
  1116  0f51  e1                        POP     hl
  1117  0f52  c9                        RET
  1118                          getypr_text:
  1119  0f53  47455459505200            DB      "GETYPR",0
  1120                          
  1121                          ;--------------------------------
  1122                          ; $0030 CALLF
  1123                          callf:
  1124  0f5a  08                        EX      af,af'
  1125  0f5b  d9                        exx
  1126  0f5c  e1                        POP     hl                                ; Get data from return address.
  1127  0f5d  7e                        LD      a,(hl)
  1128  0f5e  23                        INC     hl
  1129  0f5f  5e                        LD      e,(hl)
  1130  0f60  23                        INC     hl
  1131  0f61  56                        LD      d,(hl)
  1132  0f62  23                        INC     hl
  1133  0f63  d5                        PUSH    de                                ; IX = call address
  1134  0f64  dde1                      POP     ix
  1135  0f66  f5                        PUSH    af                                ; IY = slot
  1136  0f67  fde1                      POP     iy
  1137  0f69  e5                        PUSH    hl                                ; Update return address.
  1138  0f6a  08                        EX      af,af'
  1139  0f6b  d9                        EXX
  1140  0f6c  c30524                    JP      calslt                            ; Perform inter-slot call.
  1141                          
  1142                          ;--------------------------------
  1143                          ; $003B INITIO
  1144                          ;Function:  Initialises the device
  1145                          ;Registers: All
  1146                          initio:
  1147                                  IF      KB_USE_PS2=1
  1148                                      CALL    KB_INITIALIZE
  1149                                  ENDIF
  1150  0f6f  1eff                      LD      e,$FF                             ; strobe off, triggers on
  1151  0f71  3e0f                      LD      a,$0F
  1152  0f73  cd7915                    CALL    wrtpsg
  1153                          ; TODO: What else must be initialized here?
  1154                          
  1155  0f76  c36115                    JP      gicini
  1156                          
  1157                          ;--------------------------------
  1158                          ; $003E INIFNK
  1159                          ; Function : Initialises the contents of the function keys
  1160                          ; Registers: All
  1161                          ;NOTE: this implementation is still a stub!
  1162                          inifnk:
  1163  0f79  e5                        PUSH    hl
  1164  0f7a  f5                        PUSH    af
  1165  0f7b  21810f                    LD      hl,inifnk_text
  1166                          ;                call    print_debug
  1167  0f7e  f1                        POP     af
  1168  0f7f  e1                        POP     hl
  1169  0f80  c9                        RET
  1170                          inifnk_text:
  1171  0f81  494e49464e4b00            DB      "INIFNK",0
  1172                          
  1173                          ;--------------------------------
  1174                          ; $0099 STRTMS
  1175                          ; Function : Tests whether the PLAY statement is being executed as a background
  1176                          ;            task. If not, begins to execute the PLAY statement
  1177                          ; Registers: All
  1178                          ;NOTE: this implementation is still a stub!
  1179                          strtms:
  1180  0f88  e5                        PUSH    hl
  1181  0f89  f5                        PUSH    af
  1182  0f8a  21900f                    LD      hl,strtms_text
  1183                          ;                call    print_debug
  1184  0f8d  f1                        POP     af
  1185  0f8e  e1                        POP     hl
  1186  0f8f  c9                        RET
  1187                          strtms_text:
  1188  0f90  535452544d5300            DB      "STRTMS",0
  1189                          
  1190                          
  1191                          ;--------------------------------
  1192                          ; $009C CHSNS
  1193                          ; Function : Tests the status of the keyboard buffer
  1194                          ; Output   : Z-flag set if buffer is filled
  1195                          ; Registers: AF
  1196                          chsns:
  1197  0f97  fb                        EI
  1198  0f98  e5                        PUSH    hl
  1199  0f99  d5                        PUSH    de
  1200  0f9a  2afaf3                    LD      hl,(GETPNT)
  1201  0f9d  ed5bf8f3                  LD      de,(PUTPNT)
  1202  0fa1  e7                        RST     20h
  1203  0fa2  3eff                      LD      a,$ff
  1204  0fa4  2001                      JR      nz,chsns_inbuf
  1205  0fa6  af                        XOR     a
  1206                          chsns_inbuf:
  1207  0fa7  d1                        POP     de
  1208  0fa8  e1                        POP     hl
  1209  0fa9  c9                        RET
  1210                          
  1211                          ;--------------------------------
  1212                          ; $009F CHGET
  1213                          ; Function : One character input (waiting)
  1214                          ; Output   : A  - ASCII-code of the input character
  1215                          ; Registers: AF
  1216                          
  1217                          chget:
  1218  0faa  cdc2fd                    CALL    H_CHGE
  1219  0fad  e5                        PUSH    hl
  1220  0fae  d5                        PUSH    de
  1221                          chget_wait:
  1222  0faf  2afaf3                    LD      hl,(GETPNT)
  1223  0fb2  ed5bf8f3                  LD      de,(PUTPNT)
  1224  0fb6  e7                        RST     20h
  1225  0fb7  2004                      JR      nz,chget_char
  1226  0fb9  fb                        EI
  1227  0fba  76                        HALT
  1228  0fbb  18f2                      JR      chget_wait
  1229                          chget_char:
  1230  0fbd  7e                        LD      a,(hl)                            ; HL = (GETPNT)
  1231  0fbe  f5                        PUSH    af
  1232  0fbf  23                        INC     hl
  1233                          ; See comment in keyint (below label key_store).
  1234  0fc0  7d                        LD      a,l
  1235                          ; Currently, tniASM doesn't support "&" and SjASM doesn't
  1236                          ; support "AND", so we have to hardcode the result.
  1237                          ;                cp      $00FF & (KEYBUF + 40)
  1238  0fc1  fe18                      CP      $18
  1239  0fc3  2003                      JR      nz,chget_nowrap
  1240  0fc5  21f0fb                    LD      hl,KEYBUF
  1241                          chget_nowrap:
  1242  0fc8  22faf3                    LD      (GETPNT),hl
  1243  0fcb  f1                        POP     af
  1244  0fcc  d1                        POP     de
  1245  0fcd  e1                        POP     hl
  1246  0fce  c9                        RET
  1247                          
  1248                          ;--------------------------------
  1249                          ; $00A2 CHPUT
  1250                          ; Input:   A = character code
  1251                          ; Changes: none
  1252                          
  1253                                  INCLUDE "chput.asm"
chput.asm:
     1                          ; $Id: chput.asm 525 2008-12-22 22:16:42Z mthuurne $
     2                          ; CHPUT routine for C-BIOS
     3                          ;
     4                          ; Copyright (c) 2006 Eric Boon.  All rights reserved.
     5                          ;
     6                          ; Redistribution and use in source and binary forms, with or without
     7                          ; modification, are permitted provided that the following conditions
     8                          ; are met:
     9                          ; 1. Redistributions of source code must retain the above copyright
    10                          ;    notice, this list of conditions and the following disclaimer.
    11                          ; 2. Redistributions in binary form must reproduce the above copyright
    12                          ;    notice, this list of conditions and the following disclaimer in the
    13                          ;    documentation and/or other materials provided with the distribution.
    14                          ;
    15                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    16                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    17                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    18                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    19                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    20                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    21                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    22                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    23                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    24                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    25                          ;
    26                          ; -------------------------------------
    27                          ; $00A2 CHPUT
    28                          ; Function : Output character in A to screen
    29                          ; Input    : A = character code
    30                          ; Output   : -
    31                          ; Changes  : -
    32                          
    33                          chput:
    34  0fcf  e5                        PUSH    hl                                ; save all regs
    35  0fd0  d5                        PUSH    de
    36  0fd1  c5                        PUSH    bc
    37  0fd2  f5                        PUSH    af
    38  0fd3  cda4fd                    CALL    H_CHPU                            ; call hook
    39  0fd6  3aaffc                    LD      a,(SCRMOD)                        ; this only works in
    40  0fd9  fe02                      CP      2                                 ; screen modes 0 and 1
    41  0fdb  3013                      JR      nc,chput_exit
    42  0fdd  f1                        POP     af                                ; restore char to put in A
    43  0fde  f5                        PUSH    af
    44  0fdf  cd1f12                    CALL    chput_remove_cursor
    45  0fe2  f1                        POP     af                                ; restore char to put in A
    46  0fe3  f5                        PUSH    af
    47  0fe4  cdf50f                    CALL    chput_decode_char
    48  0fe7  cd3412                    CALL    chput_restore_cursor
    49  0fea  3addf3                    LD      a,(CSRX)                          ; CSRX -> TTYPOS
    50  0fed  3261f6                    LD      (TTYPOS),a
    51                          chput_exit:
    52  0ff0  f1                        POP     af
    53  0ff1  c1                        POP     bc
    54  0ff2  d1                        POP     de
    55  0ff3  e1                        POP     hl
    56  0ff4  c9                        RET
    57                          
    58                          ; -- decode character in A
    59                          chput_decode_char:
    60  0ff5  cd2c13                    CALL    cnvchr                            ; Graphic character?
    61  0ff8  d0                        RET     nc                                ; NC  -> graphic extension hdr
    62  0ff9  2812                      JR      z,chput_putchar                   ; C,Z -> graphic character
    63  0ffb  f5                        PUSH    af                                ; (C,NZ -> normal char)
    64  0ffc  3aa7fc                    LD      a,(ESCCNT)                        ; ESC sequence?
    65  0fff  b7                        OR      a
    66  1000  c2d810                    JP      nz,chput_escape
    67  1003  f1                        POP     af
    68  1004  fe20                      CP      $20                               ; Control code?
    69  1006  382a                      JR      c,chput_ctrl_search
    70  1008  fe7f                      CP      127                               ; DEL?
    71  100a  ca1112                    JP      z,chput_erase
    72                          
    73                          ; -- print a normal character and move cursor to next position
    74                          chput_putchar:
    75  100d  cde40e                    CALL    curs2hl                           ; output character to screen
    76  1010  cd4b02                    CALL    wrtvrm
    77                          
    78  1013  2adcf3                    LD      hl,(CSRY)                         ; h = (CSRX), l = (CSRY)
    79  1016  3ab0f3                    LD      a,(LINLEN)
    80  1019  24                        INC     h
    81  101a  bc                        CP      h
    82  101b  3804                      JR      c,chput_continue_line
    83  101d  22dcf3                    LD      (CSRY),hl
    84  1020  c9                        RET
    85                          
    86                          chput_continue_line:
    87  1021  11b1fb                    LD      de,LINTTB-1                       ; make logical line continue
    88  1024  2600                      LD      h,0
    89  1026  19                        ADD     hl,de
    90  1027  af                        XOR     a
    91  1028  77                        LD      (hl),a
    92                          
    93  1029  2adcf3                    LD      hl,(CSRY)                         ; move cursor to start of
    94  102c  cd8710                    CALL    chput_ctrl_cr                     ; new line
    95  102f  c34910                    JP      chput_ctrl_lf
    96                          
    97                          ; -- Handle control code
    98                          chput_ctrl_search:
    99  1032  060c                      LD      b,12
   100  1034  21a312                    LD      hl,chput_ctrl_table
   101  1037  c30802                    JP      search_table
   102                          
   103                          ; -- Fill with spaces until next TAB stop
   104                          chput_ctrl_tab:
   105  103a  3e20                      LD      a,$20
   106  103c  cd0d10                    CALL    chput_putchar
   107  103f  3addf3                    LD      a,(CSRX)
   108  1042  e607                      AND     7
   109  1044  fe01                      CP      1
   110  1046  20f2                      JR      nz,chput_ctrl_tab
   111  1048  c9                        RET
   112                          
   113                          ; -- Line Feed.
   114                          chput_ctrl_lf:
   115  1049  2adcf3                    LD      hl,(CSRY)
   116  104c  3ab1f3                    LD      a,(CRTCNT)
   117  104f  2c                        INC     l
   118  1050  bd                        CP      l
   119  1051  3009                      JR      nc,chput_ctrl_lf_done
   120                          
   121  1053  e5                        PUSH    hl
   122  1054  cd6010                    CALL    chput_ctrl_home                   ; home cursor
   123  1057  cdab11                    CALL    chput_esc_m                       ; delete top line (scroll!)
   124  105a  e1                        POP     hl
   125  105b  2d                        DEC     l
   126                          
   127                          chput_ctrl_lf_done:
   128  105c  22dcf3                    LD      (CSRY),hl
   129  105f  c9                        RET
   130                          
   131                          ; -- Home cursor
   132                          chput_ctrl_home:
   133                          chput_esc_h:
   134  1060  210101                    LD      hl,$0101
   135  1063  22dcf3                    LD      (CSRY),hl
   136  1066  c9                        RET
   137                          
   138                          ; -- Form Feed / Cls
   139                          chput_ctrl_ff:  EQU cls
   140                          chput_esc_e:    EQU cls
   141                          chput_esc_j:    EQU cls
   142                          
   143                          ; -- Clear till end of screen
   144                          chput_esc_jj:
   145  1067  cd4911                    CALL    chput_esc_k                       ; clear till end of line
   146  106a  2adcf3                    LD      hl,(CSRY)                         ; save current cursor pos
   147  106d  e5                        PUSH    hl
   148  106e  cd8710                    CALL    chput_ctrl_cr                     ; move to line start
   149                          chput_esc_jj_loop:
   150  1071  3adcf3                    LD      a,(CSRY)                          ; while no at end of screen
   151  1074  21b1f3                    LD      hl,CRTCNT
   152  1077  be                        CP      (hl)
   153  1078  3008                      JR      nc,chput_esc_jj_done
   154  107a  cd4910                    CALL    chput_ctrl_lf                     ;   move to next line
   155  107d  cd4911                    CALL    chput_esc_k                       ;   clear till end of line
   156  1080  18ef                      JR      chput_esc_jj_loop                 ; loop
   157                          chput_esc_jj_done:
   158  1082  e1                        POP     hl                                ; restore cursor pos
   159  1083  22dcf3                    LD      (CSRY),hl
   160  1086  c9                        RET
   161                          
   162                          ; -- Carriage return
   163                          chput_ctrl_cr:
   164  1087  3e01                      LD      a,1
   165  1089  32ddf3                    LD      (CSRX),a
   166  108c  c9                        RET
   167                          
   168                          ; -- Escape
   169                          chput_ctrl_esc:
   170  108d  3eff                      LD      a,$FF
   171  108f  32a7fc                    LD      (ESCCNT),a
   172  1092  c9                        RET
   173                          
   174                          ; -- Cursor right
   175                          chput_ctrl_right:
   176  1093  3addf3                    LD      a,(CSRX)
   177  1096  21b0f3                    LD      hl,LINLEN
   178  1099  be                        CP      (hl)
   179  109a  3003                      JR      nc,chput_ctrl_right_next
   180  109c  3c                        INC     a
   181  109d  181f                      JR      chput_right_left_ok
   182                          chput_ctrl_right_next:
   183  109f  3adcf3                    LD      a,(CSRY)
   184  10a2  21b1f3                    LD      hl,CRTCNT
   185  10a5  be                        CP      (hl)
   186  10a6  d0                        RET     nc
   187  10a7  3c                        INC     a
   188  10a8  32dcf3                    LD      (CSRY),a
   189  10ab  18da                      JR      chput_ctrl_cr
   190                          
   191                          ; -- Cursor left
   192                          chput_ctrl_bs:
   193                          chput_ctrl_left:
   194  10ad  3addf3                    LD      a,(CSRX)
   195  10b0  3d                        DEC     a
   196  10b1  200b                      JR      nz,chput_right_left_ok
   197  10b3  3adcf3                    LD      a,(CSRY)
   198  10b6  3d                        DEC     a
   199  10b7  c8                        RET     z
   200  10b8  32dcf3                    LD      (CSRY),a
   201  10bb  3ab0f3                    LD      a,(LINLEN)
   202                          chput_right_left_ok:
   203  10be  32ddf3                    LD      (CSRX),a
   204  10c1  c9                        RET
   205                          
   206                          ; -- Cursor up
   207                          chput_ctrl_up:
   208                          chput_esc_a:
   209  10c2  3adcf3                    LD      a,(CSRY)
   210  10c5  3d                        DEC     a
   211  10c6  c8                        RET     z
   212  10c7  32dcf3                    LD      (CSRY),a
   213  10ca  c9                        RET
   214                          
   215                          ; -- Cursor down
   216                          chput_ctrl_down:
   217                          chput_esc_b:
   218  10cb  3adcf3                    LD      a,(CSRY)
   219  10ce  21b1f3                    LD      hl,CRTCNT
   220  10d1  be                        CP      (hl)
   221  10d2  d0                        RET     nc
   222  10d3  3c                        INC     a
   223  10d4  32dcf3                    LD      (CSRY),a
   224  10d7  c9                        RET
   225                          
   226                          ; -- Handle ESC mode (ESCCNT in A and != 0)
   227                          chput_escape:
   228  10d8  47                        LD      b,a                               ; b := (ESCCNT)
   229  10d9  3c                        INC     a                                 ; (ESCCNT) == -1 ?
   230  10da  200c                      JR      nz,chput_escape_1
   231  10dc  32a7fc                    LD      (ESCCNT),a
   232  10df  f1                        POP     af                                ; restore character in A
   233  10e0  060f                      LD      b,15                              ; search in table
   234  10e2  21c712                    LD      hl,chput_esc_table
   235  10e5  c30802                    JP      search_table
   236                          
   237                          chput_escape_1:                                   ; ----------------------------
   238  10e8  f1                        POP     af
   239  10e9  1004                      DJNZ    chput_escape_2
   240                          
   241                          ; -- ESCCNT == 1: 'ESC x <n>'
   242  10eb  0e00                      LD      c,0                               ; CSTYLE/CSRSW := 0
   243  10ed  1804                      JR      chput_esc_xy
   244                          
   245                          chput_escape_2:                                   ; ----------------------------
   246  10ef  1018                      DJNZ    chput_escape_3
   247                          
   248                          ; -- ESCCNT == 2: 'ESC y <n>'
   249  10f1  0e01                      LD      c,1                               ; CSTYLE/CSRSW := 1
   250                          
   251                          chput_esc_xy:
   252  10f3  fe34                      CP      '4'
   253  10f5  2806                      JR      z,chput_esc_xy_4
   254  10f7  fe35                      CP      '5'
   255  10f9  2808                      JR      z,chput_esc_xy_5
   256  10fb  182e                      JR      chput_escape_reset
   257                          chput_esc_xy_4:
   258  10fd  79                        LD      a,c
   259  10fe  32aafc                    LD      (CSTYLE),a
   260  1101  1828                      JR      chput_escape_reset
   261                          chput_esc_xy_5:
   262  1103  79                        LD      a,c
   263  1104  32a9fc                    LD      (CSRSW),a
   264  1107  1822                      JR      chput_escape_reset
   265                          
   266                          chput_escape_3:                                   ; ----------------------------
   267  1109  1008                      DJNZ    chput_escape_4
   268                          
   269                          ; -- ESCCNT == 3: 'ESC Y <n> <m>'
   270  110b  061f                      LD      b,$1F
   271  110d  90                        SUB     b
   272  110e  32ddf3                    LD      (CSRX),a
   273  1111  1818                      JR      chput_escape_reset
   274                          
   275                          chput_escape_4:                                   ; ----------------------------
   276  1113  1016                      DJNZ    chput_escape_reset
   277                          
   278                          ; -- ESCCNT == 4: 'ESC Y <n>'
   279  1115  061f                      LD      b,$1F
   280  1117  90                        SUB     b
   281  1118  32dcf3                    LD      (CSRY),a
   282  111b  3e03                      LD      a,3
   283  111d  180d                      JR      chput_escape_set
   284                          
   285                          ; -- ESCCNT := 1
   286                          chput_esc_x:
   287  111f  3e01                      LD      a,1
   288  1121  1809                      JR      chput_escape_set
   289                          
   290                          ; -- ESCCNT := 2
   291                          chput_esc_y:
   292  1123  3e02                      LD      a,2
   293  1125  1805                      JR      chput_escape_set
   294                          
   295                          ; -- ESCCNT := 4
   296                          chput_esc_yy:
   297  1127  3e04                      LD      a,4
   298  1129  1801                      JR      chput_escape_set
   299                          
   300                          chput_escape_reset:
   301  112b  af                        XOR     a
   302                          chput_escape_set:
   303  112c  32a7fc                    LD      (ESCCNT),a
   304  112f  c9                        RET
   305                          
   306                          ; -- Cursor right, no wrap
   307                          chput_esc_c:
   308  1130  3addf3                    LD      a,(CSRX)
   309  1133  21b0f3                    LD      hl,LINLEN
   310  1136  be                        CP      (hl)
   311  1137  d0                        RET     nc
   312  1138  3c                        INC     a
   313  1139  32ddf3                    LD      (CSRX),a
   314  113c  c9                        RET
   315                          
   316                          ; -- Cursor left, no wrap
   317                          chput_esc_d:
   318  113d  3addf3                    LD      a,(CSRX)
   319  1140  3d                        DEC     a
   320  1141  c8                        RET     z
   321  1142  32ddf3                    LD      (CSRX),a
   322  1145  c9                        RET
   323                          
   324                          ; -- clear line
   325                          chput_esc_l:
   326  1146  cd8710                    CALL    chput_ctrl_cr
   327                          
   328                          ; -- Clear till end of line
   329                          chput_esc_k:
   330  1149  21b1fb                    LD      hl,LINTTB-1                       ; update LINTTB
   331  114c  3adcf3                    LD      a,(CSRY)
   332  114f  5f                        LD      e,a
   333  1150  1600                      LD      d,0
   334  1152  19                        ADD     hl,de
   335                          ; a != 0, which is OK
   336  1153  77                        LD      (hl),a
   337                          
   338  1154  3ab0f3                    LD      a,(LINLEN)
   339  1157  3c                        INC     a                                 ; because CSRX is 1-based
   340  1158  21ddf3                    LD      hl,CSRX
   341  115b  96                        SUB     (hl)
   342  115c  4f                        LD      c,a
   343  115d  0600                      LD      b,0
   344  115f  3e20                      LD      a,32
   345  1161  cde40e                    CALL    curs2hl
   346  1164  c36b02                    JP      filvrm
   347                          
   348                          ; -- Insert line
   349                          chput_esc_ll:
   350  1167  cd8710                    CALL    chput_ctrl_cr                     ; move to start of line
   351  116a  2adcf3                    LD      hl,(CSRY)                         ; save current cursor pos
   352  116d  e5                        PUSH    hl
   353  116e  45                        LD      b,l
   354  116f  3ab1f3                    LD      a,(CRTCNT)
   355  1172  32dcf3                    LD      (CSRY),a
   356  1175  90                        SUB     b
   357  1176  47                        LD      b,a
   358  1177  04                        INC     b
   359  1178  3adcf3                    LD      a,(CSRY)
   360  117b  180e                      JR      chput_esc_ll_loop_end
   361                          
   362                          chput_esc_ll_loop:
   363  117d  cde40e                    CALL    curs2hl
   364  1180  eb                        EX      de,hl
   365  1181  3d                        DEC     a
   366  1182  32dcf3                    LD      (CSRY),a
   367  1185  cde40e                    CALL    curs2hl
   368  1188  cde911                    CALL    chput_copy_line
   369                          chput_esc_ll_loop_end:
   370  118b  10f0                      DJNZ    chput_esc_ll_loop
   371                          
   372  118d  e1                        POP     hl                                ; restore cursor position
   373  118e  22dcf3                    LD      (CSRY),hl
   374  1191  2600                      LD      h,0
   375  1193  3ab1f3                    LD      a,(CRTCNT)                        ; update LINTTB
   376  1196  57                        LD      d,a                               ; DE := (CRTCNT)
   377  1197  1e00                      LD      e,0
   378  1199  95                        SUB     l                                 ; BC := (CRTCNT) - (CSRY) - 1
   379  119a  3d                        DEC     a
   380  119b  4f                        LD      c,a
   381  119c  0600                      LD      b,0
   382  119e  21b1fb                    LD      hl,LINTTB-1                       ; DE := LINTTB + (CRTCNT)
   383  11a1  19                        ADD     hl,de
   384  11a2  eb                        EX      de,hl
   385  11a3  62                        LD      h,d                               ; HL := DE - 1
   386  11a4  6b                        LD      l,e
   387  11a5  2b                        DEC     hl
   388  11a6  edb8                      LDDR
   389  11a8  c34911                    JP      chput_esc_k
   390                          
   391                          ; -- Delete line (and scroll rest up)
   392                          chput_esc_m:
   393  11ab  cd8710                    CALL    chput_ctrl_cr                     ; move to start of line
   394  11ae  2adcf3                    LD      hl,(CSRY)
   395  11b1  e5                        PUSH    hl                                ; save cursor pos
   396  11b2  45                        LD      b,l
   397  11b3  3ab1f3                    LD      a,(CRTCNT)
   398  11b6  90                        SUB     b
   399  11b7  47                        LD      b,a
   400  11b8  04                        INC     b
   401  11b9  3adcf3                    LD      a,(CSRY)
   402  11bc  180e                      JR      chput_esc_m_loop_end
   403                          
   404                          chput_esc_m_loop:
   405  11be  cde40e                    CALL    curs2hl                           ;   Copy 1 line:
   406  11c1  eb                        EX      de,hl                             ;     de = dest in VRAM
   407  11c2  3c                        INC     a                                 ;     next line
   408  11c3  32dcf3                    LD      (CSRY),a
   409  11c6  cde40e                    CALL    curs2hl                           ;     hl = src in VRAM
   410  11c9  cde911                    CALL    chput_copy_line
   411                          chput_esc_m_loop_end:
   412  11cc  10f0                      DJNZ    chput_esc_m_loop                  ; endloop
   413                          
   414  11ce  cd4911                    CALL    chput_esc_k                       ; clear till end of line
   415  11d1  e1                        POP     hl                                ; restore cursor position
   416  11d2  22dcf3                    LD      (CSRY),hl
   417                          
   418  11d5  2600                      LD      h,0                               ; update LINTTB
   419  11d7  3ab1f3                    LD      a,(CRTCNT)                        ; BC := (CRTCNT) - (CRSY) - 1
   420  11da  95                        SUB     l
   421  11db  3d                        DEC     a
   422  11dc  4f                        LD      c,a
   423  11dd  0600                      LD      b,0
   424  11df  11b1fb                    LD      de,LINTTB-1                       ; DE := LINTTB + (CSRY)
   425  11e2  19                        ADD     hl,de
   426  11e3  54                        LD      d,h
   427  11e4  5d                        LD      e,l
   428  11e5  23                        INC     hl                                ; HL := DE + 1
   429  11e6  edb0                      LDIR
   430  11e8  c9                        RET
   431                          
   432                          ; -- Copy line: from HL to DE
   433                          chput_copy_line:
   434  11e9  f5                        PUSH    af
   435  11ea  c5                        PUSH    bc
   436  11eb  0600                      LD      b,0
   437  11ed  3ab0f3                    LD      a,(LINLEN)
   438  11f0  4f                        LD      c,a
   439                          
   440                                  IF      MODEL_MSX != MODEL_MSX1
   441                                      CP      41
   442                                      JR      c,chput_copy_line_2
   443                                      LD      c,40
   444                                      CALL    chput_copy_line_copy
   445                                      LD      a,(LINLEN)
   446                                      SUB     40
   447                                      LD      c,a
   448                          chput_copy_line_2:
   449                                  ENDIF
   450                          
   451  11f1  cdf711                    CALL    chput_copy_line_copy
   452  11f4  c1                        POP     bc
   453  11f5  f1                        POP     af
   454  11f6  c9                        RET
   455                          
   456                          chput_copy_line_copy:
   457  11f7  e5                        PUSH    hl
   458  11f8  d5                        PUSH    de
   459  11f9  c5                        PUSH    bc
   460  11fa  1118fc                    LD      de,LINWRK
   461  11fd  cd8002                    CALL    ldirmv
   462  1200  c1                        POP     bc
   463  1201  d1                        POP     de
   464  1202  d5                        PUSH    de
   465  1203  c5                        PUSH    bc
   466  1204  2118fc                    LD      hl,LINWRK
   467  1207  cd9702                    CALL    ldirvm
   468  120a  c1                        POP     bc
   469  120b  e1                        POP     hl
   470  120c  09                        ADD     hl,bc
   471  120d  eb                        EX      de,hl
   472  120e  e1                        POP     hl
   473  120f  09                        ADD     hl,bc
   474  1210  c9                        RET
   475                          
   476                          ; -- Erase
   477                          chput_erase:
   478  1211  3addf3                    LD      a,(CSRX)
   479  1214  fe01                      CP      1
   480  1216  c8                        RET     z
   481  1217  3e20                      LD      a,32
   482  1219  cd0d10                    CALL    chput_putchar
   483  121c  c3ad10                    JP      chput_ctrl_left
   484                          
   485                          ; -- disable cursor
   486                          chput_remove_cursor:
   487  121f  3aa9fc                    LD      a,(CSRSW)                         ; Cursor visible?
   488  1222  fe01                      CP      1
   489  1224  c0                        RET     nz
   490  1225  3aaffc                    LD      a,(SCRMOD)                        ; Are we in text mode?
   491  1228  fe02                      CP      2
   492  122a  d0                        RET     nc
   493                          
   494  122b  3accfb                    LD      a,(CURSAV)                        ; get saved character
   495  122e  cde40e                    CALL    curs2hl                           ; and drop it at the
   496  1231  c34b02                    JP      wrtvrm
   497                          
   498                          ; -- enable cursor
   499                          chput_restore_cursor:
   500  1234  3aa9fc                    LD      a,(CSRSW)                         ; Cursor visible?
   501  1237  fe01                      CP      1
   502  1239  c0                        RET     nz
   503  123a  3aaffc                    LD      a,(SCRMOD)
   504  123d  fe02                      CP      2
   505  123f  d0                        RET     nc
   506                          
   507  1240  cde40e                    CALL    curs2hl                           ; get character at cursor
   508  1243  cd4502                    CALL    rdvrm                             ; and store at CURSAV
   509  1246  32ccfb                    LD      (CURSAV),a
   510                          
   511  1249  a7                        AND     a                                 ; reset carry
   512  124a  1600                      LD      d,0                               ; de := 8 * a
   513  124c  5f                        LD      e,a
   514  124d  cb13                      RL      e
   515  124f  cb12                      RL      d
   516  1251  cb13                      RL      e
   517  1253  cb12                      RL      d
   518  1255  cb13                      RL      e
   519  1257  cb12                      RL      d
   520  1259  af                        XOR     a                                 ; get pattern table address
   521  125a  21affc                    LD      hl,SCRMOD
   522  125d  be                        CP      (hl)
   523  125e  2005                      JR      nz,chput_restore_cursor_t32
   524                          
   525  1260  2ab7f3                    LD      hl,(TXTCGP)
   526  1263  1803                      JR      chput_restore_cursor_getpattern
   527                          
   528                          chput_restore_cursor_t32:
   529  1265  2ac1f3                    LD      hl,(T32CGP)
   530                          
   531                          chput_restore_cursor_getpattern:
   532  1268  e5                        PUSH    hl
   533  1269  19                        ADD     hl,de                             ; add offset of character
   534  126a  1118fc                    LD      de,LINWRK                         ; copy pattern to LINWRK
   535  126d  010800                    LD      bc,8
   536  1270  cd8002                    CALL    ldirmv
   537                          
   538  1273  3aaafc                    LD      a,(CSTYLE)                        ; depending on CSTYLE
   539  1276  fe00                      CP      0
   540  1278  2007                      JR      nz,chput_restore_cursor_ins
   541  127a  2118fc                    LD      hl,LINWRK                         ; invert the complete pattern
   542  127d  0608                      LD      b,8
   543  127f  1805                      JR      chput_restore_cursor_invert
   544                          chput_restore_cursor_ins:
   545  1281  211efc                    LD      hl,LINWRK+6                       ; or only the lower 2 lines
   546  1284  0602                      LD      b,2
   547                          
   548                          chput_restore_cursor_invert:
   549  1286  7e                        LD      a,(hl)                            ; invert!
   550  1287  2f                        CPL
   551  1288  77                        LD      (hl),a
   552  1289  23                        INC     hl
   553  128a  10fa                      DJNZ    chput_restore_cursor_invert
   554  128c  e1                        POP     hl                                ; copy inverted pattern to
   555  128d  11f807                    LD      de,255*8                          ; pattern 255
   556  1290  19                        ADD     hl,de
   557  1291  eb                        EX      de,hl
   558  1292  2118fc                    LD      hl,LINWRK
   559  1295  010800                    LD      bc,8
   560  1298  cd9702                    CALL    ldirvm
   561                          
   562  129b  cde40e                    CALL    curs2hl                           ; place char 255 at cursor pos
   563  129e  3eff                      LD      a,255
   564  12a0  c34b02                    JP      wrtvrm
   565                          
   566                          ; -- Control character search table
   567                          chput_ctrl_table:
   568  12a3  07                        DB      7
   569  12a4  9b14                      DW      beep                              ; chput_ctrl_beep
   570  12a6  08                        DB      8
   571  12a7  ad10                      DW      chput_ctrl_bs
   572  12a9  09                        DB      9
   573  12aa  3a10                      DW      chput_ctrl_tab
   574  12ac  0a                        DB      10
   575  12ad  4910                      DW      chput_ctrl_lf
   576  12af  0b                        DB      11
   577  12b0  6010                      DW      chput_ctrl_home
   578  12b2  0c                        DB      12
   579  12b3  ac07                      DW      chput_ctrl_ff
   580  12b5  0d                        DB      13
   581  12b6  8710                      DW      chput_ctrl_cr
   582  12b8  1b                        DB      27
   583  12b9  8d10                      DW      chput_ctrl_esc
   584  12bb  1c                        DB      28
   585  12bc  9310                      DW      chput_ctrl_right
   586  12be  1d                        DB      29
   587  12bf  ad10                      DW      chput_ctrl_left
   588  12c1  1e                        DB      30
   589  12c2  c210                      DW      chput_ctrl_up
   590  12c4  1f                        DB      31
   591  12c5  cb10                      DW      chput_ctrl_down
   592                          
   593                          ; -- Escape character search table
   594                          chput_esc_table:
   595  12c7  6a                        DB      'j'
   596  12c8  ac07                      DW      chput_esc_j
   597  12ca  45                        DB      'E'
   598  12cb  ac07                      DW      chput_esc_e
   599  12cd  4b                        DB      'K'
   600  12ce  4911                      DW      chput_esc_k
   601  12d0  4a                        DB      'J'
   602  12d1  6710                      DW      chput_esc_jj
   603  12d3  6c                        DB      'l'
   604  12d4  4611                      DW      chput_esc_l
   605  12d6  4c                        DB      'L'
   606  12d7  6711                      DW      chput_esc_ll
   607  12d9  4d                        DB      'M'
   608  12da  ab11                      DW      chput_esc_m
   609  12dc  59                        DB      'Y'
   610  12dd  2711                      DW      chput_esc_yy
   611  12df  41                        DB      'A'
   612  12e0  c210                      DW      chput_esc_a
   613  12e2  42                        DB      'B'
   614  12e3  cb10                      DW      chput_esc_b
   615  12e5  43                        DB      'C'
   616  12e6  3011                      DW      chput_esc_c
   617  12e8  44                        DB      'D'
   618  12e9  3d11                      DW      chput_esc_d
   619  12eb  48                        DB      'H'
   620  12ec  6010                      DW      chput_esc_h
   621  12ee  78                        DB      'x'
   622  12ef  1f11                      DW      chput_esc_x
   623  12f1  79                        DB      'y'
   624  12f2  2311                      DW      chput_esc_y
   625                          
   626                          ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
   627                          
main.asm:
  1254                          
  1255                          ;--------------------------------
  1256                          ; $00A5 LPTOUT
  1257                          ; Function : SenDS one character to printer
  1258                          ; Input    : A  - ASCII-code of character to send
  1259                          ; Output   : C-flag set if failed
  1260                          ; Registers: F
  1261                          
  1262                          lptout:
  1263  12f4  cdb6ff                    CALL    H_LPTO
  1264  12f7  f5                        PUSH    af
  1265                          lptout_wait:
  1266  12f8  cd7914                    CALL    breakx
  1267  12fb  3808                      JR      c,lptout_abort
  1268  12fd  cd1e13                    CALL    lptstt
  1269  1300  28f6                      JR      z,lptout_wait
  1270  1302  f1                        POP     af
  1271  1303  180c                      JR      lptout_write
  1272                          
  1273                          lptout_abort:
  1274  1305  3e0d                      LD      a,13
  1275  1307  cd1113                    CALL    lptout_write
  1276  130a  af                        XOR     a
  1277  130b  3215f4                    LD      (LPTPOS),a
  1278  130e  f1                        POP     af
  1279  130f  37                        SCF
  1280  1310  c9                        RET
  1281                          
  1282                          lptout_write:
  1283  1311  f5                        PUSH    af
  1284  1312  d301                      OUT     (PRN_DATA),a
  1285  1314  3e00                      LD      a,0
  1286  1316  d301                      OUT     (PRN_STAT),a
  1287  1318  2f                        CPL
  1288  1319  d301                      OUT     (PRN_STAT),a
  1289  131b  f1                        POP     af
  1290  131c  a7                        AND     a
  1291  131d  c9                        RET
  1292                          
  1293                          ;--------------------------------
  1294                          ; $00A8 LPTSTT
  1295                          ; Function : Tests printer status
  1296                          ; Output   : A  - #FF and Z-flag reset if printer is ready
  1297                          ;                 #00 and Z-flag set if not ready
  1298                          ; Registers: AF
  1299                          
  1300                          lptstt:
  1301  131e  cdbbff                    CALL    H_LPTS
  1302  1321  db01                      IN      a,(PRN_STAT)
  1303  1323  1f                        RRA
  1304  1324  1f                        RRA
  1305  1325  3eff                      LD      a,$FF
  1306  1327  3001                      JR      nc,lptstt_end
  1307  1329  2f                        CPL
  1308                          lptstt_end:
  1309  132a  a7                        AND     a
  1310  132b  c9                        RET
  1311                          
  1312                          ;--------------------------------
  1313                          ; $00AB CNVCHR
  1314                          ; Function : tests for the graphic header and transforms the code
  1315                          ; Input    : A  - charactercode
  1316                          ;            GRPHED(FCA6): indicates if previous char was an extension code
  1317                          ; Output:                               C-flag  Z-flag  A
  1318                          ;       if byte is extension byte       low     high    1
  1319                          ;       if byte is normal ASCII         high    low     ASCII code
  1320                          ;       if byte is graphical extension  high    high    extension code
  1321                          ;       GRPHED is updated
  1322                          ; Registers: AF
  1323                          
  1324                          cnvchr:
  1325  132c  e5                        PUSH    hl
  1326  132d  f5                        PUSH    af
  1327  132e  21a6fc                    LD      hl,GRPHED
  1328  1331  af                        XOR     a
  1329  1332  be                        CP      (hl)
  1330  1333  77                        LD      (hl),a                            ; reset GRPHED in advance
  1331  1334  2008                      JR      nz,cnvchr_handlegfx
  1332                          
  1333  1336  f1                        POP     af                                ; we're not in graphic mode
  1334  1337  fe01                      CP      1                                 ; graphic header?
  1335  1339  2013                      JR      nz,cnvchr_normal
  1336                          
  1337  133b  77                        LD      (hl),a                            ; yes! -> Set GRPHED
  1338  133c  1811                      JR      cnvchr_normal_exit                ; we've got NC and Z - perfect!
  1339                          
  1340                          cnvchr_handlegfx:
  1341  133e  f1                        POP     af
  1342  133f  fe40                      CP      $40
  1343  1341  3809                      JR      c,cnvchr_nogfx
  1344  1343  fe60                      CP      $60
  1345  1345  3005                      JR      nc,cnvchr_nogfx
  1346  1347  d640                      SUB     $40                               ; graphic char
  1347  1349  bf                        CP      a                                 ; set Z (and NC)
  1348  134a  1802                      JR      cnvchr_normal
  1349                          
  1350                          cnvchr_nogfx:
  1351  134c  fe50                      CP      $50                               ; A is definitely not #50
  1352                                                                            ; so this sets NZ :-)
  1353                          cnvchr_normal:
  1354  134e  37                        SCF                                       ; NZ/Z already ok, now set C
  1355                          cnvchr_normal_exit:
  1356  134f  e1                        POP     hl
  1357  1350  c9                        RET
  1358                          
  1359                                  INCLUDE "inlin.asm"
inlin.asm:
     1                          ; $Id: inlin.asm 525 2008-12-22 22:16:42Z mthuurne $
     2                          ; INLIN/PINLIN/QINLIN routines for C-BIOS
     3                          ;
     4                          ; Copyright (c) 2007 Eric Boon.  All rights reserved.
     5                          ;
     6                          ; Redistribution and use in source and binary forms, with or without
     7                          ; modification, are permitted provided that the following conditions
     8                          ; are met:
     9                          ; 1. Redistributions of source code must retain the above copyright
    10                          ;    notice, this list of conditions and the following disclaimer.
    11                          ; 2. Redistributions in binary form must reproduce the above copyright
    12                          ;    notice, this list of conditions and the following disclaimer in the
    13                          ;    documentation and/or other materials provided with the distribution.
    14                          ;
    15                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    16                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    17                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    18                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    19                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    20                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    21                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    22                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    23                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    24                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    25                          ;
    26                          ;--------------------------------
    27                          ; $00AE PINLIN
    28                          ; Function : Stores in the specified buffer the character codes input
    29                          ;           until the return key or STOP key is pressed
    30                          ; Output   : HL - for the starting address of the buffer -1
    31                          ;            C-flag set when it ends with the STOP key
    32                          ; Registers: All
    33                          ; TODO: call H_PINL
    34                          pinlin:
    35  1351  cddbfd                    CALL    H_PINL
    36  1354  3aaaf6                    LD      a,(AUTFLG)                        ; If AUTO is active
    37  1357  a7                        AND     a
    38  1358  ca6f13                    JP      z,inlin                           ; then start line input
    39  135b  3e01                      LD      a,1                               ; else set cursor
    40  135d  32ddf3                    LD      (CSRX),a                          ;    to left border first
    41  1360  c36f13                    JP      inlin                             ;    and then start line input
    42                          
    43                          ;--------------------------------
    44                          ; $00B4 QINLIN
    45                          ; Function : Prints a questionmark and one space and continues with INLIN
    46                          ; Output   : HL - for the starting address of the buffer -1
    47                          ;            C-flag set when it ends with the STOP key
    48                          ; Registers: All
    49                          qinlin_prompt:
    50  1363  3f2000                    DB      "? ",0
    51                          qinlin:
    52  1366  cde0fd                    CALL    H_QINL
    53  1369  216313                    LD      hl,qinlin_prompt
    54  136c  cdb50e                    CALL    prn_text
    55                          ; continue with inlin
    56                          
    57                          ;--------------------------------
    58                          ; $00B1 INLIN
    59                          ; Function : Main line input routine
    60                          ; Output   : HL - for the starting address of the buffer -1
    61                          ;            C-flag set when it ends with the STOP key
    62                          ; Registers: All
    63                          
    64                          inlin:
    65  136f  dd215ef5                  LD      IX,BUF                            ; RESET TO BEGINNING OF BUFFER
    66  1373  3e00                      LD      A,0                               ;
    67  1375  3260f6                    LD      (ENDBUF),A                        ;
    68                          inlin_LOOP1:
    69  1378  2addf3                    LD      hl,(CSRX)                         ; loads CSRX and CSRY
    70  137b  22cafb                    LD      (FSTPOS),hl                       ; save in FSTPOS
    71  137e  11b0fb                    LD      de,LINTTB-2                       ; break logical line
    72  1381  2600                      LD      h,0                               ; above cursor pos
    73  1383  7d                        LD      a,l
    74  1384  19                        ADD     hl,de
    75  1385  77                        LD      (hl),a
    76                          inlin_loop:
    77  1386  cdaa0f                    CALL    chget                             ; get a character from the kbd
    78                          
    79  1389  fe7f                      CP      $7F
    80  138b  ca3814                    JP      z,inlin_del
    81  138e  fe20                      CP      $20
    82  1390  3011                      JR      nc,inlin_printable
    83                          
    84  1392  0614                      LD      b,20
    85  1394  213914                    LD      hl,inlin_table
    86  1397  cd0002                    CALL    jump_table
    87                          
    88  139a  af                        XOR     a                                 ; we just put out a ctrl char
    89  139b  32a8fc                    LD      (INSFLG),a                        ; switch insert mode off
    90  139e  32aafc                    LD      (CSTYLE),a
    91  13a1  18e3                      JR      inlin_loop
    92                          
    93                          inlin_printable:                                  ; else...
    94  13a3  f5                        PUSH    af
    95  13a4  3aa8fc                    LD      a,(INSFLG)
    96  13a7  a7                        AND     a
    97  13a8  c4c013                    CALL    nz,inlin_insert
    98  13ab  f1                        POP     af
    99  13ac  dd7700                    LD      (IX),A
   100  13af  dd23                      INC     IX
   101  13b1  47                        LD      B,A
   102  13b2  3a60f6                    LD      A,(ENDBUF)
   103  13b5  3c                        INC     A
   104  13b6  3260f6                    LD      (ENDBUF),A
   105  13b9  ca2314                    JP      Z,inlin_cr
   106  13bc  78                        LD      A,B
   107  13bd  df                        RST     18h
   108  13be  18b8                      JR      inlin_LOOP1
   109                          ; ----------------------------------------------
   110                          inlin_insert:
   111  13c0  cd1f12                    CALL    chput_remove_cursor
   112  13c3  2adcf3                    LD      hl,(CSRY)                         ; save cursorpos
   113  13c6  22bcf6                    LD      (TEMP2),hl
   114                          
   115  13c9  3e20                      LD      a,' '                             ; oldchar = space
   116  13cb  32a7f6                    LD      (TEMP),a
   117                          
   118                          inlin_insert_loop:                                ; REPEAT
   119  13ce  cde40e                    CALL    curs2hl                           ;   get char under curpos
   120  13d1  cd4502                    CALL    rdvrm
   121                          
   122  13d4  fe20                      CP      ' '                               ;   IF is space
   123  13d6  2025                      JR      nz,inlin_insert_cont
   124                          
   125  13d8  2adcf3                    LD      hl,(CSRY)                         ;   AND at end of line
   126  13db  3ab0f3                    LD      a,(LINLEN)
   127  13de  bc                        CP      h
   128  13df  201a                      JR      nz,inlin_insert_cont1
   129                          
   130  13e1  2600                      LD      h,0                               ;   AND logical line does
   131  13e3  11b1fb                    LD      de,LINTTB-1                       ;     not continue
   132  13e6  19                        ADD     hl,de
   133  13e7  7e                        LD      a,(hl)
   134  13e8  b7                        OR      a
   135  13e9  2810                      JR      z,inlin_insert_cont1
   136                          
   137  13eb  3aa7f6                    LD      a,(TEMP)                          ;   THEN
   138  13ee  cde40e                    CALL    curs2hl
   139  13f1  cd4b02                    CALL    wrtvrm                            ;     put old char
   140  13f4  2abcf6                    LD      hl,(TEMP2)                        ;     restore cursor pos
   141  13f7  22dcf3                    LD      (CSRY),hl
   142  13fa  c9                        RET
   143                          
   144                          inlin_insert_cont1:
   145  13fb  3e20                      LD      a,' '
   146                          inlin_insert_cont:
   147  13fd  f5                        PUSH    af                                ;   ELSE
   148  13fe  3aa7f6                    LD      a,(TEMP)                          ;     put old char
   149  1401  df                        RST     18h
   150  1402  f1                        POP     af
   151  1403  32a7f6                    LD      (TEMP),a                          ;   oldchar = character read
   152  1406  18c6                      JR      inlin_insert_loop                 ; ENDREP
   153                          
   154                          ; ----------------------------------------------
   155                          inlin_wback:
   156  1408  c9                        RET
   157                          
   158                          ; ----------------------------------------------
   159                          inlin_break:
   160  1409  37                        SCF                                       ; C
   161  140a  e1                        POP     hl                                ; do not return to INLIN
   162  140b  c9                        RET                                       ; but to caller of INLIN
   163                          
   164                          ; ----------------------------------------------
   165                          inlin_clear:
   166  140c  c9                        RET
   167                          
   168                          ; ----------------------------------------------
   169                          inlin_wfwd:
   170  140d  c9                        RET
   171                          
   172                          ; ----------------------------------------------
   173                          inlin_bs:
   174  140e  47                        LD      B,A
   175  140f  3a60f6                    LD      A,(ENDBUF)
   176  1412  3c                        INC     A
   177  1413  3d                        DEC     A
   178  1414  c8                        RET     Z
   179  1415  dd2b                      DEC     IX
   180  1417  3a60f6                    LD      A,(ENDBUF)
   181  141a  3d                        DEC     A
   182  141b  3260f6                    LD      (ENDBUF),A
   183  141e  78                        LD      A,B
   184  141f  cd1800                    CALL    $0018
   185  1422  c9                        RET
   186                          
   187                          ; ----------------------------------------------
   188                          inlin_cr:
   189  1423  af                        XOR     a                                 ; NZ, NC
   190  1424  dd7700                    LD      (IX),A                            ; NULL TERM
   191  1427  cd1f12                    CALL    chput_remove_cursor               ;
   192  142a  e1                        POP     hl                                ; do not return to INLIN
   193  142b  215ef5                    LD      HL,BUF                            ; RETURN BUFFER
   194  142e  c9                        RET
   195                          
   196                          ; ----------------------------------------------
   197                          inlin_end:
   198  142f  af                        XOR     a                                 ; NZ, NC
   199  1430  e1                        POP     hl                                ; do not return to INLIN
   200  1431  215ef5                    LD      HL,BUF                            ; RETURN BUFFER
   201  1434  c9                        RET                                       ; but to caller of INLIN
   202                          
   203                          ; ----------------------------------------------
   204                          inlin_ins:
   205  1435  c9                        RET
   206                          
   207                          ; ----------------------------------------------
   208                          inlin_clrlin:
   209  1436  c9                        RET
   210                          
   211                          ; -- ESCAPE
   212                          inlin_esc:
   213  1437  c9                        RET                                       ; Do nothing
   214                          
   215                          ; -- DELETE
   216                          inlin_del:
   217  1438  c9                        RET
   218                          
   219                          ; -- Jump table. Control chars not handled in one of the routines above
   220                          ;    are simply forwarded to OUTDO
   221                          inlin_table:
   222  1439  1800                      DW      $0018                             ; @
   223  143b  1800                      DW      $0018                             ; A -
   224  143d  0814                      DW      inlin_wback                       ; B word back
   225  143f  0914                      DW      inlin_break                       ; C stop, abort, quit
   226  1441  1800                      DW      $0018                             ; D
   227  1443  0c14                      DW      inlin_clear                       ; E: clear to end of line
   228  1445  0d14                      DW      inlin_wfwd                        ; F: word fwd
   229  1447  1800                      DW      $0018                             ; G
   230  1449  0e14                      DW      inlin_bs                          ; H BACKSP: erase char left
   231  144b  1800                      DW      $0018                             ; I
   232  144d  1800                      DW      $0018                             ; J
   233  144f  1800                      DW      $0018                             ; K
   234  1451  1800                      DW      $0018                             ; L
   235  1453  2314                      DW      inlin_cr                          ; M ENTER : confirm, yes, ok
   236  1455  2f14                      DW      inlin_end                         ; N to end of line
   237  1457  1800                      DW      $0018                             ; O
   238  1459  1800                      DW      $0018                             ; P
   239  145b  1800                      DW      $0018                             ; Q
   240  145d  3514                      DW      inlin_ins                         ; R INSERT: toggle insert mode
   241  145f  1800                      DW      $0018                             ; S
   242  1461  1800                      DW      $0018                             ; T
   243  1463  3614                      DW      inlin_clrlin                      ; U clear line
   244  1465  1800                      DW      $0018                             ; V
   245  1467  1800                      DW      $0018                             ; W
   246  1469  1800                      DW      $0018                             ; X
   247  146b  1800                      DW      $0018                             ; Y
   248  146d  1800                      DW      $0018                             ; Z
   249  146f  3714                      DW      inlin_esc                         ; ESCAPE: ignore
   250  1471  1800                      DW      $0018                             ; (28)
   251  1473  1800                      DW      $0018                             ; (29)
   252  1475  1800                      DW      $0018                             ; (30)
   253  1477  1800                      DW      $0018                             ; (31)
   254                          
   255                          ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
   256                          
main.asm:
  1360                          
  1361                          ;--------------------------------
  1362                          ; $00B7 BREAKX
  1363                          ; Tests status of CTRL-STOP.
  1364                          ; This routine reads the keyboard status from the hardware, so its result
  1365                          ; will be accurate even if interrupts have been disabled for a while.
  1366                          ; Output:  CF set if CTRL-STOP is pressed
  1367                          ; Changes: AF
  1368                          breakx:
  1369  1479  3a7c24                    LD      A,(BREAKFLAG)
  1370  147c  feff                      CP      $FF
  1371  147e  2802                      JR      Z,BREAKX_1
  1372                          
  1373                          BREAKX_0:
  1374  1480  3f                        CCF
  1375  1481  c9                        RET
  1376                          BREAKX_1:
  1377  1482  3e00                      LD      A,0
  1378  1484  327c24                    LD      (BREAKFLAG),A
  1379  1487  37                        SCF
  1380  1488  c9                        RET
  1381                          
  1382                          ;--------------------------------
  1383                          ; $00BA ISCNTC
  1384                          ; Function: Test status of STOP or CTRL-STOP; if BASIC is in a ROM (see BASROM),
  1385                          ;           then check for STOP or CTRL-STOP is not done. Otherways:
  1386                          ;       INTLFLG: 0 => no action
  1387                          ;       INTLFLG: 3 => CTRL-STOP pressed => break program, if "STOP-interrupts not on"??
  1388                          ;       INTLFLG: 4 => STOP pressed => wait in ISCNTC till stop pressed again
  1389                          ; Input: INTFLG, BASROM
  1390                          ; Registers: AF
  1391                          ; NOTE: this implementation is still a stub!
  1392                          iscntc:
  1393  1489  e5                        PUSH    hl
  1394  148a  f5                        PUSH    af
  1395  148b  219114                    LD      hl,iscntc_text
  1396                          ;                call    print_debug
  1397  148e  f1                        POP     af
  1398  148f  e1                        POP     hl
  1399  1490  c9                        RET
  1400                          iscntc_text:
  1401  1491  4953434e544300            DB      "ISCNTC",0
  1402                          
  1403                          ;--------------------------------
  1404                          ; $00BD CKCNTC
  1405                          ; Function : Same as ISCNTC. used in Basic
  1406                          ckcntc:
  1407  1498  c38914                    JP      iscntc
  1408                          
  1409                          ;--------------------------------
  1410                          ; $00C0 BEEP
  1411                          ; Function : play a short beep, and reset sound system via GICINI
  1412                          ; Registers: All
  1413                          ; NOTE: this implementation is still a stub!
  1414                          beep:
  1415                          ; Note: Called by CHPUT; if you need to change more regs than AF, HL, DE, BC
  1416                          ;       then update CHPUT.
  1417  149b  e5                        PUSH    hl
  1418  149c  f5                        PUSH    af
  1419  149d  21a314                    LD      hl,beep_text
  1420                          ;                call    print_debug
  1421  14a0  f1                        POP     af
  1422  14a1  e1                        POP     hl
  1423  14a2  c9                        RET
  1424                          beep_text:
  1425  14a3  4245455000                DB      "BEEP",0
  1426                          
  1427                          ;--------------------------------
  1428                          ; $00C6 POSIT
  1429                          ; Sets cursor position.
  1430                          ; Input:   H = column
  1431                          ;          L = row
  1432                          ; Changes: AF
  1433                          posit:
  1434                          ; Note: this works because CSRX == CSRY + 1
  1435  14a8  22dcf3                    LD      (CSRY),hl
  1436  14ab  c9                        RET
  1437                          
  1438                          ;--------------------------------
  1439                          ; $00C9 FNKSB
  1440                          ; Tests whether the function key display is active (FNKFLG),
  1441                          ; if so, displays them, otherwise erases them.
  1442                          ; Input:   FNKFLG (#FBCE)
  1443                          ; Changes: all
  1444                          ; NOTE: This implementation is still a stub!
  1445                          fnksb:
  1446  14ac  e5                        PUSH    hl
  1447  14ad  f5                        PUSH    af
  1448  14ae  21b414                    LD      hl,fnksb_text
  1449                          ;                call    print_debug
  1450  14b1  f1                        POP     af
  1451  14b2  e1                        POP     hl
  1452  14b3  c9                        RET
  1453                          fnksb_text:
  1454  14b4  464e4b534200              DB      "FNKSB",0
  1455                          
  1456                          ;--------------------------------
  1457                          ; $00CC ERAFNK
  1458                          ; Erase function key display.
  1459                          ; Changes: all
  1460                          ; NOTE: This implementation is still a stub!
  1461                          ; TODO: call H_ERAF
  1462                          erafnk:
  1463                          ;               call    H_ERAF
  1464  14ba  e5                        PUSH    hl
  1465  14bb  f5                        PUSH    af
  1466  14bc  21c214                    LD      hl,erafnk_text
  1467                          ;                call    print_debug
  1468  14bf  f1                        POP     af
  1469  14c0  e1                        POP     hl
  1470  14c1  c9                        RET
  1471                          erafnk_text:
  1472  14c2  455241464e4b00            DB      "ERAFNK",0
  1473                          
  1474                          ;--------------------------------
  1475                          ; $00CF dsPFNK
  1476                          ; Display function keys.
  1477                          ; Changes: all
  1478                          ; NOTE: This implementation is still a stub!
  1479                          ; TODO: call H_dsPF
  1480                          dspfnk:
  1481                          ;               call    H_dsPF
  1482  14c9  e5                        PUSH    hl
  1483  14ca  f5                        PUSH    af
  1484  14cb  21d114                    LD      hl,dspfnk_text
  1485                          ;                call    print_debug
  1486  14ce  f1                        POP     af
  1487  14cf  e1                        POP     hl
  1488  14d0  c9                        RET
  1489                          dspfnk_text:
  1490  14d1  445350464e4b00            DB      "DSPFNK",0
  1491                          
  1492                          ;--------------------------------
  1493                          ; $00D2 TOTEXT
  1494                          ; Forces the screen to be in the text mode.
  1495                          ; Input: SCRMOD, OLdsCR
  1496                          ; Changes: all
  1497                          totext:
  1498  14d8  3aaffc                    LD      a,(SCRMOD)
  1499  14db  fe02                      CP      2
  1500  14dd  d8                        RET     c
  1501  14de  3ab0fc                    LD      a,(OLDSCR)
  1502  14e1  cdbdfd                    CALL    H_TOTE
  1503  14e4  b7                        OR      a
  1504  14e5  ca7f03                    JP      z,initxt
  1505  14e8  c3bf03                    JP      init32
  1506                          
  1507                          ;--------------------------------
  1508                          ; $00E1 TAPION
  1509                          ; ReaDS the header block after turning the cassette motor on.
  1510                          ; Output:  CF = set if failed
  1511                          ; Changes: all
  1512                          ; NOTE: This implementation is still a stub!
  1513                          tapion:
  1514  14eb  e5                        PUSH    hl
  1515  14ec  f5                        PUSH    af
  1516  14ed  21f414                    LD      hl,tapion_text
  1517                          ;                call    print_debug
  1518  14f0  f1                        POP     af
  1519  14f1  e1                        POP     hl
  1520                          ; TODO: not implemented -> always fail
  1521  14f2  37                        SCF
  1522  14f3  c9                        RET
  1523                          tapion_text:
  1524  14f4  544150494f4e00            DB      "TAPION",0
  1525                          
  1526                          ;--------------------------------
  1527                          ; $00E4 TAPIN
  1528                          ; Read data from the tape.
  1529                          ; Output:  A = data read
  1530                          ; Changes: all
  1531                          ; NOTE: This implementation is still a stub!
  1532                          tapin:
  1533  14fb  e5                        PUSH    hl
  1534  14fc  f5                        PUSH    af
  1535  14fd  210415                    LD      hl,tapin_text
  1536                          ;                call    print_debug
  1537  1500  f1                        POP     af
  1538  1501  e1                        POP     hl
  1539                          ; TODO: not implemented -> always fail
  1540  1502  37                        SCF
  1541  1503  c9                        RET
  1542                          tapin_text:
  1543  1504  544150494e00              DB      "TAPIN",0
  1544                          
  1545                          ;--------------------------------
  1546                          ; $00E7 TAPIOF
  1547                          ; Stops reading from the tape.
  1548                          ; NOTE: This implementation is still a stub!
  1549                          tapiof:
  1550  150a  e5                        PUSH    hl
  1551  150b  f5                        PUSH    af
  1552  150c  211215                    LD      hl,tapiof_text
  1553                          ;                call    print_debug
  1554  150f  f1                        POP     af
  1555  1510  e1                        POP     hl
  1556  1511  c9                        RET
  1557                          tapiof_text:
  1558  1512  544150494f4600            DB      "TAPIOF",0
  1559                          
  1560                          ;--------------------------------
  1561                          ; $00EA TAPOON
  1562                          ; Turns on the cassette motor and writes the header.
  1563                          ; Input:   A  = zero for short header, non-zero for long header
  1564                          ; Output:  CF = set if failed
  1565                          ; Changes: all
  1566                          ; NOTE: This implementation is still a stub!
  1567                          tapoon:
  1568  1519  e5                        PUSH    hl
  1569  151a  f5                        PUSH    af
  1570  151b  212215                    LD      hl,tapoon_text
  1571                          ;                call    print_debug
  1572  151e  f1                        POP     af
  1573  151f  e1                        POP     hl
  1574                          ; TODO: not implemented -> always fail
  1575  1520  37                        SCF
  1576  1521  c9                        RET
  1577                          tapoon_text:
  1578  1522  5441504f4f4e00            DB      "TAPOON",0
  1579                          
  1580                          ;--------------------------------
  1581                          ; $00ED TAPOUT
  1582                          ; Writes data to the tape.
  1583                          ; Input:   A  = data to write
  1584                          ; Output:  CF = set if failed
  1585                          ; Changes: all
  1586                          ; NOTE: This implementation is still a stub!
  1587                          tapout:
  1588  1529  e5                        PUSH    hl
  1589  152a  f5                        PUSH    af
  1590  152b  213215                    LD      hl,tapout_text
  1591                          ;                call    print_debug
  1592  152e  f1                        POP     af
  1593  152f  e1                        POP     hl
  1594                          ; TODO: not implemented -> always fail
  1595  1530  37                        SCF
  1596  1531  c9                        RET
  1597                          tapout_text:
  1598  1532  5441504f555400            DB      "TAPOUT",0
  1599                          
  1600                          ;--------------------------------
  1601                          ; $00F0 TAPOOF
  1602                          ; Stops writing on the tape.
  1603                          ; NOTE: This implementation is still a stub!
  1604                          tapoof:
  1605  1539  e5                        PUSH    hl
  1606  153a  f5                        PUSH    af
  1607  153b  214115                    LD      hl,tapoof_text
  1608                          ;                call    print_debug
  1609  153e  f1                        POP     af
  1610  153f  e1                        POP     hl
  1611  1540  c9                        RET
  1612                          tapoof_text:
  1613  1541  5441504f4f4600            DB      "TAPOOF",0
  1614                          
  1615                          ;--------------------------------
  1616                          ; $00F3 STMOTR
  1617                          ; Changes the cassette motor state.
  1618                          ; Input:   A = action: #00 stops motor, #01 starts motor,
  1619                          ;                      #FF inverts current state
  1620                          ; Changes: AF
  1621                          stmotr:
  1622  1548  c5                        PUSH    bc
  1623  1549  47                        LD      b,a
  1624  154a  db01                      IN      a,(GIO_REGS)
  1625  154c  04                        INC     b
  1626  154d  280c                      JR      z,stmotr_inv
  1627  154f  cbe7                      SET     4,a
  1628  1551  05                        DEC     b
  1629  1552  2809                      JR      z,stmotr_set
  1630  1554  cba7                      RES     4,a
  1631  1556  05                        DEC     b
  1632  1557  2804                      JR      z,stmotr_set
  1633  1559  c1                        POP     bc
  1634  155a  c9                        RET
  1635                          
  1636                          stmotr_inv:
  1637  155b  ee10                      XOR     16
  1638                          stmotr_set:
  1639  155d  d301                      OUT     (GIO_REGS),a
  1640  155f  c1                        POP     bc
  1641  1560  c9                        RET
  1642                          
  1643                          ;--------------------------------
  1644                          ; $0090 GICINI  Initialize Sound IC
  1645                          ; Function : Initialises PSG and sets initial value for the PLAY statement
  1646                          ; Registers: All
  1647                          gicini:
  1648  1561  1e00                      LD      e,$00
  1649  1563  3e08                      LD      a,$08
  1650  1565  cd7915                    CALL    wrtpsg
  1651  1568  3c                        INC     a
  1652  1569  cd7915                    CALL    wrtpsg
  1653  156c  3c                        INC     a
  1654  156d  cd7915                    CALL    wrtpsg
  1655  1570  3c                        INC     a
  1656                          
  1657  1571  1eb8                      LD      e,$B8
  1658  1573  3e07                      LD      a,$07
  1659  1575  cd7915                    CALL    wrtpsg
  1660                          
  1661  1578  c9                        RET
  1662                          
  1663                          ;--------------------------------
  1664                          ; $0093 WRTPSG
  1665                          ; Function : Writes data to PSG-register
  1666                          ; Input    : A  - PSG register number
  1667                          ;            E  - data write
  1668                          wrtpsg:
  1669  1579  f3                        DI
  1670  157a  d3a4                      OUT     (PSG_REGS),a
  1671  157c  f5                        PUSH    af
  1672  157d  7b                        LD      a,e
  1673  157e  d3a5                      OUT     (PSG_DATA),a
  1674  1580  fb                        EI
  1675  1581  f1                        POP     af
  1676  1582  c9                        RET
  1677                          
  1678                          ;--------------------------------
  1679                          ; $0096 RDPSG
  1680                          ; Function : ReaDS value from PSG-register
  1681                          ; Input    : A  - PSG-register read
  1682                          ; Output   : A  - value read
  1683                          rdpsg:
  1684  1583  d3a4                      OUT     (PSG_REGS),a
  1685  1585  dba4                      IN      a,(PSG_STAT)
  1686  1587  c9                        RET
  1687                          
  1688                          ;--------------------------------
  1689                          ; $0135 CHGSND
  1690                          ; Write to the 1-bit sound port.
  1691                          ; Input:   A = zero to set sound state to 0, non-zero to set sound state to 1
  1692                          ; Changes: AF
  1693                          chgsnd:
  1694  1588  b7                        OR      a
  1695  1589  3e0e                      LD      a,$0E                             ; $0E = command to reset bit 7
  1696  158b  2801                      JR      z,chgsnd_write
  1697  158d  3c                        INC     a                                 ; $0F = command to set bit 7
  1698                          chgsnd_write:
  1699  158e  d301                      OUT     (PPI_REGS),a                      ; set/reset bit of port C
  1700  1590  c9                        RET
  1701                          
  1702                          ;--------------------------------
  1703                          ; $0138 RSLREG
  1704                          ; Function : Reads the primary slot register
  1705                          ; Output   : A  - for the value which was read
  1706                          ;            33221100
  1707                          ;            ||||||- Pagina 0 (#0000-#3FFF)
  1708                          ;            ||||--- Pagina 1 (#4000-#7FFF)
  1709                          ;            ||----- Pagina 2 (#8000-#BFFF)
  1710                          ;            ------- Pagina 3 (#C000-#FFFF)
  1711                          ; Registers: A
  1712                          rslreg:
  1713  1591  db01                      IN      a,(PSL_STAT)
  1714  1593  c9                        RET
  1715                          
  1716                          ;--------------------------------
  1717                          ; $013B WSLREG
  1718                          ; Function : Writes value to the primary slot register
  1719                          ; Input    : A  - value value to (see RSLREG)
  1720                          wslreg:
  1721  1594  d301                      OUT     (PSL_STAT),a
  1722  1596  c9                        RET
  1723                          
  1724                          ;--------------------------------
  1725                          ; $013E RDVDP
  1726                          ; Function : Reads VDP status register
  1727                          ; Output   : A  - Value which was read
  1728                          ; Registers: A
  1729                          rdvdp:
  1730  1597  dba1                      IN      a,(VDP_STAT)
  1731  1599  c9                        RET
  1732                          
  1733                          ;--------------------------------
  1734                          ;0141h SNSMAT
  1735                          ; Function : Returns the value of the specified line from the keyboard matrix
  1736                          ; Input    : A  - for the specified line
  1737                          ; Output   : A  - for data (the bit corresponding to the pressed key will be 0)
  1738                          ; Registers: AF
  1739                          snsmat:
  1740  159a  3eff                      LD      A,$FF
  1741  159c  c9                        RET
  1742                          
  1743                          ;--------------------------------
  1744                          ; $0144 PHYDIO
  1745                          ; Executes I/O for mass-storage media like diskettes.
  1746                          ; All this routine does is call H_PHYD, which should be installed by the main
  1747                          ; disk ROM.
  1748                          ; Input:     B  = number of sectors to save/load
  1749                          ;            C  = media ID of the disk
  1750                          ;            DE = begin sector
  1751                          ;            HL = begin address in memory
  1752                          ; Changes:   all
  1753                          ; Remark:    Before the call is called, the Z-flag must be reset, and the
  1754                          ;            execution address which was in HL must be at the last stack address
  1755                          phydio:
  1756  159d  cda7ff                    CALL    H_PHYD
  1757  15a0  c9                        RET
  1758                          
  1759                          ;--------------------------------
  1760                          ; $0147 FORMAT
  1761                          ; Initialises mass-storage media like formatting of diskettes.
  1762                          ; All this routine does is call H_FORM, which should be installed by the main
  1763                          ; disk ROM.
  1764                          ; Changes:   all
  1765                          format:
  1766  15a1  cdacff                    CALL    H_FORM
  1767  15a4  c9                        RET
  1768                          
  1769                          ;--------------------------------
  1770                          ; $014A ISFLIO
  1771                          ; Function : Tests if I/O to device is taking place
  1772                          ; Output   : A  - #00 if not taking place
  1773                          ;             not #00 if taking place
  1774                          ; Registers: AF
  1775                          ; TODO: call H_ISFL
  1776                          isflio:
  1777                          ;                call    H_ISFL
  1778  15a5  3a64f8                    LD      a,(PTRFIL)
  1779  15a8  a7                        AND     a                                 ; adjust flags
  1780  15a9  c9                        RET
  1781                          
  1782                          ;--------------------------------
  1783                          ; $00D5 GTSTCK
  1784                          ; Function : Returns the joystick status
  1785                          ; Input    : A  - Joystick number to test (0 = cursors, 1 = port 1, 2 = port 2)
  1786                          ; Output   : A  - Direction,D = $00(when A=0)
  1787                          ; Registers: All
  1788                          gtstck:
  1789  15aa  c5                        PUSH    bc
  1790  15ab  fe00                      CP      $00
  1791  15ad  2022                      JR      nz,joy_stc1
  1792                          
  1793                                  IF      KB_USE_SERIAL=1
  1794  15af  cd9017                        CALL    key_in
  1795                          
  1796  15b2  3a5e16                        LD      A,(RETROBREW_KB_STICK_CACHE)
  1797  15b5  e60f                          AND     $0F
  1798  15b7  cac415                        JP      Z,GSTICK_RETROBREW_END                ; IF NO DATA END
  1799  15ba  47                            LD      B,A
  1800  15bb  3a5e16                        LD      A,(RETROBREW_KB_STICK_CACHE)
  1801  15be  e6f0                          AND     $F0
  1802  15c0  325e16                        LD      (RETROBREW_KB_STICK_CACHE),A
  1803  15c3  78                            LD      A,B
  1804                          GSTICK_RETROBREW_END:
  1805  15c4  e5                            PUSH    hl
  1806  15c5  210816                        LD      hl,joypos_kbd_tbl
  1807  15c8  1600                          LD      d,0
  1808  15ca  5f                            LD      e,a
  1809  15cb  19                            ADD     hl,de
  1810  15cc  7e                            LD      a,(hl)
  1811  15cd  e1                            POP     hl
  1812                                  ENDIF
  1813  15ce  c1                        POP     bc
  1814  15cf  a7                        AND     a
  1815  15d0  c9                        RET
  1816                          joy_stc1:
  1817                          ;PSG reg 15h
  1818                          ;0J001111
  1819                          ;PSG reg 14h
  1820                          ;00BARLDU
  1821                          
  1822  15d1  e5                        PUSH    hl
  1823  15d2  d5                        PUSH    de
  1824                          
  1825  15d3  1e00                      LD      e,$00
  1826  15d5  3d                        DEC     a
  1827  15d6  2804                      JR      z,sel_stc1
  1828                          ; RETROBREW SITCK 2
  1829  15d8  3e0f                      LD      a,$0F
  1830  15da  1802                      JR      N8_STKREAD
  1831                          sel_stc1:
  1832  15dc  3e0e                      LD      A,$0E
  1833                          N8_STKREAD:
  1834  15de  f3                        DI
  1835  15df  cd8315                    CALL    rdpsg
  1836  15e2  fb                        EI
  1837  15e3  2f                        CPL
  1838  15e4  e60f                      AND     $0F
  1839  15e6  21f815                    LD      hl,joypos_joy_tbl
  1840  15e9  0600                      LD      b,0
  1841  15eb  4f                        LD      c,a
  1842  15ec  09                        ADD     hl,bc
  1843  15ed  7e                        LD      a,(hl)
  1844  15ee  d1                        POP     de
  1845  15ef  e1                        POP     hl
  1846                          
  1847  15f0  c1                        POP     bc
  1848  15f1  a7                        AND     a
  1849  15f2  c9                        RET
  1850                          
  1851                          joy_end:
  1852  15f3  3e00                      LD      a,$00
  1853  15f5  c1                        POP     bc
  1854  15f6  a7                        AND     a
  1855  15f7  c9                        RET
  1856                          
  1857                          joypos_joy_tbl:
  1858                          ;         0   1   2   3   4   5   6   7
  1859  15f8  0001050007080607          DB      $00,$01,$05,$00,$07,$08,$06,$07
  1860                          ;         8   9   A   B   C   D   E   F
  1861  1600  0302040300010500          DB      $03,$02,$04,$03,$00,$01,$05,$00
  1862                          
  1863                          joypos_kbd_tbl:
  1864                          ;         0   1   2   3   4   5   6   7
  1865  1608  0007010805060007          DB      $00,$07,$01,$08,$05,$06,$00,$07
  1866                          ;         8   9   A   B   C   D   E   F
  1867  1610  0300020104050300          DB      $03,$00,$02,$01,$04,$05,$03,$00
  1868                          
  1869                          
  1870                          RETROBREW_KB_STICK:
  1871  1618  3a5e16                    LD      A,(RETROBREW_KB_STICK_CACHE)
  1872  161b  fe00                      CP      00
  1873  161d  c25d16                    JP      NZ,RETROBREW_KB_STICK_END
  1874  1620  78                        LD      A,B
  1875  1621  fe53                      CP      'S'                               ;
  1876  1623  ca3d16                    JP      Z,RETROBREW_KB_STICK_R
  1877  1626  fe5a                      CP      'Z'                               ;
  1878  1628  ca4316                    JP      Z,RETROBREW_KB_STICK_D
  1879  162b  fe57                      CP      'W'                               ;
  1880  162d  ca4916                    JP      Z,RETROBREW_KB_STICK_U
  1881  1630  fe41                      CP      'A'                               ;
  1882  1632  ca4f16                    JP      Z,RETROBREW_KB_STICK_L
  1883  1635  fe20                      CP      ' '                               ;
  1884  1637  ca5516                    JP      Z,RETROBREW_KB_STICK_B
  1885  163a  c35b16                    JP      RETROBREW_KB_STICK_NONE
  1886                          RETROBREW_KB_STICK_R:
  1887  163d  3e08                      LD      A,%00001000
  1888  163f  325e16                    LD      (RETROBREW_KB_STICK_CACHE),A
  1889  1642  c9                        RET
  1890                          RETROBREW_KB_STICK_D:
  1891  1643  3e04                      LD      A,%00000100
  1892  1645  325e16                    LD      (RETROBREW_KB_STICK_CACHE),A
  1893  1648  c9                        RET
  1894                          RETROBREW_KB_STICK_U:
  1895  1649  3e02                      LD      A,%00000010
  1896  164b  325e16                    LD      (RETROBREW_KB_STICK_CACHE),A
  1897  164e  c9                        RET
  1898                          RETROBREW_KB_STICK_L:
  1899  164f  3e01                      LD      A,%00000001
  1900  1651  325e16                    LD      (RETROBREW_KB_STICK_CACHE),A
  1901  1654  c9                        RET
  1902                          RETROBREW_KB_STICK_B:
  1903  1655  3e10                      LD      A,%00010000
  1904  1657  325e16                    LD      (RETROBREW_KB_STICK_CACHE),A
  1905  165a  c9                        RET
  1906                          RETROBREW_KB_STICK_NONE:
  1907  165b  3e00                      LD      A,%00000000
  1908                          RETROBREW_KB_STICK_END:
  1909  165d  c9                        RET
  1910                          RETROBREW_KB_STICK_CACHE:
  1911  165e  00                        DB      00
  1912                          
  1913                          ;--------------------------------
  1914                          ; $00D8 GTTRIG
  1915                          ; Function : Returns current trigger status
  1916                          ; Input    : A  - trigger button to test
  1917                          ;            0 = spacebar(included A-1 = minus)
  1918                          ;            1 = port 1, button A
  1919                          ;            2 = port 2, button A
  1920                          ;            3 = port 1, button B
  1921                          ;            4 = port 2, button B
  1922                          ; Output   : A  - #00 trigger button not pressed
  1923                          ;                 #FF trigger button pressed
  1924                          ; Note     : Some programs rely on ZF to be set according to the value in A.
  1925                          ; Registers: All
  1926                          gttrig:
  1927  165f  fe05                      CP      5
  1928  1661  3003                      JR      nc,gttrig_space                   ; if value of A is above 5,go space routine
  1929  1663  b7                        OR      a
  1930  1664  2017                      JR      nz,joy_trig
  1931                          gttrig_space:
  1932                          ; Keyboard (spacebar)
  1933                                  IF      KB_USE_SERIAL=1
  1934  1666  cd9017                        CALL    key_in
  1935  1669  3a5e16                        LD      A,(RETROBREW_KB_STICK_CACHE)
  1936  166c  e6f0                          AND     $F0
  1937  166e  c8                            RET     Z                                 ; IF NO DATA END
  1938  166f  3a5e16                        LD      A,(RETROBREW_KB_STICK_CACHE)
  1939  1672  e60f                          AND     $0F
  1940  1674  325e16                        LD      (RETROBREW_KB_STICK_CACHE),A
  1941  1677  3eff                          LD      A,$FF
  1942  1679  c9                            RET
  1943                                      .ELSE
  1944  167a  3e00                          LD      A,$00
  1945  167c  c9                            RET
  1946                                  ENDIF
  1947                          
  1948                          ; Joystick triggers
  1949                          joy_trig:
  1950  167d  f3                        DI
  1951  167e  3d                        DEC     a
  1952  167f  d5                        PUSH    de
  1953  1680  1e03                      LD      e,$03                             ; enable trig A+B of stick 1
  1954  1682  47                        LD      b,a
  1955  1683  e601                      AND     $01
  1956  1685  2804                      JR      z,sel_trig1
  1957                          ; TRIGGER 2
  1958  1687  3e0f                      LD      a,$0F
  1959  1689  1802                      JR      N8_TRGREAD
  1960                          sel_trig1:
  1961  168b  3e0e                      LD      A,$0E
  1962                          N8_TRGREAD:
  1963  168d  f3                        DI
  1964  168e  cd8315                    CALL    rdpsg
  1965  1691  fb                        EI
  1966  1692  5f                        LD      E,A
  1967  1693  78                        LD      A,B
  1968  1694  e602                      AND     02
  1969  1696  2808                      JR      Z,istrg_a
  1970  1698  7b                        LD      A,E
  1971  1699  d1                        POP     DE
  1972  169a  e680                      AND     $80
  1973  169c  280a                      JR      z,trig_on
  1974  169e  180b                      JR      trig_off
  1975                          istrg_a:
  1976  16a0  7b                        LD      A,E
  1977  16a1  d1                        POP     DE
  1978  16a2  e610                      AND     $10
  1979  16a4  2802                      JR      z,trig_on
  1980  16a6  1803                      JR      trig_off
  1981                          
  1982                          trig_on:
  1983  16a8  3eff                      LD      a,$FF
  1984  16aa  c9                        RET
  1985                          trig_off:
  1986  16ab  af                        XOR     a
  1987  16ac  c9                        RET
  1988                          
  1989                          
  1990                          ;--------------------------------
  1991                          ; $00db GTPAD
  1992                          ; Function : Returns current touch pad status
  1993                          ; Input    : A  - Touchpad number to test
  1994                          ; Output   : A  - Value
  1995                          ; Registers: All
  1996                          ; NOTE     : This implementation is still a stub!
  1997                          gtpad:
  1998  16ad  e5                        PUSH    hl
  1999  16ae  f5                        PUSH    af
  2000  16af  21b616                    LD      hl,gtpad_text
  2001                          ;                call    print_debug
  2002  16b2  f1                        POP     af
  2003  16b3  e1                        POP     hl
  2004  16b4  af                        XOR     a                                 ; haywire
  2005  16b5  c9                        RET
  2006                          gtpad_text:
  2007  16b6  475450414400              DB      "GTPAD",0
  2008                          
  2009                          ;--------------------------------
  2010                          ; $00DE GTPDL
  2011                          ; Function : Returns currenct value of paddle
  2012                          ; Input    : A  - Paddle number
  2013                          ; Output   : A  - Value
  2014                          ; Registers: All
  2015                          ; NOTE     : This implementation is still a stub!
  2016                          gtpdl:
  2017  16bc  e5                        PUSH    hl
  2018  16bd  f5                        PUSH    af
  2019  16be  21c416                    LD      hl,gtpdl_text
  2020                          ;                call    print_debug
  2021  16c1  f1                        POP     af
  2022  16c2  e1                        POP     hl
  2023  16c3  c9                        RET
  2024                          gtpdl_text:
  2025  16c4  475450444c00              DB      "GTPDL",0
  2026                          
  2027                          ;--------------------------------
  2028                          ; $00F6 LFTQ
  2029                          ; Give the number of bytes left in a queue.
  2030                          ; In:      A  = queue number
  2031                          ; Out:     HL = number of bytes left
  2032                          ; Changes: AF, BC, HL
  2033                          lftq:
  2034  16ca  cdfa16                    CALL    calc_queue_address
  2035  16cd  46                        LD      b,(hl)                            ; B = put position
  2036  16ce  04                        INC     b
  2037  16cf  23                        INC     hl
  2038  16d0  7e                        LD      a,(hl)                            ; A = get position
  2039  16d1  90                        SUB     b                                 ; (getpos - putpos) & size
  2040  16d2  23                        INC     hl
  2041  16d3  23                        INC     hl
  2042  16d4  a6                        AND     (hl)
  2043  16d5  6f                        LD      l,a
  2044  16d6  2600                      LD      h,$00                             ; Queues are smaller than 256 bytes.
  2045  16d8  c9                        RET
  2046                          
  2047                          ;--------------------------------
  2048                          ; $00F9 PUTQ
  2049                          ; Put a byte in a queue.
  2050                          ; In:      A  = queue number
  2051                          ;          E  = data
  2052                          ; Out:     ZF = set if the queue is full
  2053                          ; Changes: AF, BC, HL
  2054                          putq:
  2055                          ; Check whether the queue is full.
  2056  16d9  cdfa16                    CALL    calc_queue_address
  2057  16dc  7e                        LD      a,(hl)
  2058  16dd  3c                        INC     a
  2059  16de  47                        LD      b,a                               ; B = put position + 1
  2060  16df  23                        INC     hl
  2061  16e0  96                        SUB     (hl)
  2062  16e1  c8                        RET     z
  2063                          
  2064                          ; Save the new put position.
  2065  16e2  78                        LD      a,b
  2066  16e3  23                        INC     hl
  2067  16e4  23                        INC     hl
  2068  16e5  e5                        PUSH    hl
  2069  16e6  a6                        AND     (hl)                              ; (putpos + 1) & size
  2070  16e7  2b                        DEC     hl
  2071  16e8  2b                        DEC     hl
  2072  16e9  2b                        DEC     hl
  2073  16ea  77                        LD      (hl),a
  2074                          
  2075                          ; Put the data byte in the queue.
  2076  16eb  e1                        POP     hl
  2077  16ec  23                        INC     hl
  2078  16ed  7e                        LD      a,(hl)                            ; Get the buffer address.
  2079  16ee  23                        INC     hl
  2080  16ef  66                        LD      h,(hl)
  2081  16f0  6f                        LD      l,a
  2082  16f1  05                        DEC     b                                 ; Add putpos.
  2083  16f2  48                        LD      c,b
  2084  16f3  0600                      LD      b,0
  2085  16f5  09                        ADD     hl,bc
  2086  16f6  73                        LD      (hl),e
  2087  16f7  f601                      OR      1
  2088  16f9  c9                        RET
  2089                          
  2090                          ; Calculate the address to the start of queue control block.
  2091                          ; A = queue number
  2092                          calc_queue_address:
  2093  16fa  2af3f3                    LD      hl,(QUEUES)                       ; See QUETAB in systemvars.asm.
  2094  16fd  47                        LD      b,a                               ; (queue number * 6)
  2095  16fe  07                        RLCA
  2096  16ff  07                        RLCA
  2097  1700  80                        ADD     a,b
  2098  1701  80                        ADD     a,b
  2099  1702  4f                        LD      c,a
  2100  1703  0600                      LD      b,0
  2101  1705  09                        ADD     hl,bc
  2102  1706  c9                        RET
  2103                          
  2104                          ;--------------------------------
  2105                          ; $0132 CHGCAP
  2106                          ; Function : Alternates the CAP lamp status
  2107                          ; Input    : A  - #00 is lamp on
  2108                          ;             not #00 is lamp off
  2109                          ; Registers: AF
  2110                          chgcap:
  2111                          ;// TODO: RETROBREW code
  2112  1707  c9                        RET
  2113                          
  2114                          ;--------------------------------
  2115                          ; $014D OUTDLP
  2116                          ; Function : Printer output
  2117                          ; Input    : A  - code to print
  2118                          ; Registers: F
  2119                          ; Remark   : Differences with LPTOUT:
  2120                          ;            1. TAB is expanded to spaces
  2121                          ;            2. For non-MSX printers, Hiragana is transformed to katakana
  2122                          ;               and graphic characters are transformed to 1-byte characters
  2123                          ;            3. If failed, device I/O error occurs
  2124                          ; TODO     : This implementation is still a stub!
  2125                          outdlp:
  2126  1708  e5                        PUSH    hl
  2127  1709  f5                        PUSH    af
  2128  170a  211017                    LD      hl,outdlp_text
  2129                          ;                call    print_debug
  2130  170d  f1                        POP     af
  2131  170e  e1                        POP     hl
  2132  170f  c9                        RET
  2133                          outdlp_text:
  2134  1710  4f5554444c5000            DB      "OUTDLP",0
  2135                          
  2136                          ;--------------------------------
  2137                          ; $0150 GETVCP
  2138                          ; Returns pointer to a variable at offset 2 in a voice structure.
  2139                          ; TODO: find out the purpose of this variable.
  2140                          ; Address  : #0150
  2141                          ; Function : Returns pointer to play queue
  2142                          ; Input    : A  - Channel number
  2143                          ; Output   : HL - Pointer
  2144                          ; Registers: AF
  2145                          ; Remark   : Only used to play music in background
  2146                          getvcp:
  2147  1717  2e02                      LD      l,2
  2148  1719  1803                      JR      getvc2_a
  2149                          
  2150                          ;--------------------------------
  2151                          ; $0153 GETVC2
  2152                          ; Returns pointer to a given variable in a voice structure.
  2153                          ; Input    : L        - Pointer in play buffer
  2154                          ;            (VOICEN) - Voice structure number
  2155                          ; Output   : HL - Pointer
  2156                          ; Registers: AF
  2157                          getvc2:
  2158  171b  3a38fb                    LD      a,(VOICEN)
  2159                          getvc2_a:
  2160  171e  d5                        PUSH    de
  2161  171f  1600                      LD      d,0
  2162  1721  5d                        LD      e,l
  2163  1722  2141fb                    LD      hl,VCBA
  2164  1725  19                        ADD     hl,de
  2165  1726  1e25                      LD      e,37                              ; Size of a structure
  2166                          getvc2_loop:
  2167  1728  b7                        OR      a
  2168  1729  2804                      JR      z,getvc2_exit
  2169  172b  19                        ADD     hl,de
  2170  172c  3d                        DEC     a
  2171  172d  18f9                      JR      getvc2_loop
  2172                          getvc2_exit:
  2173  172f  d1                        POP     de
  2174  1730  c9                        RET
  2175                          
  2176                          ;--------------------------------
  2177                          ; $0156 KILBUF
  2178                          ; Empties the keyboard buffer.
  2179                          ; Changes: HL
  2180                          kilbuf:
  2181  1731  2afaf3                    LD      hl,(GETPNT)
  2182  1734  22f8f3                    LD      (PUTPNT),hl
  2183  1737  c9                        RET
  2184                          
  2185                          ;--------------------------------
  2186                          ; Interrupt routine ($0038h)
  2187                          ;--------------------------------
  2188                          ; some games uses Reg.R and the routine affects the register's value.
  2189                          ; if you want to add something to the routine,please try the following first
  2190                          ;
  2191                          ; Riseout , Replicart
  2192                          
  2193                          keyint:
  2194  1738  e5                        PUSH    hl
  2195  1739  d5                        PUSH    de
  2196  173a  c5                        PUSH    bc
  2197  173b  f5                        PUSH    af
  2198  173c  d9                        EXX
  2199  173d  08                        EX      af,af'
  2200  173e  e5                        push    hl
  2201  173f  d5                        PUSH    de
  2202  1740  c5                        PUSH    bc
  2203  1741  f5                        PUSH    af
  2204  1742  fde5                      PUSH    iy
  2205  1744  dde5                      PUSH    ix
  2206                          
  2207  1746  cd9afd                    CALL    H_KEYI
  2208  1749  dba1                      IN      a,(VDP_STAT)
  2209  174b  b7                        OR      a
  2210  174c  32e7f3                    LD      (STATFL),a                        ; save status
  2211  174f  f27b17                    JP      p,int_end                         ; exit if this is not the VDP int
  2212  1752  cd9ffd                    CALL    H_TIMI
  2213                          
  2214                          ; TODO: (BASIC related stuff)
  2215                          ;       Check sprite collision
  2216                          ;       Update INTCNT
  2217                          
  2218  1755  2a9efc                    LD      hl,(JIFFY)
  2219  1758  23                        INC     hl
  2220  1759  229efc                    LD      (JIFFY),hl
  2221                          
  2222                          ; TODO: MUSICF
  2223                          
  2224                          ; TODO: It seems unsafe to me to already allow interrupts
  2225                          ;       while this one is still busy: possible interference
  2226                          ;       between two interrupts and also the amount of stack
  2227                          ;       space claimed is a lot.
  2228                          ;ei
  2229                          
  2230                          ; Riseout needs that count of RegR in the routine is not
  2231                          ; even number
  2232                          ; nop
  2233                          
  2234  175c  af                        XOR     a
  2235  175d  32d9fb                    LD      (CLIKFL),a
  2236                          
  2237                          
  2238                          
  2239                          ; Scan the keyboard every three interrupts.
  2240                          
  2241  1760  3af6f3                    LD      a,(SCNCNT)
  2242  1763  3d                        DEC     a
  2243  1764  32f6f3                    LD      (SCNCNT),a
  2244  1767  2012                      JR      nz,int_end
  2245  1769  3e03                      LD      a,3
  2246  176b  32f6f3                    LD      (SCNCNT),a
  2247                          
  2248                          ; TODO read joystick triggers and space for TRGFLG
  2249  176e  af                        XOR     a
  2250  176f  cd5f16                    CALL    gttrig
  2251  1772  2f                        CPL
  2252  1773  e601                      AND     $01
  2253  1775  32e8f3                    LD      (TRGFLG),a
  2254                          
  2255                                 IF      KB_USE_SERIAL=1
  2256  1778  cd9017                       CALL    key_in
  2257                                 ENDIF
  2258                          
  2259                                 IF      KB_USE_PS2=1
  2260                                     CALL    KB_PROCESS
  2261                                 ENDIF
  2262                          
  2263                          
  2264                          int_end:
  2265  177b  dde1                      POP     ix
  2266  177d  fde1                      POP     iy
  2267  177f  f1                        POP     af
  2268  1780  c1                        POP     bc
  2269  1781  d1                        POP     de
  2270  1782  e1                        POP     hl
  2271  1783  d9                        EXX
  2272  1784  08                        EX      af,af'
  2273  1785  f1                        pop     af
  2274  1786  c1                        POP     bc
  2275  1787  d1                        POP     de
  2276  1788  e1                        POP     hl
  2277  1789  fb                        EI
  2278  178a  c9                        RET
  2279                          
  2280                          ;--------------------------------
  2281                          ; 0066h NMI interrupt
  2282                          nmi:
  2283  178b  cdd6fd                    CALL    H_NMI
  2284  178e  ed45                      RETN
  2285                          
  2286                          ;--------------------------------
  2287                          ; Get buffer from keyboard input
  2288                          key_in:
  2289  1790  db5d                      IN      A,(UART5)                         ; READ LINE STATUS REGISTER
  2290  1792  cb47                      BIT     0,A                               ; TEST IF DATA IN RECEIVE BUFFER
  2291  1794  cab117                    JP      Z,RETROBREW_KEY_END                   ; IF NO DATA END
  2292  1797  db58                      IN      A,(UART0)                         ; THEN READ THE CHAR FROM THE UART
  2293  1799  f5                        PUSH    AF                                ;
  2294  179a  c5                        PUSH    BC                                ;
  2295  179b  47                        LD      B,A                               ;
  2296  179c  cd1816                    CALL    RETROBREW_KB_STICK                    ;
  2297  179f  c1                        POP     BC                                ;
  2298  17a0  f1                        POP     AF                                ;
  2299  17a1  e5                        PUSH    hl                                ;
  2300  17a2  fe03                      CP      03                                ;
  2301  17a4  2007                      JR      NZ,KEY_IN1                        ;
  2302  17a6  3eff                      LD      A,$FF                             ;
  2303  17a8  327c24                    LD      (BREAKFLAG),A                     ;
  2304  17ab  1803                      JR      KEY_IN2                           ;
  2305                          KEY_IN1:
  2306  17ad  cdb217                    CALL    key_put_into_buf                  ;
  2307                          KEY_IN2:
  2308  17b0  e1                        POP     hl                                ;
  2309                          RETROBREW_KEY_END:
  2310  17b1  c9                        RET
  2311                          
  2312                          
  2313                          ;--------------------------------
  2314                          key_put_into_buf:
  2315  17b2  2af8f3                    LD      hl,(PUTPNT)
  2316  17b5  77                        LD      (hl),a
  2317                          ; Note: Ashguine 2 has a bug: it puts KEYBUF at FDF0 iso FBF0
  2318                          ;       in the name input routine. This writes keys in memory
  2319                          ;       reserved for hooks, but since those hooks are only used
  2320                          ;       by BASIC, the game doesn't suffer. When PUTPNT reaches
  2321                          ;       FE18, it wraps back to FBF0.
  2322  17b6  23                        INC     hl
  2323  17b7  7d                        LD      a,l
  2324                          ;                cp      $00FF & (KEYBUF + 40)
  2325  17b8  fe18                      CP      $18
  2326  17ba  2003                      JR      nz,key_store_nowrap
  2327  17bc  21f0fb                    LD      hl,KEYBUF
  2328                          key_store_nowrap:
  2329                          ; Check whether the buffer is full.
  2330  17bf  d5                        PUSH    de
  2331  17c0  ed5bfaf3                  LD      de,(GETPNT)
  2332  17c4  e7                        RST     20h
  2333  17c5  d1                        POP     de
  2334  17c6  c8                        RET     z
  2335  17c7  22f8f3                    LD      (PUTPNT),hl
  2336  17ca  c9                        RET
  2337                          
  2338                          
  2339                          ;--------------------------------
  2340                          ; $015C SUBROM
  2341                          ; Function : Calls a routine in SUB-ROM
  2342                          ; Input    : IX - Address of routine in SUB-ROM
  2343                          ; Output   : DepenDS on the routine
  2344                          ; Registers: Alternative registers, IY
  2345                          ; Remark   : Use of EXTROM or CALSLT is more convenient.
  2346                          ;            You have to use this routine like this:
  2347                          ;               push    ix
  2348                          ;               jp      subrom
  2349                          ;            The purpose is unclear
  2350                          subrom:
  2351  17cb  dde1                      POP     ix
  2352  17cd  c9                        RET
  2353                          
  2354                          
  2355                          ;--------------------------------
  2356                          ; $015F EXTROM
  2357                          ; Function : Calls a routine in SUB-ROM. Most common way
  2358                          ; Input    : IX - Address of routine in SUB-ROM
  2359                          ; Output   : Depends on the routine
  2360                          ; Registers: Alternative registers, IY
  2361                          ; Remark   : Use: LD IX,address
  2362                          ;                 CALL EXTROM
  2363                          extrom:
  2364                          ; EXTROM needs to save alternative registers
  2365                          ; and when call with certain status, returns with EI
  2366  17ce  c9                        RET
  2367                          
  2368                          ;------------------------------------
  2369                          hang_up_mode:
  2370  17cf  18fe                      JR      $
  2371                          
  2372                          ;------------------------------------
  2373                          ; Called if the stack underflows.
  2374                          stack_error:
  2375  17d1  cddafe                    CALL    H_STKE
  2376  17d4  114f24                    LD      de,str_stack_error
  2377  17d7  c3ee17                    JP      print_error
  2378                          
  2379                          ;------------------------------------
  2380                          ; $0159 CALBAS
  2381                          ; Function : Executes inter-slot call to the routine in BASIC interpreter
  2382                          ; Input    : IX - for the calling address
  2383                          ; Output   : DepenDS on the called routine
  2384                          ; Registers: DepenDS on the called routine
  2385                          calbas:
  2386  17da  e5                        PUSH    hl
  2387  17db  f5                        PUSH    af
  2388  17dc  21e717                    LD      hl,calbas_text
  2389                          ;                call    print_debug
  2390  17df  f1                        POP     af
  2391  17e0  e1                        POP     hl
  2392  17e1  113424                    LD      de,str_no_basic_intr
  2393  17e4  c3ee17                    JP      print_error
  2394                          calbas_text:
  2395  17e7  43414c42415300            DB      "CALBAS",0
  2396                          
  2397                          ;------------------------------------
  2398                          ;Display error
  2399                          ;in DE= message address
  2400                          
  2401                          print_error:
  2402  17ee  dba1                      IN      a,(VDP_STAT)                      ; reset Latch
  2403  17f0  217024                    LD      hl,vdp_bios
  2404  17f3  060c                      LD      b,$0C
  2405  17f5  0ea1                      LD      c,VDP_ADDR
  2406  17f7  edb3                      OTIR
  2407                          
  2408  17f9  010008                    LD      bc,$0800
  2409                          lp_clearmem:
  2410  17fc  af                        XOR     a
  2411  17fd  d3a0                      OUT     (VDP_DATA),a
  2412  17ff  0b                        DEC     bc
  2413  1800  78                        LD      a,b
  2414  1801  b1                        OR      c
  2415  1802  20f8                      JR      nz,lp_clearmem
  2416                          
  2417  1804  21bf1b                    LD      hl,B_Font
  2418  1807  010008                    LD      bc,$0800
  2419                          lp_fontset:
  2420  180a  7e                        LD      a,(hl)
  2421  180b  d3a0                      OUT     (VDP_DATA),a
  2422  180d  23                        INC     hl
  2423  180e  0b                        DEC     bc
  2424  180f  78                        LD      a,b
  2425  1810  b1                        OR      c
  2426  1811  20f7                      JR      nz,lp_fontset
  2427                          
  2428                          ;set cursor to (0,0)
  2429  1813  3e00                      LD      a,$00
  2430  1815  d3a1                      OUT     (VDP_ADDR),a
  2431  1817  3e40                      LD      a,$40
  2432  1819  d3a1                      OUT     (VDP_ADDR),a
  2433                          
  2434  181b  212d24                    LD      hl,str_error_prompt
  2435                          
  2436  181e  7e                        LD      a,(hl)
  2437                          lp_errprn:
  2438  181f  d3a0                      OUT     (VDP_DATA),a
  2439  1821  23                        INC     hl
  2440  1822  7e                        LD      a,(hl)
  2441  1823  a7                        AND     a
  2442  1824  20f9                      JR      nz,lp_errprn
  2443                          
  2444  1826  1a                        LD      a,(de)
  2445                          lp_strprn:
  2446  1827  d3a0                      OUT     (VDP_DATA),a
  2447  1829  13                        INC     de
  2448  182a  1a                        LD      a,(de)
  2449  182b  a7                        AND     a
  2450  182c  20f9                      JR      nz,lp_strprn
  2451                          
  2452  182e  c3cf17                    JP      hang_up_mode
  2453                          
  2454  1831  0000000000000000          DS      $1bbf - $
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              000000000000      
  2455                                  INCLUDE "font.asm"
font.asm:
     1                          ; $Id: font.asm 525 2008-12-22 22:16:42Z mthuurne $
     2                          ; Font data for C-BIOS. Font designed by Eric Boon.
     3                          ; JP version font designed by BouKiCHi.
     4                          ;
     5                          ; Copyright (c) 2004 Eric Boon.  All rights reserved.
     6                          ; Copyright (c) 2002-2005 BouKiCHi.  All rights reserved.
     7                          ;
     8                          ; Redistribution and use in source and binary forms, with or without
     9                          ; modification, are permitted provided that the following conditions
    10                          ; are met:
    11                          ; 1. Redistributions of source code must retain the above copyright
    12                          ;    notice, this list of conditions and the following disclaimer.
    13                          ; 2. Redistributions in binary form must reproduce the above copyright
    14                          ;    notice, this list of conditions and the following disclaimer in the
    15                          ;    documentation and/or other materials provided with the distribution.
    16                          ;
    17                          ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
    18                          ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    19                          ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    20                          ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    21                          ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    22                          ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    23                          ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    24                          ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    25                          ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    26                          ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    27                          
    28                          B_Font:
    29                                  IF      LOCALE_CHSET = LOCAL_CHSET_US
    30                          ; International version
    31  1bbf  0000000000000000              DB      $00,$00,$00,$00,$00,$00,$00,$00   ; 0
    32  1bc7  3c42a5a5c3bd423c              DB      $3C,$42,$A5,$A5,$C3,$BD,$42,$3C   ; 1
    33  1bcf  3c7edbdbbdc37e3c              DB      $3C,$7E,$DB,$DB,$BD,$C3,$7E,$3C   ; 2
    34  1bd7  6caa924444281000              DB      $6C,$AA,$92,$44,$44,$28,$10,$00   ; 3
    35  1bdf  1028448244281000              DB      $10,$28,$44,$82,$44,$28,$10,$00   ; 4
    36  1be7  103838d6fed63800              DB      $10,$38,$38,$D6,$FE,$D6,$38,$00   ; 5
    37  1bef  10387c7cfed63800              DB      $10,$38,$7C,$7C,$FE,$D6,$38,$00   ; 6
    38  1bf7  0000001818000000              DB      $00,$00,$00,$18,$18,$00,$00,$00   ; 7
    39  1bff  ffffffe7e7ffffff              DB      $FF,$FF,$FF,$E7,$E7,$FF,$FF,$FF   ; 8
    40  1c07  3c4281818181423c              DB      $3C,$42,$81,$81,$81,$81,$42,$3C   ; 9
    41  1c0f  c3bd7e7e7e7ebdc3              DB      $C3,$BD,$7E,$7E,$7E,$7E,$BD,$C3   ; 10
    42  1c17  0c04087088887000              DB      $0C,$04,$08,$70,$88,$88,$70,$00   ; 11
    43  1c1f  0070888870207020              DB      $00,$70,$88,$88,$70,$20,$70,$20   ; 12
    44  1c27  2030282820e0c000              DB      $20,$30,$28,$28,$20,$E0,$C0,$00   ; 13
    45  1c2f  383c2424e4dc1800              DB      $38,$3C,$24,$24,$E4,$DC,$18,$00   ; 14
    46  1c37  104438aa38441000              DB      $10,$44,$38,$AA,$38,$44,$10,$00   ; 15
    47  1c3f  1010103810101010              DB      $10,$10,$10,$38,$10,$10,$10,$10   ; 16
    48  1c47  101010ef00000000              DB      $10,$10,$10,$EF,$00,$00,$00,$00   ; 17
    49  1c4f  000000ef10101010              DB      $00,$00,$00,$EF,$10,$10,$10,$10   ; 18
    50  1c57  101010e010101010              DB      $10,$10,$10,$E0,$10,$10,$10,$10   ; 19
    51  1c5f  1010100f10101010              DB      $10,$10,$10,$0F,$10,$10,$10,$10   ; 20
    52  1c67  101010ef10101010              DB      $10,$10,$10,$EF,$10,$10,$10,$10   ; 21
    53  1c6f  1010101010101010              DB      $10,$10,$10,$10,$10,$10,$10,$10   ; 22
    54  1c77  000000ff00000000              DB      $00,$00,$00,$FF,$00,$00,$00,$00   ; 23
    55  1c7f  0000000f10101010              DB      $00,$00,$00,$0F,$10,$10,$10,$10   ; 24
    56  1c87  000000e010101010              DB      $00,$00,$00,$E0,$10,$10,$10,$10   ; 25
    57  1c8f  1010100f00000000              DB      $10,$10,$10,$0F,$00,$00,$00,$00   ; 26
    58  1c97  101010e000000000              DB      $10,$10,$10,$E0,$00,$00,$00,$00   ; 27
    59  1c9f  8142241818244281              DB      $81,$42,$24,$18,$18,$24,$42,$81   ; 28
    60  1ca7  0102040810204080              DB      $01,$02,$04,$08,$10,$20,$40,$80   ; 29
    61  1caf  8040201008040201              DB      $80,$40,$20,$10,$08,$04,$02,$01   ; 30
    62  1cb7  000010ff10000000              DB      $00,$00,$10,$FF,$10,$00,$00,$00   ; 31
    63  1cbf  0000000000000000              DB      $00,$00,$00,$00,$00,$00,$00,$00   ; 32
    64  1cc7  2020202000200000              DB      $20,$20,$20,$20,$00,$20,$00,$00   ; 33
    65  1ccf  5050000000000000              DB      $50,$50,$00,$00,$00,$00,$00,$00   ; 34
    66  1cd7  0050f850f8500000              DB      $00,$50,$F8,$50,$F8,$50,$00,$00   ; 35
    67  1cdf  2070a07028702000              DB      $20,$70,$A0,$70,$28,$70,$20,$00   ; 36
    68  1ce7  00c8d02058980000              DB      $00,$C8,$D0,$20,$58,$98,$00,$00   ; 37
    69  1cef  609060a898600000              DB      $60,$90,$60,$A8,$98,$60,$00,$00   ; 38
    70  1cf7  4040000000000000              DB      $40,$40,$00,$00,$00,$00,$00,$00   ; 39
    71  1cff  2040404040200000              DB      $20,$40,$40,$40,$40,$20,$00,$00   ; 40
    72  1d07  2010101010200000              DB      $20,$10,$10,$10,$10,$20,$00,$00   ; 41
    73  1d0f  0020a87050880000              DB      $00,$20,$A8,$70,$50,$88,$00,$00   ; 42
    74  1d17  002020f820200000              DB      $00,$20,$20,$F8,$20,$20,$00,$00   ; 43
    75  1d1f  0000000000404000              DB      $00,$00,$00,$00,$00,$40,$40,$00   ; 44
    76  1d27  000000f800000000              DB      $00,$00,$00,$F8,$00,$00,$00,$00   ; 45
    77  1d2f  0000000000400000              DB      $00,$00,$00,$00,$00,$40,$00,$00   ; 46
    78  1d37  0008102040800000              DB      $00,$08,$10,$20,$40,$80,$00,$00   ; 47
    79  1d3f  7088a8a888700000              DB      $70,$88,$A8,$A8,$88,$70,$00,$00   ; 48
    80  1d47  2060202020700000              DB      $20,$60,$20,$20,$20,$70,$00,$00   ; 49
    81  1d4f  7088087080f80000              DB      $70,$88,$08,$70,$80,$F8,$00,$00   ; 50
    82  1d57  f808300888700000              DB      $F8,$08,$30,$08,$88,$70,$00,$00   ; 51
    83  1d5f  103050f810100000              DB      $10,$30,$50,$F8,$10,$10,$00,$00   ; 52
    84  1d67  f880700888700000              DB      $F8,$80,$70,$08,$88,$70,$00,$00   ; 53
    85  1d6f  3040708888700000              DB      $30,$40,$70,$88,$88,$70,$00,$00   ; 54
    86  1d77  f888102020200000              DB      $F8,$88,$10,$20,$20,$20,$00,$00   ; 55
    87  1d7f  7088708888700000              DB      $70,$88,$70,$88,$88,$70,$00,$00   ; 56
    88  1d87  7088887808700000              DB      $70,$88,$88,$78,$08,$70,$00,$00   ; 57
    89  1d8f  0000400000400000              DB      $00,$00,$40,$00,$00,$40,$00,$00   ; 58
    90  1d97  0000400000404000              DB      $00,$00,$40,$00,$00,$40,$40,$00   ; 59
    91  1d9f  0018608060180000              DB      $00,$18,$60,$80,$60,$18,$00,$00   ; 60
    92  1da7  0000f800f8000000              DB      $00,$00,$F8,$00,$F8,$00,$00,$00   ; 61
    93  1daf  00c0300830c00000              DB      $00,$C0,$30,$08,$30,$C0,$00,$00   ; 62
    94  1db7  7088302000200000              DB      $70,$88,$30,$20,$00,$20,$00,$00   ; 63
    95  1dbf  708898a8a8984000              DB      $70,$88,$98,$A8,$A8,$98,$40,$00   ; 64
    96  1dc7  708888f888880000              DB      $70,$88,$88,$F8,$88,$88,$00,$00   ; 65
    97  1dcf  e090e09088f00000              DB      $E0,$90,$E0,$90,$88,$F0,$00,$00   ; 66
    98  1dd7  7088808088700000              DB      $70,$88,$80,$80,$88,$70,$00,$00   ; 67
    99  1ddf  f048484848f00000              DB      $F0,$48,$48,$48,$48,$F0,$00,$00   ; 68
   100  1de7  f880e08080f80000              DB      $F8,$80,$E0,$80,$80,$F8,$00,$00   ; 69
   101  1def  f88080e080800000              DB      $F8,$80,$80,$E0,$80,$80,$00,$00   ; 70
   102  1df7  708880b888700000              DB      $70,$88,$80,$B8,$88,$70,$00,$00   ; 71
   103  1dff  8888f88888880000              DB      $88,$88,$F8,$88,$88,$88,$00,$00   ; 72
   104  1e07  7020202020700000              DB      $70,$20,$20,$20,$20,$70,$00,$00   ; 73
   105  1e0f  3808080888700000              DB      $38,$08,$08,$08,$88,$70,$00,$00   ; 74
   106  1e17  8890a0e090880000              DB      $88,$90,$A0,$E0,$90,$88,$00,$00   ; 75
   107  1e1f  8080808080f80000              DB      $80,$80,$80,$80,$80,$F8,$00,$00   ; 76
   108  1e27  d8a8a88888880000              DB      $D8,$A8,$A8,$88,$88,$88,$00,$00   ; 77
   109  1e2f  c8a8a89898880000              DB      $C8,$A8,$A8,$98,$98,$88,$00,$00   ; 78
   110  1e37  7088888888700000              DB      $70,$88,$88,$88,$88,$70,$00,$00   ; 79
   111  1e3f  f08888f080800000              DB      $F0,$88,$88,$F0,$80,$80,$00,$00   ; 80
   112  1e47  708888a890680000              DB      $70,$88,$88,$A8,$90,$68,$00,$00   ; 81
   113  1e4f  f08888f0a0980000              DB      $F0,$88,$88,$F0,$A0,$98,$00,$00   ; 82
   114  1e57  7080700808f00000              DB      $70,$80,$70,$08,$08,$F0,$00,$00   ; 83
   115  1e5f  f820202020200000              DB      $F8,$20,$20,$20,$20,$20,$00,$00   ; 84
   116  1e67  8888888888780000              DB      $88,$88,$88,$88,$88,$78,$00,$00   ; 85
   117  1e6f  8888885050200000              DB      $88,$88,$88,$50,$50,$20,$00,$00   ; 86
   118  1e77  8888a8a8a8d80000              DB      $88,$88,$A8,$A8,$A8,$D8,$00,$00   ; 87
   119  1e7f  8850205088880000              DB      $88,$50,$20,$50,$88,$88,$00,$00   ; 88
   120  1e87  8888702020200000              DB      $88,$88,$70,$20,$20,$20,$00,$00   ; 89
   121  1e8f  f810204080f80000              DB      $F8,$10,$20,$40,$80,$F8,$00,$00   ; 90
   122  1e97  7040404040700000              DB      $70,$40,$40,$40,$40,$70,$00,$00   ; 91
   123  1e9f  0080402010080000              DB      $00,$80,$40,$20,$10,$08,$00,$00   ; 92
   124  1ea7  7010101010700000              DB      $70,$10,$10,$10,$10,$70,$00,$00   ; 93
   125  1eaf  40a0000000000000              DB      $40,$A0,$00,$00,$00,$00,$00,$00   ; 94
   126  1eb7  000000000000f800              DB      $00,$00,$00,$00,$00,$00,$F8,$00   ; 95
   127  1ebf  2010000000000000              DB      $20,$10,$00,$00,$00,$00,$00,$00   ; 96
   128  1ec7  0000788898680000              DB      $00,$00,$78,$88,$98,$68,$00,$00   ; 97
   129  1ecf  8080f08888f00000              DB      $80,$80,$F0,$88,$88,$F0,$00,$00   ; 98
   130  1ed7  0000788080780000              DB      $00,$00,$78,$80,$80,$78,$00,$00   ; 99
   131  1edf  0808788888780000              DB      $08,$08,$78,$88,$88,$78,$00,$00   ; 100
   132  1ee7  00007098e0780000              DB      $00,$00,$70,$98,$E0,$78,$00,$00   ; 101
   133  1eef  30484040e0404040              DB      $30,$48,$40,$40,$E0,$40,$40,$40   ; 102
   134  1ef7  0000788888780870              DB      $00,$00,$78,$88,$88,$78,$08,$70   ; 103
   135  1eff  8080f08888880000              DB      $80,$80,$F0,$88,$88,$88,$00,$00   ; 104
   136  1f07  2000602020700000              DB      $20,$00,$60,$20,$20,$70,$00,$00   ; 105
   137  1f0f  1000301010101060              DB      $10,$00,$30,$10,$10,$10,$10,$60   ; 106
   138  1f17  808098a0e0980000              DB      $80,$80,$98,$A0,$E0,$98,$00,$00   ; 107
   139  1f1f  c040404040700000              DB      $C0,$40,$40,$40,$40,$70,$00,$00   ; 108
   140  1f27  0000f0a8a8a80000              DB      $00,$00,$F0,$A8,$A8,$A8,$00,$00   ; 109
   141  1f2f  0000f08888880000              DB      $00,$00,$F0,$88,$88,$88,$00,$00   ; 110
   142  1f37  0000708888700000              DB      $00,$00,$70,$88,$88,$70,$00,$00   ; 111
   143  1f3f  0000f08888f08080              DB      $00,$00,$F0,$88,$88,$F0,$80,$80   ; 112
   144  1f47  0000788888780808              DB      $00,$00,$78,$88,$88,$78,$08,$08   ; 113
   145  1f4f  0000b8c080800000              DB      $00,$00,$B8,$C0,$80,$80,$00,$00   ; 114
   146  1f57  000078f008f00000              DB      $00,$00,$78,$F0,$08,$F0,$00,$00   ; 115
   147  1f5f  4040f04048300000              DB      $40,$40,$F0,$40,$48,$30,$00,$00   ; 116
   148  1f67  0000888888780000              DB      $00,$00,$88,$88,$88,$78,$00,$00   ; 117
   149  1f6f  0000888850200000              DB      $00,$00,$88,$88,$50,$20,$00,$00   ; 118
   150  1f77  000088a8a8d80000              DB      $00,$00,$88,$A8,$A8,$D8,$00,$00   ; 119
   151  1f7f  0000c83060980000              DB      $00,$00,$C8,$30,$60,$98,$00,$00   ; 120
   152  1f87  0000888888780870              DB      $00,$00,$88,$88,$88,$78,$08,$70   ; 121
   153  1f8f  0000f83040f80000              DB      $00,$00,$F8,$30,$40,$F8,$00,$00   ; 122
   154  1f97  1020204020201000              DB      $10,$20,$20,$40,$20,$20,$10,$00   ; 123
   155  1f9f  2020202020202000              DB      $20,$20,$20,$20,$20,$20,$20,$00   ; 124
   156  1fa7  4020201020204000              DB      $40,$20,$20,$10,$20,$20,$40,$00   ; 125
   157  1faf  50a0000000000000              DB      $50,$A0,$00,$00,$00,$00,$00,$00   ; 126
   158  1fb7  00205050f8000000              DB      $00,$20,$50,$50,$F8,$00,$00,$00   ; 127
   159  1fbf  7088808088702040              DB      $70,$88,$80,$80,$88,$70,$20,$40   ; 128
   160  1fc7  5000888888780000              DB      $50,$00,$88,$88,$88,$78,$00,$00   ; 129
   161  1fcf  08107098e0780000              DB      $08,$10,$70,$98,$E0,$78,$00,$00   ; 130
   162  1fd7  2050788898680000              DB      $20,$50,$78,$88,$98,$68,$00,$00   ; 131
   163  1fdf  5000788898680000              DB      $50,$00,$78,$88,$98,$68,$00,$00   ; 132
   164  1fe7  4020788898680000              DB      $40,$20,$78,$88,$98,$68,$00,$00   ; 133
   165  1fef  2000788898680000              DB      $20,$00,$78,$88,$98,$68,$00,$00   ; 134
   166  1ff7  0000788080782040              DB      $00,$00,$78,$80,$80,$78,$20,$40   ; 135
   167  1fff  20507098e0780000              DB      $20,$50,$70,$98,$E0,$78,$00,$00   ; 136
   168  2007  50007098e0780000              DB      $50,$00,$70,$98,$E0,$78,$00,$00   ; 137
   169  200f  40207098e0780000              DB      $40,$20,$70,$98,$E0,$78,$00,$00   ; 138
   170  2017  5000602020700000              DB      $50,$00,$60,$20,$20,$70,$00,$00   ; 139
   171  201f  2050602020700000              DB      $20,$50,$60,$20,$20,$70,$00,$00   ; 140
   172  2027  4020602020700000              DB      $40,$20,$60,$20,$20,$70,$00,$00   ; 141
   173  202f  50708888f8880000              DB      $50,$70,$88,$88,$F8,$88,$00,$00   ; 142
   174  2037  20708888f8880000              DB      $20,$70,$88,$88,$F8,$88,$00,$00   ; 143
   175  203f  18f880e080f80000              DB      $18,$F8,$80,$E0,$80,$F8,$00,$00   ; 144
   176  2047  0000d068b0d80000              DB      $00,$00,$D0,$68,$B0,$D8,$00,$00   ; 145
   177  204f  78a0b0e0a0b80000              DB      $78,$A0,$B0,$E0,$A0,$B8,$00,$00   ; 146
   178  2057  2050708888700000              DB      $20,$50,$70,$88,$88,$70,$00,$00   ; 147
   179  205f  5000708888700000              DB      $50,$00,$70,$88,$88,$70,$00,$00   ; 148
   180  2067  4020708888700000              DB      $40,$20,$70,$88,$88,$70,$00,$00   ; 149
   181  206f  2050888888780000              DB      $20,$50,$88,$88,$88,$78,$00,$00   ; 150
   182  2077  4020888888780000              DB      $40,$20,$88,$88,$88,$78,$00,$00   ; 151
   183  207f  5000888888780870              DB      $50,$00,$88,$88,$88,$78,$08,$70   ; 152
   184  2087  5070888888700000              DB      $50,$70,$88,$88,$88,$70,$00,$00   ; 153
   185  208f  5088888888700000              DB      $50,$88,$88,$88,$88,$70,$00,$00   ; 154
   186  2097  2020788080782020              DB      $20,$20,$78,$80,$80,$78,$20,$20   ; 155
   187  209f  205040e04048b000              DB      $20,$50,$40,$E0,$40,$48,$B0,$00   ; 156
   188  20a7  888850f820702000              DB      $88,$88,$50,$F8,$20,$70,$20,$00   ; 157
   189  20af  80d0b0b0b8d08880              DB      $80,$D0,$B0,$B0,$B8,$D0,$88,$80   ; 158
   190  20b7  3840f040f0403800              DB      $38,$40,$F0,$40,$F0,$40,$38,$00   ; 159
   191  20bf  0810788898680000              DB      $08,$10,$78,$88,$98,$68,$00,$00   ; 160
   192  20c7  1020602020700000              DB      $10,$20,$60,$20,$20,$70,$00,$00   ; 161
   193  20cf  1020708888700000              DB      $10,$20,$70,$88,$88,$70,$00,$00   ; 162
   194  20d7  1020888888780000              DB      $10,$20,$88,$88,$88,$78,$00,$00   ; 163
   195  20df  2850f08888880000              DB      $28,$50,$F0,$88,$88,$88,$00,$00   ; 164
   196  20e7  28d0a8a898880000              DB      $28,$D0,$A8,$A8,$98,$88,$00,$00   ; 165
   197  20ef  0000788898680070              DB      $00,$00,$78,$88,$98,$68,$00,$70   ; 166
   198  20f7  0000708888700070              DB      $00,$00,$70,$88,$88,$70,$00,$70   ; 167
   199  20ff  2000206088700000              DB      $20,$00,$20,$60,$88,$70,$00,$00   ; 168
   200  2107  000000e080000000              DB      $00,$00,$00,$E0,$80,$00,$00,$00   ; 169
   201  210f  000000e020000000              DB      $00,$00,$00,$E0,$20,$00,$00,$00   ; 170
   202  2117  4048503048903800              DB      $40,$48,$50,$30,$48,$90,$38,$00   ; 171
   203  211f  4048502858b80800              DB      $40,$48,$50,$28,$58,$B8,$08,$00   ; 172
   204  2127  2000202020200000              DB      $20,$00,$20,$20,$20,$20,$00,$00   ; 173
   205  212f  0000004890480000              DB      $00,$00,$00,$48,$90,$48,$00,$00   ; 174
   206  2137  0000009048900000              DB      $00,$00,$00,$90,$48,$90,$00,$00   ; 175
   207  213f  28507088f8880000              DB      $28,$50,$70,$88,$F8,$88,$00,$00   ; 176
   208  2147  2850788898680000              DB      $28,$50,$78,$88,$98,$68,$00,$00   ; 177
   209  214f  2850702020700000              DB      $28,$50,$70,$20,$20,$70,$00,$00   ; 178
   210  2157  2850602020700000              DB      $28,$50,$60,$20,$20,$70,$00,$00   ; 179
   211  215f  2870888888700000              DB      $28,$70,$88,$88,$88,$70,$00,$00   ; 180
   212  2167  2850708888700000              DB      $28,$50,$70,$88,$88,$70,$00,$00   ; 181
   213  216f  2850888888780000              DB      $28,$50,$88,$88,$88,$78,$00,$00   ; 182
   214  2177  2850008888780000              DB      $28,$50,$00,$88,$88,$78,$00,$00   ; 183
   215  217f  fc48484848e80830              DB      $FC,$48,$48,$48,$48,$E8,$08,$30   ; 184
   216  2187  4800d84848e80830              DB      $48,$00,$D8,$48,$48,$E8,$08,$30   ; 185
   217  218f  e06830e858b80800              DB      $E0,$68,$30,$E8,$58,$B8,$08,$00   ; 186
   218  2197  5028000000000000              DB      $50,$28,$00,$00,$00,$00,$00,$00   ; 187
   219  219f  0020508850200000              DB      $00,$20,$50,$88,$50,$20,$00,$00   ; 188
   220  21a7  0048502068a80000              DB      $00,$48,$50,$20,$68,$A8,$00,$00   ; 189
   221  21af  7ca8a8a868282844              DB      $7C,$A8,$A8,$A8,$68,$28,$28,$44   ; 190
   222  21b7  7080708870088870              DB      $70,$80,$70,$88,$70,$08,$88,$70   ; 191
   223  21bf  000000000000ffff              DB      $00,$00,$00,$00,$00,$00,$FF,$FF   ; 192
   224  21c7  f0f0f0f00f0f0f0f              DB      $F0,$F0,$F0,$F0,$0F,$0F,$0F,$0F   ; 193
   225  21cf  0000ffffffffffff              DB      $00,$00,$FF,$FF,$FF,$FF,$FF,$FF   ; 194
   226  21d7  ffff000000000000              DB      $FF,$FF,$00,$00,$00,$00,$00,$00   ; 195
   227  21df  0000003c3c000000              DB      $00,$00,$00,$3C,$3C,$00,$00,$00   ; 196
   228  21e7  ffffffffffff0000              DB      $FF,$FF,$FF,$FF,$FF,$FF,$00,$00   ; 197
   229  21ef  c0c0c0c0c0c0c0c0              DB      $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0   ; 198
   230  21f7  0f0f0f0ff0f0f0f0              DB      $0F,$0F,$0F,$0F,$F0,$F0,$F0,$F0   ; 199
   231  21ff  fcfcfcfcfcfcfcfc              DB      $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC   ; 200
   232  2207  0303030303030303              DB      $03,$03,$03,$03,$03,$03,$03,$03   ; 201
   233  220f  3f3f3f3f3f3f3f3f              DB      $3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F   ; 202
   234  2217  1122448811224488              DB      $11,$22,$44,$88,$11,$22,$44,$88   ; 203
   235  221f  8844221188442211              DB      $88,$44,$22,$11,$88,$44,$22,$11   ; 204
   236  2227  fe7c381000000000              DB      $FE,$7C,$38,$10,$00,$00,$00,$00   ; 205
   237  222f  0000000010387cfe              DB      $00,$00,$00,$00,$10,$38,$7C,$FE   ; 206
   238  2237  80c0e0f0e0c08000              DB      $80,$C0,$E0,$F0,$E0,$C0,$80,$00   ; 207
   239  223f  0103070f07030100              DB      $01,$03,$07,$0F,$07,$03,$01,$00   ; 208
   240  2247  ff7e3c18183c7eff              DB      $FF,$7E,$3C,$18,$18,$3C,$7E,$FF   ; 209
   241  224f  81c3e7ffffe7c381              DB      $81,$C3,$E7,$FF,$FF,$E7,$C3,$81   ; 210
   242  2257  f0f0f0f000000000              DB      $F0,$F0,$F0,$F0,$00,$00,$00,$00   ; 211
   243  225f  000000000f0f0f0f              DB      $00,$00,$00,$00,$0F,$0F,$0F,$0F   ; 212
   244  2267  0f0f0f0f00000000              DB      $0F,$0F,$0F,$0F,$00,$00,$00,$00   ; 213
   245  226f  00000000f0f0f0f0              DB      $00,$00,$00,$00,$F0,$F0,$F0,$F0   ; 214
   246  2277  3333cccc3333cccc              DB      $33,$33,$CC,$CC,$33,$33,$CC,$CC   ; 215
   247  227f  001028287c000000              DB      $00,$10,$28,$28,$7C,$00,$00,$00   ; 216
   248  2287  1010381038101000              DB      $10,$10,$38,$10,$38,$10,$10,$00   ; 217
   249  228f  00005088a8500000              DB      $00,$00,$50,$88,$A8,$50,$00,$00   ; 218
   250  2297  ffffffffffffffff              DB      $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; 219
   251  229f  00000000ffffffff              DB      $00,$00,$00,$00,$FF,$FF,$FF,$FF   ; 220
   252  22a7  f0f0f0f0f0f0f0f0              DB      $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0   ; 221
   253  22af  0f0f0f0f0f0f0f0f              DB      $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F   ; 222
   254  22b7  ffffffff00000000              DB      $FF,$FF,$FF,$FF,$00,$00,$00,$00   ; 223
   255  22bf  0000689090680000              DB      $00,$00,$68,$90,$90,$68,$00,$00   ; 224
   256  22c7  6090e09090e08000              DB      $60,$90,$E0,$90,$90,$E0,$80,$00   ; 225
   257  22cf  f888808080800000              DB      $F8,$88,$80,$80,$80,$80,$00,$00   ; 226
   258  22d7  f850505050488000              DB      $F8,$50,$50,$50,$50,$48,$80,$00   ; 227
   259  22df  f848204088f80000              DB      $F8,$48,$20,$40,$88,$F8,$00,$00   ; 228
   260  22e7  0000789088700000              DB      $00,$00,$78,$90,$88,$70,$00,$00   ; 229
   261  22ef  00008888c8b08080              DB      $00,$00,$88,$88,$C8,$B0,$80,$80   ; 230
   262  22f7  0000505020505020              DB      $00,$00,$50,$50,$20,$50,$50,$20   ; 231
   263  22ff  702070a8a8702070              DB      $70,$20,$70,$A8,$A8,$70,$20,$70   ; 232
   264  2307  7088f88888700000              DB      $70,$88,$F8,$88,$88,$70,$00,$00   ; 233
   265  230f  7088888850d80000              DB      $70,$88,$88,$88,$50,$D8,$00,$00   ; 234
   266  2317  3040304848300000              DB      $30,$40,$30,$48,$48,$30,$00,$00   ; 235
   267  231f  000050a8a8500000              DB      $00,$00,$50,$A8,$A8,$50,$00,$00   ; 236
   268  2327  001070a8a8704000              DB      $00,$10,$70,$A8,$A8,$70,$40,$00   ; 237
   269  232f  007080e080700000              DB      $00,$70,$80,$E0,$80,$70,$00,$00   ; 238
   270  2337  7088888888880000              DB      $70,$88,$88,$88,$88,$88,$00,$00   ; 239
   271  233f  00f800f800f80000              DB      $00,$F8,$00,$F8,$00,$F8,$00,$00   ; 240
   272  2347  002020f82020f800              DB      $00,$20,$20,$F8,$20,$20,$F8,$00   ; 241
   273  234f  00c0300830c0f800              DB      $00,$C0,$30,$08,$30,$C0,$F8,$00   ; 242
   274  2357  001860806018f800              DB      $00,$18,$60,$80,$60,$18,$F8,$00   ; 243
   275  235f  0018202020202020              DB      $00,$18,$20,$20,$20,$20,$20,$20   ; 244
   276  2367  202020202020c000              DB      $20,$20,$20,$20,$20,$20,$C0,$00   ; 245
   277  236f  002000f800200000              DB      $00,$20,$00,$F8,$00,$20,$00,$00   ; 246
   278  2377  0068b00068b00000              DB      $00,$68,$B0,$00,$68,$B0,$00,$00   ; 247
   279  237f  0030484830000000              DB      $00,$30,$48,$48,$30,$00,$00,$00   ; 248
   280  2387  0030787830000000              DB      $00,$30,$78,$78,$30,$00,$00,$00   ; 249
   281  238f  0000000030000000              DB      $00,$00,$00,$00,$30,$00,$00,$00   ; 250
   282  2397  1c10109050301000              DB      $1C,$10,$10,$90,$50,$30,$10,$00   ; 251
   283  239f  e090900000000000              DB      $E0,$90,$90,$00,$00,$00,$00,$00   ; 252
   284  23a7  601060f000000000              DB      $60,$10,$60,$F0,$00,$00,$00,$00   ; 253
   285  23af  0070707070707000              DB      $00,$70,$70,$70,$70,$70,$70,$00   ; 254
   286  23b7  aa55aa55aa55aa55              DB      $AA,$55,$AA,$55,$AA,$55,$AA,$55   ; 255
   287                                  ELSE
   288                          ; Japanese Localized font
   289                                      DB      $00,$00,$00,$00,$00,$00,$00,$00   ;1
   290                                      DB      $00,$7C,$44,$7C,$44,$7C,$44,$8C   ;2
   291                                      DB      $00,$20,$A4,$A4,$20,$30,$48,$84   ;3
   292                                      DB      $00,$12,$14,$F8,$38,$54,$92,$10   ;4
   293                                      DB      $00,$10,$7C,$10,$38,$54,$92,$10   ;5
   294                                      DB      $00,$38,$54,$BA,$10,$38,$54,$FE   ;6
   295                                      DB      $00,$10,$10,$7C,$10,$10,$10,$FE   ;7
   296                                      DB      $00,$7C,$44,$44,$7C,$44,$44,$7C   ;8
   297                                      DB      $00,$40,$7C,$90,$7C,$50,$FC,$10   ;9
   298                                      DB      $00,$FC,$A4,$A4,$FC,$84,$84,$84   ;10
   299                                      DB      $00,$04,$EE,$A4,$FE,$AC,$E4,$0C   ;11
   300                                      DB      $00,$28,$44,$82,$7C,$24,$44,$48   ;12
   301                                      DB      $00,$24,$CE,$55,$EC,$62,$D2,$44   ;13
   302                                      DB      $00,$7C,$20,$7C,$44,$7C,$44,$7C   ;14
   303                                      DB      $00,$1C,$70,$10,$FE,$10,$10,$10   ;15
   304                                      DB      $00,$FC,$40,$40,$7C,$44,$84,$88   ;16
   305                                      DB      $00,$00,$7C,$28,$28,$48,$48,$8C   ;17
   306                                      DB      $10,$10,$10,$10,$FF,$00,$00,$00   ;18
   307                                      DB      $00,$00,$00,$00,$FF,$10,$10,$10   ;19
   308                                      DB      $10,$10,$10,$10,$F0,$10,$10,$10   ;20
   309                                      DB      $10,$10,$10,$10,$1F,$10,$10,$10   ;21
   310                                      DB      $10,$10,$10,$10,$FF,$10,$10,$10   ;22
   311                                      DB      $10,$10,$10,$10,$10,$10,$10,$10   ;23
   312                                      DB      $00,$00,$00,$00,$FF,$00,$00,$00   ;24
   313                                      DB      $00,$00,$00,$00,$1F,$10,$10,$10   ;25
   314                                      DB      $00,$00,$00,$00,$F0,$10,$10,$10   ;26
   315                                      DB      $10,$10,$10,$10,$1F,$00,$00,$00   ;27
   316                                      DB      $10,$10,$10,$10,$F0,$00,$00,$00   ;28
   317                                      DB      $81,$42,$24,$18,$18,$24,$42,$81   ;29
   318                                      DB      $00,$10,$7C,$10,$10,$28,$48,$84   ;30
   319                                      DB      $00,$10,$7C,$54,$7C,$10,$10,$10   ;31
   320                                      DB      $00,$10,$10,$54,$54,$94,$10,$30   ;32
   321                                      DB      $00,$00,$00,$00,$00,$00,$00,$00   ;33
   322                                      DB      $00,$18,$18,$18,$18,$18,$00,$18   ;34
   323                                      DB      $00,$6C,$6C,$24,$00,$00,$00,$00   ;35
   324                                      DB      $00,$24,$7E,$24,$7E,$24,$24,$00   ;36
   325                                      DB      $14,$3E,$54,$54,$3E,$15,$15,$3E   ;37
   326                                      DB      $00,$22,$54,$28,$12,$25,$42,$00   ;38
   327                                      DB      $38,$44,$44,$28,$32,$4A,$7C,$00   ;39
   328                                      DB      $00,$60,$60,$20,$00,$00,$00,$00   ;40
   329                                      DB      $00,$08,$10,$10,$10,$10,$08,$00   ;41
   330                                      DB      $00,$10,$08,$08,$08,$08,$10,$00   ;42
   331                                      DB      $00,$10,$54,$38,$10,$38,$54,$00   ;43
   332                                      DB      $00,$00,$10,$10,$7C,$10,$10,$00   ;44
   333                                      DB      $00,$00,$00,$00,$60,$60,$20,$00   ;45
   334                                      DB      $00,$00,$00,$7E,$00,$00,$00,$00   ;46
   335                                      DB      $00,$00,$00,$00,$00,$60,$60,$00   ;47
   336                                      DB      $00,$02,$04,$08,$10,$20,$40,$00   ;48
   337                                      DB      $00,$38,$4C,$54,$54,$64,$38,$00   ;49
   338                                      DB      $00,$10,$30,$10,$10,$10,$38,$00   ;50
   339                                      DB      $00,$38,$44,$04,$38,$40,$7C,$00   ;51
   340                                      DB      $00,$78,$04,$38,$04,$04,$78,$00   ;52
   341                                      DB      $00,$44,$44,$44,$7C,$04,$04,$00   ;53
   342                                      DB      $00,$7C,$40,$78,$04,$04,$78,$00   ;54
   343                                      DB      $00,$38,$40,$78,$44,$44,$38,$00   ;55
   344                                      DB      $00,$7C,$44,$08,$08,$10,$10,$00   ;56
   345                                      DB      $00,$38,$44,$38,$44,$44,$38,$00   ;57
   346                                      DB      $00,$38,$44,$44,$3C,$04,$38,$00   ;58
   347                                      DB      $00,$18,$18,$00,$00,$18,$18,$00   ;59
   348                                      DB      $00,$18,$18,$00,$00,$18,$18,$08   ;60
   349                                      DB      $00,$08,$10,$20,$40,$20,$10,$08   ;61
   350                                      DB      $00,$00,$7C,$00,$7C,$00,$00,$00   ;62
   351                                      DB      $00,$20,$10,$08,$04,$08,$10,$20   ;63
   352                                      DB      $00,$38,$44,$04,$18,$10,$00,$10   ;64
   353                                      DB      $00,$3C,$5A,$6A,$5A,$46,$3C,$00   ;65
   354                                      DB      $00,$10,$28,$28,$7C,$44,$44,$00   ;66
   355                                      DB      $00,$78,$44,$78,$44,$44,$78,$00   ;67
   356                                      DB      $00,$38,$44,$40,$40,$44,$38,$00   ;68
   357                                      DB      $00,$78,$44,$44,$44,$44,$78,$00   ;69
   358                                      DB      $00,$7C,$40,$7C,$40,$40,$7C,$00   ;70
   359                                      DB      $00,$7C,$40,$40,$78,$40,$40,$00   ;71
   360                                      DB      $00,$38,$44,$40,$4E,$44,$38,$00   ;72
   361                                      DB      $00,$44,$44,$7C,$44,$44,$44,$00   ;73
   362                                      DB      $00,$38,$10,$10,$10,$10,$38,$00   ;74
   363                                      DB      $00,$1C,$08,$08,$08,$48,$30,$00   ;75
   364                                      DB      $00,$44,$48,$50,$68,$44,$44,$00   ;76
   365                                      DB      $00,$40,$40,$40,$40,$40,$7C,$00   ;77
   366                                      DB      $00,$44,$6C,$54,$44,$44,$44,$00   ;78
   367                                      DB      $00,$44,$64,$54,$54,$4C,$44,$00   ;79
   368                                      DB      $00,$38,$44,$44,$44,$44,$38,$00   ;80
   369                                      DB      $00,$78,$44,$44,$78,$40,$40,$00   ;81
   370                                      DB      $00,$38,$44,$44,$54,$4C,$3C,$06   ;82
   371                                      DB      $00,$78,$44,$44,$78,$44,$44,$00   ;83
   372                                      DB      $00,$3C,$40,$38,$04,$44,$38,$00   ;84
   373                                      DB      $00,$7C,$10,$10,$10,$10,$10,$00   ;85
   374                                      DB      $00,$44,$44,$44,$44,$44,$38,$00   ;86
   375                                      DB      $00,$44,$44,$28,$28,$10,$10,$00   ;87
   376                                      DB      $00,$54,$54,$54,$54,$28,$28,$00   ;88
   377                                      DB      $00,$44,$28,$10,$10,$28,$44,$00   ;89
   378                                      DB      $00,$44,$44,$28,$10,$10,$10,$00   ;90
   379                                      DB      $00,$7C,$04,$08,$10,$20,$7C,$00   ;91
   380                                      DB      $00,$38,$20,$20,$20,$20,$38,$00   ;92
   381                                      DB      $00,$44,$28,$7C,$10,$7C,$10,$00   ;93
   382                                      DB      $00,$38,$08,$08,$08,$08,$38,$00   ;94
   383                                      DB      $00,$10,$28,$44,$00,$00,$00,$00   ;95
   384                                      DB      $00,$00,$00,$00,$00,$00,$7C,$00   ;96
   385                                      DB      $00,$30,$30,$10,$00,$00,$00,$00   ;97
   386                                      DB      $00,$00,$38,$04,$3C,$44,$3C,$00   ;98
   387                                      DB      $00,$40,$40,$78,$44,$44,$78,$00   ;99
   388                                      DB      $00,$00,$38,$44,$40,$44,$38,$00   ;100
   389                                      DB      $00,$04,$04,$3C,$44,$44,$3C,$00   ;101
   390                                      DB      $00,$00,$38,$44,$7C,$40,$3C,$00   ;102
   391                                      DB      $00,$08,$10,$38,$10,$10,$10,$00   ;103
   392                                      DB      $00,$00,$3C,$44,$3C,$44,$38,$00   ;104
   393                                      DB      $00,$40,$40,$78,$44,$44,$44,$00   ;105
   394                                      DB      $00,$10,$00,$30,$10,$10,$38,$00   ;106
   395                                      DB      $00,$10,$00,$10,$10,$10,$60,$00   ;107
   396                                      DB      $00,$20,$24,$28,$30,$28,$24,$00   ;108
   397                                      DB      $00,$10,$10,$10,$10,$10,$10,$00   ;109
   398                                      DB      $00,$00,$78,$54,$54,$54,$54,$00   ;110
   399                                      DB      $00,$00,$78,$44,$44,$44,$44,$00   ;111
   400                                      DB      $00,$00,$38,$44,$44,$44,$38,$00   ;112
   401                                      DB      $00,$00,$78,$44,$78,$40,$40,$00   ;113
   402                                      DB      $00,$04,$3C,$44,$3C,$04,$04,$00   ;114
   403                                      DB      $00,$00,$5C,$60,$40,$40,$40,$00   ;115
   404                                      DB      $00,$00,$3C,$40,$38,$04,$78,$00   ;116
   405                                      DB      $00,$20,$78,$20,$20,$20,$18,$00   ;117
   406                                      DB      $00,$00,$48,$48,$48,$48,$34,$00   ;118
   407                                      DB      $00,$00,$44,$44,$44,$28,$10,$00   ;119
   408                                      DB      $00,$00,$54,$54,$54,$54,$28,$00   ;120
   409                                      DB      $00,$00,$44,$28,$10,$28,$44,$00   ;121
   410                                      DB      $00,$00,$44,$28,$10,$10,$20,$00   ;122
   411                                      DB      $00,$00,$7C,$08,$10,$20,$7C,$00   ;123
   412                                      DB      $00,$08,$10,$10,$20,$10,$10,$08   ;124
   413                                      DB      $00,$10,$10,$10,$10,$10,$10,$00   ;125
   414                                      DB      $00,$10,$08,$08,$04,$08,$08,$10   ;126
   415                                      DB      $00,$32,$4C,$00,$00,$00,$00,$00   ;127
   416                                      DB      $00,$00,$00,$00,$00,$00,$00,$00   ;128
   417                                      DB      $00,$18,$3C,$7E,$7E,$18,$3C,$00   ;129
   418                                      DB      $00,$24,$7E,$7E,$7E,$3C,$18,$00   ;130
   419                                      DB      $00,$18,$18,$7E,$7E,$18,$3C,$00   ;131
   420                                      DB      $00,$18,$3C,$7E,$7E,$3C,$18,$00   ;132
   421                                      DB      $00,$3C,$42,$42,$42,$42,$3C,$00   ;133
   422                                      DB      $00,$3C,$7E,$7E,$7E,$7E,$3C,$00   ;134
   423                                      DB      $00,$10,$7C,$20,$78,$54,$28,$3C   ;135
   424                                      DB      $00,$00,$10,$7C,$10,$7C,$5C,$74   ;136
   425                                      DB      $00,$00,$00,$00,$48,$44,$44,$24   ;137
   426                                      DB      $00,$00,$20,$10,$78,$08,$08,$10   ;138
   427                                      DB      $00,$00,$20,$10,$78,$08,$30,$48   ;139
   428                                      DB      $00,$00,$10,$7C,$14,$78,$54,$34   ;140
   429                                      DB      $00,$00,$00,$50,$F8,$54,$48,$20   ;141
   430                                      DB      $00,$00,$00,$50,$7C,$54,$18,$20   ;142
   431                                      DB      $00,$00,$00,$10,$1C,$30,$58,$34   ;143
   432                                      DB      $00,$00,$00,$00,$78,$04,$04,$38   ;144
   433                                      DB      $00,$00,$00,$00,$00,$00,$00,$00   ;145
   434                                      DB      $00,$20,$F8,$20,$7C,$AC,$B4,$74   ;146
   435                                      DB      $00,$00,$88,$88,$84,$84,$A4,$40   ;147
   436                                      DB      $00,$60,$00,$70,$88,$08,$10,$60   ;148
   437                                      DB      $00,$60,$10,$F8,$20,$60,$50,$98   ;149
   438                                      DB      $00,$24,$F4,$20,$78,$A4,$A4,$68   ;150
   439                                      DB      $00,$48,$E4,$54,$50,$90,$10,$60   ;151
   440                                      DB      $00,$40,$F8,$20,$F8,$10,$80,$70   ;152
   441                                      DB      $00,$20,$20,$40,$80,$40,$20,$20   ;153
   442                                      DB      $00,$88,$88,$BC,$88,$88,$88,$50   ;154
   443                                      DB      $00,$00,$F8,$08,$00,$00,$80,$78   ;155
   444                                      DB      $00,$20,$F8,$20,$20,$00,$80,$70   ;156
   445                                      DB      $00,$80,$80,$80,$80,$80,$88,$70   ;157
   446                                      DB      $00,$10,$FC,$30,$50,$30,$10,$60   ;158
   447                                      DB      $00,$48,$FC,$48,$48,$48,$40,$38   ;159
   448                                      DB      $00,$44,$28,$FC,$30,$40,$40,$38   ;160
   449                                      DB      $00,$00,$00,$00,$00,$00,$00,$00   ;161
   450                                      DB      $00,$00,$00,$00,$08,$14,$08,$00   ;162
   451                                      DB      $00,$60,$40,$40,$00,$00,$00,$00   ;163
   452                                      DB      $00,$00,$00,$00,$04,$04,$0C,$00   ;164
   453                                      DB      $00,$00,$00,$00,$10,$08,$08,$00   ;165
   454                                      DB      $00,$00,$00,$30,$30,$00,$00,$00   ;166
   455                                      DB      $00,$00,$00,$7C,$04,$7C,$04,$38   ;167
   456                                      DB      $00,$00,$00,$7C,$04,$14,$10,$20   ;168
   457                                      DB      $00,$00,$00,$08,$18,$70,$10,$10   ;169
   458                                      DB      $00,$00,$00,$10,$7C,$44,$04,$18   ;170
   459                                      DB      $00,$00,$00,$00,$38,$10,$10,$7C   ;171
   460                                      DB      $00,$00,$00,$08,$7C,$18,$28,$48   ;172
   461                                      DB      $00,$00,$00,$20,$7C,$24,$24,$20   ;173
   462                                      DB      $00,$00,$00,$00,$38,$08,$08,$7C   ;174
   463                                      DB      $00,$00,$00,$7C,$04,$7C,$04,$7C   ;175
   464                                      DB      $00,$00,$00,$54,$54,$04,$04,$18   ;176
   465                                      DB      $00,$00,$00,$40,$3C,$00,$00,$00   ;177
   466                                      DB      $00,$7C,$04,$14,$14,$14,$20,$40   ;178
   467                                      DB      $00,$04,$08,$18,$30,$50,$10,$10   ;179
   468                                      DB      $00,$10,$7C,$44,$44,$04,$08,$10   ;180
   469                                      DB      $00,$00,$7C,$10,$10,$10,$10,$7C   ;181
   470                                      DB      $00,$08,$7C,$08,$18,$28,$48,$18   ;182
   471                                      DB      $00,$10,$7C,$14,$24,$24,$44,$08   ;183
   472                                      DB      $00,$10,$7C,$10,$7C,$10,$10,$10   ;184
   473                                      DB      $00,$20,$3C,$24,$44,$08,$08,$30   ;185
   474                                      DB      $00,$20,$3C,$28,$48,$08,$10,$20   ;186
   475                                      DB      $00,$00,$7C,$04,$04,$04,$04,$7C   ;187
   476                                      DB      $00,$28,$7C,$28,$28,$08,$08,$30   ;188
   477                                      DB      $00,$64,$04,$64,$04,$04,$08,$70   ;189
   478                                      DB      $00,$7C,$04,$04,$08,$10,$28,$44   ;190
   479                                      DB      $00,$20,$7C,$24,$20,$20,$20,$1C   ;191
   480                                      DB      $00,$44,$44,$44,$04,$04,$08,$30   ;192
   481                                      DB      $00,$1C,$24,$24,$7C,$04,$08,$10   ;193
   482                                      DB      $00,$04,$78,$10,$7C,$10,$10,$20   ;194
   483                                      DB      $00,$54,$54,$54,$04,$04,$08,$30   ;195
   484                                      DB      $00,$38,$00,$7C,$10,$10,$10,$20   ;196
   485                                      DB      $00,$20,$20,$20,$38,$24,$20,$20   ;197
   486                                      DB      $00,$10,$7C,$10,$10,$10,$10,$20   ;198
   487                                      DB      $00,$00,$38,$00,$00,$00,$00,$7C   ;199
   488                                      DB      $00,$7C,$04,$48,$30,$10,$28,$44   ;200
   489                                      DB      $00,$10,$7C,$08,$38,$54,$54,$10   ;201
   490                                      DB      $00,$08,$08,$08,$08,$10,$10,$60   ;202
   491                                      DB      $00,$08,$08,$48,$44,$44,$44,$44   ;203
   492                                      DB      $00,$40,$78,$40,$40,$40,$40,$3C   ;204
   493                                      DB      $00,$00,$7C,$04,$04,$08,$08,$30   ;205
   494                                      DB      $00,$00,$20,$50,$48,$04,$04,$00   ;206
   495                                      DB      $00,$10,$7C,$10,$10,$54,$54,$10   ;207
   496                                      DB      $00,$00,$7C,$04,$48,$30,$10,$08   ;208
   497                                      DB      $00,$60,$1C,$60,$1C,$00,$60,$1C   ;209
   498                                      DB      $00,$10,$20,$28,$48,$44,$7C,$04   ;210
   499                                      DB      $00,$04,$04,$28,$10,$18,$24,$40   ;211
   500                                      DB      $00,$7C,$20,$20,$7C,$20,$20,$1C   ;212
   501                                      DB      $00,$20,$FC,$24,$24,$10,$10,$10   ;213
   502                                      DB      $00,$78,$08,$08,$08,$08,$08,$7C   ;214
   503                                      DB      $00,$7C,$04,$04,$7C,$04,$04,$7C   ;215
   504                                      DB      $00,$38,$00,$7C,$04,$04,$04,$38   ;216
   505                                      DB      $00,$48,$48,$48,$48,$08,$08,$30   ;217
   506                                      DB      $00,$48,$48,$48,$48,$48,$48,$8C   ;218
   507                                      DB      $00,$40,$40,$40,$40,$44,$48,$70   ;219
   508                                      DB      $00,$7C,$44,$44,$44,$44,$44,$7C   ;220
   509                                      DB      $00,$7C,$44,$44,$04,$04,$04,$38   ;221
   510                                      DB      $00,$64,$04,$04,$04,$08,$08,$70   ;222
   511                                      DB      $00,$00,$50,$28,$00,$00,$00,$00   ;223
   512                                      DB      $00,$20,$50,$20,$00,$00,$00,$00   ;224
   513                                      DB      $00,$20,$78,$20,$5C,$40,$40,$9C   ;225
   514                                      DB      $00,$20,$7C,$20,$78,$84,$04,$18   ;226
   515                                      DB      $00,$00,$38,$C4,$04,$04,$04,$78   ;227
   516                                      DB      $00,$00,$3C,$C8,$10,$20,$20,$18   ;228
   517                                      DB      $00,$84,$48,$30,$20,$40,$40,$3C   ;229
   518                                      DB      $00,$88,$64,$60,$90,$38,$50,$30   ;230
   519                                      DB      $00,$40,$5C,$80,$80,$80,$80,$5C   ;231
   520                                      DB      $00,$80,$44,$78,$D8,$A8,$BC,$58   ;232
   521                                      DB      $00,$48,$D8,$68,$48,$D8,$EC,$58   ;233
   522                                      DB      $00,$00,$38,$54,$94,$A4,$A4,$68   ;234
   523                                      DB      $00,$08,$BC,$88,$88,$B8,$AC,$B4   ;235
   524                                      DB      $00,$00,$6C,$A8,$48,$48,$48,$30   ;236
   525                                      DB      $00,$00,$70,$00,$20,$10,$94,$A4   ;237
   526                                      DB      $00,$00,$00,$30,$48,$88,$84,$04   ;238
   527                                      DB      $00,$00,$9C,$88,$BC,$98,$AC,$58   ;239
   528                                      DB      $00,$20,$FC,$20,$FC,$70,$A8,$64   ;240
   529                                      DB      $00,$00,$E0,$28,$78,$AC,$A8,$50   ;241
   530                                      DB      $00,$28,$F4,$20,$60,$A4,$64,$38   ;242
   531                                      DB      $00,$84,$74,$48,$B4,$94,$AC,$48   ;243
   532                                      DB      $00,$20,$F8,$40,$FC,$40,$40,$38   ;244
   533                                      DB      $00,$90,$5C,$74,$D4,$48,$40,$20   ;245
   534                                      DB      $00,$90,$B8,$D4,$94,$1C,$10,$20   ;246
   535                                      DB      $00,$20,$38,$20,$70,$A8,$A8,$60   ;247
   536                                      DB      $00,$40,$20,$80,$B8,$C8,$08,$30   ;248
   537                                      DB      $00,$90,$88,$88,$88,$08,$10,$20   ;249
   538                                      DB      $00,$78,$10,$30,$C8,$38,$48,$30   ;250
   539                                      DB      $00,$40,$E8,$58,$68,$48,$C8,$4C   ;251
   540                                      DB      $00,$78,$08,$30,$48,$84,$04,$38   ;252
   541                                      DB      $00,$40,$E0,$58,$64,$44,$C4,$58   ;253
   542                                      DB      $00,$10,$10,$20,$30,$50,$68,$CC   ;254
   543                                      DB      $00,$00,$00,$00,$00,$00,$00,$00   ;255
   544                                      DB      $00,$00,$00,$00,$00,$00,$00,$00   ;256
   545                                  ENDIF
   546                          
main.asm:
  2456                          
  2457                                  INCLUDE "slot.asm"
slot.asm:
     1                          CART_SLOT_1_ADDR_HI EQU $10
     2                          CART_SLOT_1_ADDR_LO EQU $11
     3                          CART_SLOT_1_ADDR_CONT EQU $12
     4                          CART_SLOT_1_ADDR_READ EQU $13
     5                          
     6                          
     7                          ;-------------------------------------
     8                          ; 000Ch RDSLT
     9                          ; Reads a value from an address in another slot.
    10                          ; Input:   A  = slot ID: E000SSPP
    11                          ;          HL = address to read
    12                          ; Output:  A  = value read
    13                          ;          Interrupts disabled.
    14                          ; Changes: F, C, DE
    15                          rdslt:
    16  23bf  c5                        PUSH    bc
    17  23c0  e5                        PUSH    hl
    18  23c1  f3                        DI
    19  23c2  f5                        PUSH    AF
    20  23c3  e60c                      AND     %00001100                         ; RETROBREW SUPPORTS CART READER IN SLOT 1
    21  23c5  fe04                      CP      %00000100
    22  23c7  c2f523                    JP      NZ,RDSLTEXIT                      ;
    23  23ca  f1                        POP     AF
    24  23cb  e603                      AND     %00000011                         ; RETROBREW SUPPORTS CART PAGES 1 AND 2
    25  23cd  fe01                      CP      %00000001                         ; SLOT 1?
    26  23cf  c2e123                    JP      NZ,RDSLTNOTP1                     ;
    27  23d2  7c                        LD      A,H                               ;
    28  23d3  d310                      OUT     (CART_SLOT_1_ADDR_HI),A
    29  23d5  7d                        LD      A,L                               ;
    30  23d6  d311                      OUT     (CART_SLOT_1_ADDR_LO),A
    31  23d8  3e06                      LD      A,%00000110
    32  23da  d312                      OUT     (CART_SLOT_1_ADDR_CONT),A
    33  23dc  db13                      IN      A,(CART_SLOT_1_ADDR_READ)
    34  23de  c3f823                    JP      RDSLTEXIT2
    35                          RDSLTNOTP1:
    36  23e1  fe02                      CP      %00000010                         ; SLOT 2?
    37  23e3  c2f623                    JP      NZ,RDSLTEXIT1                     ;
    38  23e6  7c                        LD      A,H                               ;
    39  23e7  d310                      OUT     (CART_SLOT_1_ADDR_HI),A
    40  23e9  7d                        LD      A,L                               ;
    41  23ea  d311                      OUT     (CART_SLOT_1_ADDR_LO),A
    42  23ec  3e05                      LD      A,%00000101
    43  23ee  d312                      OUT     (CART_SLOT_1_ADDR_CONT),A
    44  23f0  db13                      IN      A,(CART_SLOT_1_ADDR_READ)
    45  23f2  c3f823                    JP      RDSLTEXIT2
    46                          RDSLTEXIT:
    47  23f5  f1                        POP     AF
    48                          RDSLTEXIT1:
    49  23f6  3eff                      LD      A,$FF
    50                          RDSLTEXIT2:
    51                          ; TODO: SUPPORT READING SLOTS 0 AND 2 (FROM ALT BANKS ON HC)
    52  23f8  fb                        EI
    53  23f9  e1                        POP     hl                                ; HL = address
    54  23fa  c1                        POP     bc
    55  23fb  c9                        RET
    56                          
    57                          rdsft:
    58  23fc  04                        INC     b
    59  23fd  05                        DEC     b
    60  23fe  c8                        RET     z
    61                          rdsft_lp:
    62  23ff  07                        RLCA
    63  2400  07                        RLCA
    64  2401  10fc                      DJNZ    rdsft_lp
    65  2403  c9                        RET
    66                          
    67                          ;-------------------------------------
    68                          ; $0014 WRSLT
    69                          ; Writes a value to an address in another slot.
    70                          ; Input:   A  = slot ID: E000SSPP
    71                          ;          HL = address to write
    72                          ;          E  = value to write
    73                          ; Output:  Interrupts disabled.
    74                          ; Changes: AF, BC, D
    75                          wrslt:
    76                          ;  WRITING TO A SLOT IS NOT SUPPORTED WITH RETROBREW HARDWARE
    77  2404  c9                        RET
    78                          
    79                          ;-------------------------------------
    80                          ; $001C CALSLT
    81                          ; Function : Executes inter-slot call.
    82                          ; Input    : IY - High byte with input for A in RDSLT
    83                          ;            IX - The address that will be called
    84                          ; Remark   : Variables can never be given in alternative registers
    85                          ;            of the Z-80 or IX and IY
    86                          
    87                          calslt:
    88                          ; EXECUTING CODE FROM CARTS IS NOT SUPPORTED ON THE RETROBREW
    89                          ; TODO: USE BANK SWITCHING TO COPY CODE INTO A RAM BANK AND EXECUTE THERE
    90  2405  c9                        RET
    91                          
    92                          ;--------------------------------
    93                          ; 0024h ENASLT
    94                          ; in .. hl=address, a=slot�ԍ�
    95                          ; A = FxxxEESS
    96                          ; RegA �ڍ�
    97                          ; F = �g���X���b�g�̃t���O
    98                          ; E = �g���X���b�g�ԍ�
    99                          ; S = �X���b�g�ԍ�
   100                          ; Dest. AF,BC,DE,DI
   101                          
   102                          enaslt:
   103                          ; TODO: USE BANK SWITCHING TO COPY CODE INTO A RAM BANK AND THEN ENABLE
   104  2406  c9                        RET
   105                          
main.asm:
  2458                          
  2459                          ;---------------------------------
  2460                          ; system messages
  2461                          ;---------------------------------
  2462                          
  2463                          str_proginfo:
  2464                          ;       [01234567890123456789012345678]
  2465                                  IF      PLATFORM=1
  2466  2407  44554f44594e4520          DB      "DUODYNE BIOS 0.1     MSX C-BIOS"
              42494f5320302e31  
              20202020204d5358  
              20432d42494f53    
  2467                                  ELSE
  2468                                  DB      "RETROBREW BIOS 0.1     MSX C-BIOS"
  2469                                  ENDIF
  2470                          ;include "../derived/asm/version.asm"
  2471  2426  0d0a0d0a0d0a00            DB      $0D,$0A,$0D,$0A,$0D,$0A,$00
  2472                          
  2473                          
  2474                          ;-------------------------------------
  2475                          ; error messages
  2476                          str_error_prompt:
  2477  242d  4552524f523a00            DB      "ERROR:",$00
  2478                          
  2479                          str_no_basic_intr:
  2480  2434  43414c4c4544204e          DB      "CALLED NON EXISTING BASIC.",$00
              4f4e204558495354  
              494e472042415349  
              432e00            
  2481                          
  2482                          str_stack_error:
  2483  244f  535441434b204552          DB      "STACK ERROR.",$00
              524f522e00        
  2484                          str_nocart:
  2485  245c  4e4f204341525452          DB      "NO CARTRIDGE FOUND.",$00
              4944474520464f55  
              4e442e00          
  2486                          
  2487                          ;-------------------------------------
  2488                          vdp_bios:
  2489  2470  0080708100820184          DB      $00,$80,$70,$81,$00,$82,$01,$84
  2490  2478  f5870040                  DB      $F5,$87,$00,$40
  2491                          
  2492                          ;   INCLUDE "PS2KEYB.ASM"
  2493                          ;   INCLUDE "ROMMON.asm"
  2494                          ;   INCLUDE "BASIC.asm"
  2495                          
  2496                          BREAKFLAG:
  2497  247c  00                        DB      $00
  2498                          
  2499  247d  0000000000000000          DS      $3FFF - $
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000              
  2500  3fff  00                        DB      $00
  2501                          
mainmsx1.asm:
    49                          
