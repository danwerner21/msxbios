0001   0000             ; $Id: logo_msx1.asm 525 2008-12-22 22:16:42Z mthuurne $
0002   0000             ; C-BIOS main ROM for MSX1 machines
0003   0000             ;
0004   0000             ; Copyright (c) 2005 Maarten ter Huurne.  All rights reserved.
0005   0000             ; Copyright (c) 2005 Joost Yervante Damad.  All rights reserved.
0006   0000             ;
0007   0000             ; Redistribution and use in source and binary forms, with or without
0008   0000             ; modification, are permitted provided that the following conditions
0009   0000             ; are met:
0010   0000             ; 1. Redistributions of source code must retain the above copyright
0011   0000             ;    notice, this list of conditions and the following disclaimer.
0012   0000             ; 2. Redistributions in binary form must reproduce the above copyright
0013   0000             ;    notice, this list of conditions and the following disclaimer in the
0014   0000             ;    documentation and/or other materials provided with the distribution.
0015   0000             ;
0016   0000             ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
0017   0000             ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
0018   0000             ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
0019   0000             ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
0020   0000             ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
0021   0000             ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0022   0000             ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0023   0000             ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0024   0000             ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
0025   0000             ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0026   0000             ;
0027   0000             
0028   0000                             .include "hardware.asm"
0001+  0000             ; $Id: hardware.asm 525 2008-12-22 22:16:42Z mthuurne $
0002+  0000             ; C-BIOS hardware related declarations
0003+  0000             ;
0004+  0000             ; Copyright (c) 2002-2005 BouKiCHi.  All rights reserved.
0005+  0000             ; Copyright (c) 2003 Reikan.  All rights reserved.
0006+  0000             ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
0007+  0000             ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
0008+  0000             ; Copyright (c) 2004-2006 Albert Beevendorp.  All rights reserved.
0009+  0000             ; Copyright (c) 2004-2005 Joost Yervante Damad.  All rights reserved.
0010+  0000             ;
0011+  0000             ; Redistribution and use in source and binary forms, with or without
0012+  0000             ; modification, are permitted provided that the following conditions
0013+  0000             ; are met:
0014+  0000             ; 1. Redistributions of source code must retain the above copyright
0015+  0000             ;    notice, this list of conditions and the following disclaimer.
0016+  0000             ; 2. Redistributions in binary form must reproduce the above copyright
0017+  0000             ;    notice, this list of conditions and the following disclaimer in the
0018+  0000             ;    documentation and/or other materials provided with the distribution.
0019+  0000             ;
0020+  0000             ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
0021+  0000             ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
0022+  0000             ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
0023+  0000             ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
0024+  0000             ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONS.equENTIAL DAMAGES (INCLUDING, BUT
0025+  0000             ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0026+  0000             ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0027+  0000             ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0028+  0000             ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
0029+  0000             ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0030+  0000             ;
0031+  0000             
0032+  0000             ;---------------------------------------------------
0033+  0000             ; I/O ports
0034+  0000             
0035+  0000             DBG_CTRL:       .equ     $2E             ; openMSX debugdevice control (mode)
0036+  0000             DBG_DATA:       .equ     $2F             ; openMSX debugdevice data
0037+  0000             
0038+  0000             PRN_STAT:       .equ     $90             ; printer status
0039+  0000             PRN_DATA:       .equ     $91             ; printer data
0040+  0000             
0041+  0000             VDP_DATA:       .equ     $98             ; VDP data port (VRAM read/write)
0042+  0000             VDP_ADDR:       .equ     $99             ; VDP address (write only)
0043+  0000             VDP_STAT:       .equ     $99             ; VDP status (read only)
0044+  0000             VDP_PALT:       .equ     $9A             ; VDP palette latch (write only)
0045+  0000             VDP_REGS:       .equ     $9B             ; VDP register access (write only)
0046+  0000             
0047+  0000             VDP_ACR:        .equ     $9C             ; VDP ACCESS CONTROL REGISTER
0048+  0000             
0049+  0000             ;PSG_REGS:       .equ     $A0             ; PSG register write port
0050+  0000             ;PSG_DATA:       .equ     $A1             ; PSG value write port
0051+  0000             ;PSG_STAT:       .equ     $A2             ; PSG value read port
0052+  0000             
0053+  0000             PSG_REGS:       .equ     $9A             ; PSG register write port
0054+  0000             PSG_DATA:       .equ     $9B             ; PSG value write port
0055+  0000             PSG_STAT:       .equ     $9A             ; PSG value read port
0056+  0000             
0057+  0000             PSL_STAT:       .equ     $A8             ; slot status
0058+  0000             KBD_STAT:       .equ     $A9             ; keyboard status
0059+  0000             GIO_REGS:       .equ     $AA             ; General IO Register
0060+  0000             PPI_REGS:       .equ     $AB             ; PPI register
0061+  0000             
0062+  0000             RTC_ADDR:       .equ     $B4             ; RTC address
0063+  0000             RTC_DATA:       .equ     $B5             ; RTC data
0064+  0000             
0065+  0000             
0066+  0000             ; N8VEM hardware
0067+  0000             KBPPIA		.EQU	0F4h		; PPI PORT A
0068+  0000             KBPPIB		.EQU	0F5h		; PPI PORT B
0069+  0000             KBPPIC		.EQU	0F6h		; PPI PORT C
0070+  0000             KBPPICONT	.EQU	0F7h		; PPI CONTROL PORT
0071+  0000             
0072+  0000             UART0:		 .EQU	068H		;   DATA IN/OUT
0073+  0000             UART1:		 .EQU	069H		;   CHECK RX
0074+  0000             UART2:		 .EQU	06AH		;   INTERRUPTS
0075+  0000             UART3:		 .EQU	06BH		;   LINE CONTROL
0076+  0000             UART4:		 .EQU	06CH		;   MODEM CONTROL
0077+  0000             UART5:		 .EQU	06DH		;   LINE STATUS
0078+  0000             
0079+  0000                                                                                             
0080+  0000             MAP_REG1:       .equ     $FC             ; memory mapper: bank in $0000-$3FFF
0081+  0000             MAP_REG2:       .equ     $FD             ; memory mapper: bank in $4000-$7FFF
0082+  0000             MAP_REG3:       .equ     $FE             ; memory mapper: bank in $8000-$BFFF
0083+  0000             MAP_REG4:       .equ     $FF             ; memory mapper: bank in $C000-$FFFF
0084+  0000             
0085+  0000             ;---------------------------------------------------
0086+  0000             ; memory mapped I/O
0087+  0000             
0088+  0000             SSL_REGS:       .equ     $FFFF           ; secondary slot select registers
0089+  0000             
0090+  0000             ;---------------------------------------------------
0091+  0000             ; Constants used to define which hardware the BIOS will run on.
0092+  0000             ; Used by the main_<model>.asm sources.
0093+  0000             
0094+  0000             ; VDP models:
0095+  0000             TMS99X8:        .equ     $9918
0096+  0000             V9938:          .equ     $9938
0097+  0000             V9958:          .equ     $9958
0098+  0000             
0099+  0000             ; MSX models:
0100+  0000             MODEL_MSX1:     .equ     0
0101+  0000             MODEL_MSX2:     .equ     1
0102+  0000             MODEL_MSX2P:    .equ     2
0103+  0000             MODEL_MSXTR:    .equ     3
0104+  0000             
0105+  0000             MODEL_SUBROM:   .equ     4
0106+  0000             
0107+  0000             ; Locales:
0108+  0000             ; -- ID byte 0
0109+  0000             LOCAL_CHSET_JP  .equ     $00
0110+  0000             LOCAL_CHSET_US  .equ     $01
0111+  0000             LOCAL_CHSET_KO  .equ     $02
0112+  0000             
0113+  0000             LOCAL_DATE_YMD  .equ     $00
0114+  0000             LOCAL_DATE_MDY  .equ     $10
0115+  0000             LOCAL_DATE_DMY  .equ     $20
0116+  0000             
0117+  0000             LOCAL_INT_60HZ  .equ     $00
0118+  0000             LOCAL_INT_50HZ  .equ     $80
0119+  0000             
0120+  0000             ; -- ID byte 1
0121+  0000             LOCAL_KBD_JP    .equ     $00
0122+  0000             LOCAL_KBD_US    .equ     $01
0123+  0000             LOCAL_KBD_FR    .equ     $02
0124+  0000             LOCAL_KBD_UK    .equ     $03
0125+  0000             LOCAL_KBD_DE    .equ     $04
0126+  0000             
0127+  0000             LOCAL_BASIC_JP  .equ     $00
0128+  0000             LOCAL_BASIC_US  .equ     $01
0129+  0000             
0130+  0000             
0131+  0000             KB_USE_SERIAL	.EQU	1	; SET TO 1 FOR SERIAL INPUT
0132+  0000             KB_USE_PS2	.EQU	0	; SET TO 1 FOR PS/2 INPUT
0133+  0000             
0134+  0000             ; BOOLEAN VALUES
0135+  0000             YES:            .equ     1
0136+  0000             NO:             .equ     0
0137+  0000             
0138+  0000             ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
0029   0000             
0030   0000             VDP:            .equ     TMS99X8
0031   0000             MODEL_MSX:      .equ     MODEL_MSX1
0032   0000             
0033   8000                             .org     $8000
0034   8000                             .include "logo.asm"
0001+  8000             ; C-BIOS logo ROM
0002+  8000             ;
0003+  8000             ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
0004+  8000             ; Copyright (c) 2004-2005 Albert Beevendorp.  All rights reserved.
0005+  8000             ;
0006+  8000             ; Redistribution and use in source and binary forms, with or without
0007+  8000             ; modification, are permitted provided that the following conditions
0008+  8000             ; are met:
0009+  8000             ; 1. Redistributions of source code must retain the above copyright
0010+  8000             ;    notice, this list of conditions and the following disclaimer.
0011+  8000             ; 2. Redistributions in binary form must reproduce the above copyright
0012+  8000             ;    notice, this list of conditions and the following disclaimer in the
0013+  8000             ;    documentation and/or other materials provided with the distribution.
0014+  8000             ;
0015+  8000             ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
0016+  8000             ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
0017+  8000             ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
0018+  8000             ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
0019+  8000             ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
0020+  8000             ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0021+  8000             ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0022+  8000             ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0023+  8000             ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
0024+  8000             ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0025+  8000             ;
0026+  8000             
0027+  8000                             .include "systemva.asm"
0001++ 8000             ; $Id: systemvars.asm 566 2010-03-02 00:59:42Z mthuurne $
0002++ 8000             ;
0003++ 8000             ; C-BIOS system variable declarations
0004++ 8000             ;
0005++ 8000             ; Copyright (c) 2002-2003 BouKiCHi.  All rights reserved.
0006++ 8000             ; Copyright (c) 2003 Reikan.  All rights reserved.
0007++ 8000             ; Copyright (c) 2004-2005 Maarten ter Huurne.  All rights reserved.
0008++ 8000             ; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
0009++ 8000             ; Copyright (c) 2004-2006 Joost Yervante Damad.  All rights reserved.
0010++ 8000             ; Copyright (c) 2004-2005 Albert Beevendorp.  All rights reserved.
0011++ 8000             ; Copyright (c) 2005 Jussi Pitkänen.  All rights reserved.
0012++ 8000             ;
0013++ 8000             ; Redistribution and use in source and binary forms, with or without
0014++ 8000             ; modification, are permitted provided that the following conditions
0015++ 8000             ; are met:
0016++ 8000             ; 1. Redistributions of source code must retain the above copyright
0017++ 8000             ;    notice, this list of conditions and the following disclaimer.
0018++ 8000             ; 2. Redistributions in binary form must reproduce the above copyright
0019++ 8000             ;    notice, this list of conditions and the following disclaimer in the
0020++ 8000             ;    documentation and/or other materials provided with the distribution.
0021++ 8000             ;
0022++ 8000             ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
0023++ 8000             ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
0024++ 8000             ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
0025++ 8000             ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
0026++ 8000             ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONS.equENTIAL DAMAGES (INCLUDING, BUT
0027++ 8000             ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOO.ds OR SERVICES; LOSS OF USE,
0028++ 8000             ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0029++ 8000             ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0030++ 8000             ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
0031++ 8000             ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0032++ 8000             ;
0033++ 8000             
0034++ 8000             
0035++ 8000             ;-------------------
0036++ 8000             ; help function area
0037++ 8000             ;-------------------
0038++ 8000             ; Note: Functions defined in "main.asm" are disabled here.
0039++ 8000             
0040++ 8000             
0041++ 8000             ; F39A-F3AD: workarea for the DEF USR statement
0042++ 8000             ; this area is initialized with the 10 times the value $475A, which gives
0043++ 8000             ; the error 'Syntax Error'
0044++ 8000             USRTAB:         .equ     $F39A
0045++ 8000             
0046++ 8000             ;----------------------
0047++ 8000             ; screen parameter area
0048++ 8000             ;----------------------
0049++ 8000             
0050++ 8000             ; F3AE: # of positions on a line in SCREEN 0 (ini:39)
0051++ 8000             LINL40:         .equ     $F3AE
0052++ 8000             
0053++ 8000             ; F3AF: # of positions on a line in SCREEN 1 (ini:29)
0054++ 8000             LINL32:         .equ     $F3AF
0055++ 8000             
0056++ 8000             ; F3B0: # of actually used positions in the current screenmodus (ini:39)
0057++ 8000             LINLEN:         .equ     $F3B0
0058++ 8000             
0059++ 8000             ; F3B1: # of used lines on screen (ini:24)
0060++ 8000             CRTCNT:         .equ     $F3B1
0061++ 8000             
0062++ 8000             ; F3B2: # of positions within a tabulator-column (ini:14)
0063++ 8000             CLMLST:         .equ     $F3B2
0064++ 8000             
0065++ 8000             ; F3B3-F3B4: BASE(0): name table address for SCREEN 0 (ini:$0000)
0066++ 8000             ; used to initialize NAMBAS when SCREEN 0 is activated
0067++ 8000             TXTNAM:         .equ     $F3B3
0068++ 8000             
0069++ 8000             ; F3B5-F3B6: BASE(1): color table address for SCREEN 0, unused? (ini:$0000)
0070++ 8000             TXTCOL:         .equ     $F3B5
0071++ 8000             
0072++ 8000             ; F3B7-F3B8: BASE(2): pattern table address for SCREEN 0 (ini:$0800)
0073++ 8000             ; used to initialize CGPBAS when SCREEN 0 is activated
0074++ 8000             TXTCGP:         .equ     $F3B7
0075++ 8000             
0076++ 8000             ; F3B9-F3BA: BASE(3): sprite attribute table address for SCREEN 0, unused (ini:$0000)
0077++ 8000             ; used to initialize ATRBAS when SCREEN 0 is activated
0078++ 8000             TXTATR:         .equ     $F3B9
0079++ 8000             
0080++ 8000             ; F3BB-F3BC: BASE(4): sprite pattern table address for SCREEN 0, unused (ini:$0000)
0081++ 8000             ; used to initialize PATBAS when SCREEN 0 is activated
0082++ 8000             TXTPAT:         .equ     $F3BB
0083++ 8000             
0084++ 8000             ; F3BD-F3BE: BASE(5): nametable address for SCREEN 1 (ini:$1800)
0085++ 8000             ; used to initialize NAMBAS when SCREEN 1 is activated
0086++ 8000             T32NAM:         .equ     $F3BD
0087++ 8000             
0088++ 8000             ; F3BF-F3C0: BASE(6): color table address for SCREEN 1 (ini:$2000)
0089++ 8000             T32COL:         .equ     $F3BF
0090++ 8000             
0091++ 8000             ; F3C1-F3C2: BASE(7): pattern table address for SCREEN 1 (ini:$0000)
0092++ 8000             ; used to initialize CGPBAS when SCREEN 1 is activated
0093++ 8000             T32CGP:         .equ     $F3C1
0094++ 8000             
0095++ 8000             ; F3C3-F3C4: BASE(8): sprite attribute table address for SCREEN 1 (ini:$1B00)
0096++ 8000             ; used to initialize ATRBAS when SCREEN 1 is activated
0097++ 8000             T32ATR:         .equ     $F3C3
0098++ 8000             
0099++ 8000             ; F3C5-F3C6: BASE(9): sprite pattern table address for SCREEN 1 (ini:$0800)
0100++ 8000             ; used to initialize PATBAS when SCREEN 1 is activated
0101++ 8000             T32PAT:         .equ     $F3C5
0102++ 8000             
0103++ 8000             ; F3C7-F3C8: BASE(10): name table address for SCREEN 2 (ini:$1800)
0104++ 8000             ; used to initialize NAMBAS when SCREEN 2 is activated
0105++ 8000             GRPNAM:         .equ     $F3C7
0106++ 8000             
0107++ 8000             ; F3C9-F3CA: BASE(11): color table address for SCREEN 2 (ini:$2000)
0108++ 8000             GRPCOL:         .equ     $F3C9           ; Screen2 Color
0109++ 8000             
0110++ 8000             ; F3CB-F3CC: BASE(12): pattern table address for SCREEN 2 (ini:$0000)
0111++ 8000             ; used to initialize CGPBAS when SCREEN 2 is activated
0112++ 8000             GRPCGP:         .equ     $F3CB
0113++ 8000             
0114++ 8000             ; F3CD-F3CE: BASE(13): sprite attribute table address for SCREEN 2 (ini:$1B00)
0115++ 8000             ; used to initialize ATRBAS when SCREEN 2 is activated
0116++ 8000             GRPATR:         .equ     $F3CD
0117++ 8000             
0118++ 8000             ; F3CF-F3D0: BASE(14): sprite pattern table address for SCREEN 2 (ini:$3800)
0119++ 8000             ; used to initialize PATBAS when SCREEN 2 is activated
0120++ 8000             GRPPAT:         .equ     $F3CF
0121++ 8000             
0122++ 8000             ; F3D1-F3D2: BASE(15): name table address for SCREEN 3 (ini:$0800)
0123++ 8000             ; used to initialize NAMBAS when SCREEN 3 is activated
0124++ 8000             MLTNAM:         .equ     $F3D1
0125++ 8000             
0126++ 8000             ; F3D3-F3D4: BASE(16): color table address for SCREEN 3 (ini:$0000)
0127++ 8000             ; the color table is unused in SCREEN 3
0128++ 8000             MLTCOL:         .equ     $F3D3
0129++ 8000             
0130++ 8000             ; F3D5-F3D6: BASE(17): pattern table address for SCREEN 3 (ini:$0000)
0131++ 8000             ; used to initialize CGPBAS when SCREEN 3 is activated
0132++ 8000             MLTCGP:         .equ     $F3D5
0133++ 8000             
0134++ 8000             ; F3D7-F3D8: BASE(18): sprite attribute table address for SCREEN 3 (ini:$1B00)
0135++ 8000             ; used to initialize ATRBAS when SCREEN 3 is activated
0136++ 8000             MLTATR:         .equ     $F3D7
0137++ 8000             
0138++ 8000             ; F3D9-F3DA: BASE(19): sprite pattern table address for SCREEN 3 (ini:$3800)
0139++ 8000             ; used to initialize PATBAS when SCREEN 3 is activated
0140++ 8000             MLTPAT:         .equ     $F3D9
0141++ 8000             
0142++ 8000             ; F3db: keyclick when a key is pressed: 0: no, 1: yes (ini: 1)
0143++ 8000             ; SCREEN ,,n will write to this address
0144++ 8000             CLIKSW:         .equ     $F3db
0145++ 8000             
0146++ 8000             ; F3DC: line where the cursor is located
0147++ 8000             ; starts to count at 1 for the topmost line
0148++ 8000             CSRY:           .equ     $F3DC
0149++ 8000             
0150++ 8000             ; F3DD: column where the cursor is located
0151++ 8000             ; starts to count at 1 for the leftmost column
0152++ 8000             CSRX:           .equ     $F3DD
0153++ 8000             
0154++ 8000             ; F3DE: function key definition shown: 0: no, -1: yes
0155++ 8000             ; Note: MSX BIOS will mess up end-of-screen if this variable contains
0156++ 8000             ;       something other than $00 or $FF.
0157++ 8000             CNSDFG:         .equ     $F3DE
0158++ 8000             
0159++ 8000             ; F3DF-D3E6: storage for the last written value towar.ds VDP registers 0 till 7
0160++ 8000             ; this is needed because these registers are write only
0161++ 8000             RG0SAV:         .equ     $F3DF
0162++ 8000             RG1SAV:         .equ     $F3E0
0163++ 8000             RG2SAV:         .equ     $F3E1
0164++ 8000             RG3SAV:         .equ     $F3E2
0165++ 8000             RG4SAV:         .equ     $F3E3
0166++ 8000             RG5SAV:         .equ     $F3E4
0167++ 8000             RG6SAV:         .equ     $F3E5
0168++ 8000             RG7SAV:         .equ     $F3E6
0169++ 8000             ; F3E7: last read value of VDP register 8
0170++ 8000             STATFL:         .equ     $F3E7
0171++ 8000             
0172++ 8000             ; F3E8: information about the joystick and space bar
0173++ 8000             ; 7 6 5 4 3 2 1 0
0174++ 8000             ; | | | |       +-- Space bar, trig(0) (0 = pressed)
0175++ 8000             ; | | | +---------- Stick 1, Trigger 1 (0 = pressed)
0176++ 8000             ; | | +------------ Stick 1, Trigger 2 (0 = pressed)
0177++ 8000             ; | +-------------- Stick 2, Trigger 1 (0 = pressed)
0178++ 8000             ; +---------------- Stick 2, Trigger 2 (0 = pressed)
0179++ 8000             TRGFLG:         .equ     $F3E8
0180++ 8000             
0181++ 8000             ; F3E9: code for the standard foreground color (ini:15)
0182++ 8000             FORCLR:         .equ     $F3E9
0183++ 8000             
0184++ 8000             ; F3EA: code for the standard background color (ini:4)
0185++ 8000             BAKCLR:         .equ     $F3EA
0186++ 8000             
0187++ 8000             ; F3EB: code for the standard border color (ini:7)
0188++ 8000             BDRCLR:         .equ     $F3EB
0189++ 8000             
0190++ 8000             ; F3EC-F3EE: Jump instruction used by Basic LINE command.
0191++ 8000             ; The routines used are: RIGHTC, LEFTC, UPC and DOWNC
0192++ 8000             MAXUPD:         .equ     $F3EC
0193++ 8000             
0194++ 8000             ; F3EF-F3F1: Jump instruction used by Basic LINE command.
0195++ 8000             ; The routines used are: RIGHTC, LEFTC, UPC and DOWNC
0196++ 8000             MINUPD:         .equ     $F3EF
0197++ 8000             
0198++ 8000             ; F3F2: working color, as used for graphical operations
0199++ 8000             ; normally .equals to the foreground color (ini:15)
0200++ 8000             ATRBYT:         .equ     $F3F2
0201++ 8000             
0202++ 8000             ; F3F3-F3F4: starting value of the address of the queue-table
0203++ 8000             ; the queue-table contains 4 queue's: 3 for sound and one for RS232
0204++ 8000             ; (ini: QUETAB ($F959))
0205++ 8000             QUEUES:         .equ     $F3F3
0206++ 8000             
0207++ 8000             ; F3F5: CLOAD flag =0 when CLOAD =255 when CLOAD?
0208++ 8000             FRCNEW:         .equ     $F3F5
0209++ 8000             
0210++ 8000             ; F3F6: VDP-interupt counter that counts from 3 to 0, when it reaches zero, the
0211++ 8000             ; keyboard matrix is scanned, and the counters is reset at 3
0212++ 8000             SCNCNT:         .equ     $F3F6
0213++ 8000             
0214++ 8000             ; F3F7: key repeat counter. Runs from 13 to 0, and is changed when SCNCNT is changed
0215++ 8000             ; if the key remained the same. If it reaches 0, keyrepetition starts. If another key
0216++ 8000             ; is pressed the value is reset at 13.
0217++ 8000             REPCNT:         .equ     $F3F7
0218++ 8000             
0219++ 8000             ; F3F8-F3F9: first free space in the inputbuffer of the keyboard
0220++ 8000             ; everytime a key is added to the inputbuffer, this address is incremented,
0221++ 8000             ; when it .equals to GETPNT, the buffer is full
0222++ 8000             ; the buffer is located at KEYBUF
0223++ 8000             PUTPNT:         .equ     $F3F8           ; L[obt@ÖÌ|C^
0224++ 8000             
0225++ 8000             ; F3FA-F3FB: address in inputbuffer of first character that is not yet read
0226++ 8000             ; everytime a key is read from the buffer it is incremented
0227++ 8000             ; the buffer is located at KEYBUF
0228++ 8000             GETPNT:         .equ     $F3FA           ; L[obt@ÖÌ|C^
0229++ 8000             
0230++ 8000             ; F3FC-F400: memory area for tape system parameters for 1200 baud
0231++ 8000             ; F3FC: length of  low signal for 0     (ini:83)
0232++ 8000             ; F3FD: length of high signal for 0     (ini:92)
0233++ 8000             ; F3FE: length of  low signal for 1     (ini:38)
0234++ 8000             ; F3FF: length of high signal for 1     (ini:45)
0235++ 8000             ; F400: length of synchronization block (ini:15)
0236++ 8000             CS120:          .equ     $F3FC
0237++ 8000             
0238++ 8000             ; F401-F405: memory area for tape system parameters for 1200 baud
0239++ 8000             ; F401: length of  low signal for 0     (ini:37)
0240++ 8000             ; F402: length of high signal for 0     (ini:45)
0241++ 8000             ; F403: length of  low signal for 1     (ini:14)
0242++ 8000             ; F404: length of high signal for 1     (ini:22)
0243++ 8000             ; F405: length of synchronization block (ini:31)
0244++ 8000             CS240:          .equ     $F401
0245++ 8000             
0246++ 8000             ; F406-F407: lenghts of signal for 0 for the current speed of the tape system
0247++ 8000             ; either .equal to the content of F3FC-F3FD or the content of F401-F402
0248++ 8000             ; (ini: 83, 92)
0249++ 8000             LOW_:           .equ     $F406 ; real name: LOW, but doesn't compile?
0250++ 8000             
0251++ 8000             ; F408-F409: lenghts of signal for 1 for the current speed of the tape system
0252++ 8000             ; either .equal to the content of F3FE-F3FF or the content of F403-F404
0253++ 8000             ; (ini: 38, 45)
0254++ 8000             HIGH_:          .equ     $F408 ; real name: HIGH, but doesn't compile?
0255++ 8000             
0256++ 8000             ; F40A: lenghts of synchronization block for the current speed of the tape system
0257++ 8000             ; either .equal to the content of F400 or the content of F405 (ini: 15)
0258++ 8000             HEADER:         .equ     $F40A
0259++ 8000             
0260++ 8000             ; F40B-F40C: standard setting for the height/width aspect of the
0261++ 8000             ; BASIC statement CIRCLE; only the byte in F40B is actually used
0262++ 8000             ; If ASPECT2 is larger then 255, the value of F40B is the number of horizontal
0263++ 8000             ; dots per 256 verical dots of the radius (ini:$0100)
0264++ 8000             ; ! not verified :)
0265++ 8000             ASPCT1:         .equ     $F40B
0266++ 8000             
0267++ 8000             ; F40D-F40E: standard setting for the height/width aspect of the
0268++ 8000             ; BASIC statement CIRCLE; If ASPCT2 is smaller then 512, then ASPCT2 is the
0269++ 8000             ; number of vertical dots per 256 horizontal dots of the radius (ini:$0100)
0270++ 8000             ; ! not verified :)
0271++ 8000             ASPCT2:         .equ     $F40D
0272++ 8000             
0273++ 8000             ; F40F-F413: work area for the BASIC statement RESUME NEXT
0274++ 8000             ; contains a fake end of basic program
0275++ 8000             ; (ini: 58, 0, 0, 0, 0)
0276++ 8000             ENDPRG:         .equ     $F40F
0277++ 8000             
0278++ 8000             ; F414: errornumber of last error that happened while executing a BASIC program
0279++ 8000             ; (ini:0)
0280++ 8000             ERRFLG:         .equ     $F414
0281++ 8000             
0282++ 8000             ; F415: number of characters in the writebuffer of the printer that still
0283++ 8000             ; need printing
0284++ 8000             LPTPOS:         .equ     $F415
0285++ 8000             
0286++ 8000             ; F416: switch indicating if output should be screen or printer
0287++ 8000             ; (think LIST vs LLIST) (ini:0) values: 0: screen, 1: printer
0288++ 8000             PRTFLG:         .equ     $F416
0289++ 8000             
0290++ 8000             ; F417: switch indicating if hooked up printer is an MSX printer or not
0291++ 8000             ; values: 0: MSX-Printer, 1: no MSX-Printer
0292++ 8000             ; if the printer is no MSX-Printer, non-ASCII (>=128) characters are replaced
0293++ 8000             ; by spaces before sending them to the printer (ini: 0)
0294++ 8000             NTMSXP:         .equ     $F417
0295++ 8000             
0296++ 8000             ; F418: switch indicating of printing routines should use raw-mode or
0297++ 8000             ; should convert:
0298++ 8000             ; =0 to convert tabs and unknown characters to spaces and remove graphical headers
0299++ 8000             ; =1 to send data just like it gets it (ini: 0)
0300++ 8000             ; if RAWPRT is 1, the value if NTMSXP is ignored
0301++ 8000             RAWPRT:         .equ     $F418
0302++ 8000             
0303++ 8000             ; ---------------------------
0304++ 8000             ; basic interpreter work area
0305++ 8000             ; ---------------------------
0306++ 8000             
0307++ 8000             ; F419-F41A: work area for the BASIC command VAL: contains address of character that
0308++ 8000             ; has temporarely been replaced by O by VAL
0309++ 8000             VLZADR:         .equ     $F419
0310++ 8000             
0311++ 8000             ; F41B: work area for the BASIC command VAL: contains the character originally at
0312++ 8000             ; the location of VLZADR
0313++ 8000             VLZDAT:         .equ     $F41B
0314++ 8000             
0315++ 8000             ; F41C-F41D: line number of current BASIC line being executed, in direct modus this
0316++ 8000             ; contains $FFFF (ini:$FFFF)
0317++ 8000             CURLIN:         .equ     $F41C
0318++ 8000             
0319++ 8000             ; F41E: error detection prefix for KBUF, always contains ":"
0320++ 8000             ; originally undocumented :)
0321++ 8000             KBFMIN:         .equ     $F41E
0322++ 8000             
0323++ 8000             ; F41F-F55C: workarea for coding basic rules that have been typed in direct modus
0324++ 8000             ; this are contains the code for the line interpreted in direct modus
0325++ 8000             KBUF:           .equ     $F41F
0326++ 8000             
0327++ 8000             ; F55D: byte used as first byte of BUF for input statements, giving them always
0328++ 8000             ; an extra ',' (ini:44 == ',')
0329++ 8000             BUFMIN:         .equ     $F55D
0330++ 8000             
0331++ 8000             ; F55E-F65F: used in direct modus to store the ASCII codes of the line, or simulary
0332++ 8000             ; for INPUT or LINE INPUT BASIC statements
0333++ 8000             BUF:            .equ     $F55E
0334++ 8000             
0335++ 8000             ; F562-F570: used by bitblit routines to store the register data
0336++ 8000             SX:             .equ     $F562
0337++ 8000             SY:             .equ     $F564
0338++ 8000             DX:             .equ     $F566
0339++ 8000             DY:             .equ     $F568
0340++ 8000             NX:             .equ     $F56A
0341++ 8000             NY:             .equ     $F56C
0342++ 8000             CDUMMY:         .equ     $F56E
0343++ 8000             ARG_:           .equ     $F56F
0344++ 8000             L_OP:           .equ     $F570
0345++ 8000             
0346++ 8000             ; F660: last usable byte of BUF
0347++ 8000             ENDBUF:         .equ     $F660
0348++ 8000             
0349++ 8000             ; F661: number of column of last written character on the screen
0350++ 8000             TTYPOS:         .equ     $F661
0351++ 8000             
0352++ 8000             ; F662: switch indicating during variable lookup for arrays, if this has not already
0353++ 8000             ; been done for a DIM BASIC statement
0354++ 8000             DIMFLG:         .equ     $F662
0355++ 8000             
0356++ 8000             ; F663: workarea for evaluation of expressions; contains type of last evaluated
0357++ 8000             ; expression; the value of the expression is in DAC, possible values of VALTYP:
0358++ 8000             ; 2: integer
0359++ 8000             ; 3: string
0360++ 8000             ; 4: normal real
0361++ 8000             ; 8: double real
0362++ 8000             VALTYP:         .equ     $F663
0363++ 8000             
0364++ 8000             ; F664: workarea for coding of BASIC statements. switch indicating if keywor.ds have
0365++ 8000             ; to be encoded or not. E.g. in DATA fiel.ds they should not be encoded
0366++ 8000             ; 0: encoding on, 1: encoding off
0367++ 8000             DORES:          .equ     $F664
0368++ 8000             
0369++ 8000             ; F665: workarea for coding of BASIC statements. swithc indication of numbers have to be
0370++ 8000             ; encoded; values: $0: encode as const, $1: encode as line number, $FF: do not encode
0371++ 8000             DONUM:          .equ     $F665
0372++ 8000             
0373++ 8000             ; F666-F667: work area for evaluation of expressions: contains address of first character
0374++ 8000             ; after the code of the last evaluated expression
0375++ 8000             CONTXT:         .equ     $F666
0376++ 8000             
0377++ 8000             ; F668: work area for evaluation of expressions: contains information byte about the
0378++ 8000             ; encoding of the last evaluated constant number; value of this constant is in CONLO
0379++ 8000             ; values:
0380++ 8000             ; $0B: octal (2 bytes)
0381++ 8000             ; $0C: hexadecimal (2 bytes)
0382++ 8000             ; $0F: decimal 0<=value<256 (1 byte)
0383++ 8000             ; $11-$1B: short encoding for 0->10
0384++ 8000             ; $1C: decimal (2bytes, 2s-compliment)
0385++ 8000             ; $26: $42 binary as ASCII
0386++ 8000             ; $0E: line number
0387++ 8000             ; $0D: line pointer
0388++ 8000             ; $1D: normal real (1 byte exp, 3 bytes BCD)
0389++ 8000             ; $1F: double real (1 byte exp, 7 bytes BCD)
0390++ 8000             CONSAV:         .equ     $F668
0391++ 8000             
0392++ 8000             ; F669: work area for evaluation of expressions: contains type of last evaluated number
0393++ 8000             ; constant; the value is in CONLO, for values of CONTYP, see VALTYP
0394++ 8000             ; Strings are never contant in BASIC!
0395++ 8000             CONTYP:         .equ     $F669
0396++ 8000             
0397++ 8000             ; F66A-F671: work area for evaluation of expressions: contains the value of the last
0398++ 8000             ; evaluated number contant; value starts at F66A, and takes bytes as needed for the type
0399++ 8000             CONLO:          .equ     $F66A
0400++ 8000             
0401++ 8000             ; F672-F673: upper limit of memory area reserved for strings, contains the upper address
0402++ 8000             ; that is allowed to be used
0403++ 8000             MEMSIZ:         .equ     $F672
0404++ 8000             
0405++ 8000             ; F674-F675: top of stack; also first byte below string area
0406++ 8000             STKTOP:         .equ     $F674
0407++ 8000             
0408++ 8000             ; F676-F677: start address of current basic program, set at initialization, and
0409++ 8000             ; not changed by OS (ini:$8001)
0410++ 8000             TXTTAB:         .equ     $F676
0411++ 8000             
0412++ 8000             ; F678-F679: address of first unused string-descriptor in TEMPST
0413++ 8000             ; (ini:value of TEMPST)
0414++ 8000             TEMPPT:         .equ     $F678
0415++ 8000             
0416++ 8000             ; F67A-F697: work area for evaluation of string expressions; this area has space
0417++ 8000             ; for 10 string descriptors of 3 bytes; these can be used for temporarely results
0418++ 8000             ; of string arythmetics
0419++ 8000             TEMPST:         .equ     $F67A
0420++ 8000             
0421++ 8000             ; F698-F69A: work area for evaluation of string expressions; this contains the
0422++ 8000             ; string descriptor of the intermediate result
0423++ 8000             DSCTMP:         .equ     $F698
0424++ 8000             
0425++ 8000             ; F69B-F69C: first address within the string memory area that is still free
0426++ 8000             ; the string area is filled backwar.ds, soo the lower the value, the less space
0427++ 8000             ; remains (ini: value of MEMSIZ)
0428++ 8000             FRETOP:         .equ     $F69B
0429++ 8000             
0430++ 8000             ; F69D-F69E: temporarely storage for adminstration of the basic interpreter
0431++ 8000             TEMP3:          .equ     $F69D
0432++ 8000             
0433++ 8000             ; F69F-F6A0: temporarely storage for garbage collection
0434++ 8000             TEMP8:          .equ     $F69F
0435++ 8000             
0436++ 8000             ; F6A1-F6A2: address of first byte in BASIC-code after last FOR statement
0437++ 8000             ENDFOR:         .equ     $F6A1
0438++ 8000             
0439++ 8000             ; F6A3-F6A4: line number of last used line of DATA statements
0440++ 8000             DATLIN:         .equ     $F6A3
0441++ 8000             
0442++ 8000             ; F6A5: switch indicating if a variable is allowed to be an array variable.
0443++ 8000             ; This is e.g. not allowed for the loop variable of a FOR statement
0444++ 8000             ; 0 = allowed, 1 = not allowed
0445++ 8000             SUBFLG:         .equ     $F6A5
0446++ 8000             
0447++ 8000             ; F6A6: switch indicating if currently a READ or INPUT statement is being executed
0448++ 8000             FLKINP:         .equ     $F6A6
0449++ 8000             
0450++ 8000             ; F6A7-F6A8: temporarely storage for adminstration of the basic interpreter
0451++ 8000             TEMP:           .equ     $F6A7
0452++ 8000             
0453++ 8000             ; F6A9: switch indicating if there are still linenumber constants in the BASIC code
0454++ 8000             ; that are encoded as pointers?
0455++ 8000             PTRFLG:         .equ     $F6A9
0456++ 8000             
0457++ 8000             ; F6AA: switch indication if currently an AUTO statement is active
0458++ 8000             ; 0 = no auto, 1 = auto
0459++ 8000             AUTFLG:         .equ     $F6AA
0460++ 8000             
0461++ 8000             ; F6AB-F6AC: last generated AUTO line number
0462++ 8000             AUTLIN:         .equ     $F6AB
0463++ 8000             
0464++ 8000             ; F6AD-F6AE: last used AUTO increment
0465++ 8000             AUTINC:         .equ     $F6AD
0466++ 8000             
0467++ 8000             ; F6AF-F6B0: work area of the error system; contains address of first byte
0468++ 8000             ; of statement currently being executed
0469++ 8000             SAVTXT:         .equ     $F6AF
0470++ 8000             
0471++ 8000             ; F6B1-F6B2: work area of the error system; contains address of the stack
0472++ 8000             ; before executing of the current statement started
0473++ 8000             SAVSTK:         .equ     $F6B1
0474++ 8000             
0475++ 8000             ; F6B3-F6B4: line number of last failed line
0476++ 8000             ERRLIN:         .equ     $F6B3
0477++ 8000             
0478++ 8000             ; F6B5-F6B6: line number of last used (changed, listed, added) line
0479++ 8000             DOT:            .equ     $F6B5
0480++ 8000             
0481++ 8000             ; F6B7-F5B8: work area of the error system; contains the address of the first
0482++ 8000             ; byte of the statement that last failed; on failure it is stored with the
0483++ 8000             ; content of SAVTXT
0484++ 8000             ERRTXT:         .equ     $F6B7
0485++ 8000             
0486++ 8000             ; F6B9-F6BA: work area of the error system; contains the line number where
0487++ 8000             ; execution should go to on error (as in basic: ON ERROR GOTO x)
0488++ 8000             ONELIN:         .equ     $F6B9
0489++ 8000             
0490++ 8000             ; F6BB-F6BC: work area of the error system; indication if the interpreter is
0491++ 8000             ; currently executing an error catch routine
0492++ 8000             ; 0 = no, FF = yes
0493++ 8000             ONEFLG:         .equ     $F6BB
0494++ 8000             
0495++ 8000             ; F6BC-F6BD: temporarely storage for the interpreter
0496++ 8000             TEMP2:          .equ     $F6BC
0497++ 8000             
0498++ 8000             ; F6BE-F6BF: line number of last program break, reset at 0 at any program change
0499++ 8000             OLDLIN:         .equ     $F6BE
0500++ 8000             
0501++ 8000             ; F6C0-F6C1: address of first statement that is not executed due to a break
0502++ 8000             OLDTXT:         .equ     $F6C0
0503++ 8000             
0504++ 8000             ; F6C2-F6C3: begin address of storage of basic variables and function descriptors;
0505++ 8000             ; possibly adjusted when program changes in size
0506++ 8000             VARTAB:         .equ     $F6C2
0507++ 8000             
0508++ 8000             ; F6C4-F6C5: begin address of array variables; possibly adjusted when program
0509++ 8000             ; changes size or more variables are allocated
0510++ 8000             ARYTAB:         .equ     $F6C4
0511++ 8000             
0512++ 8000             ; F6C6-F6C7: address of first free byte not used for storage of code or variables
0513++ 8000             ; (ini: $8003)
0514++ 8000             STREND:         .equ     $F6C6
0515++ 8000             
0516++ 8000             ; F6C8-F6C9: address where data nee.ds to be searched at next READ statement
0517++ 8000             DATPTR:         .equ     $F6C8
0518++ 8000             
0519++ 8000             ; F6CA-F6E3: table with variable types, one for each letter in the alphabet
0520++ 8000             ; possible values:
0521++ 8000             ;       2 = integer     3 = string      4 = single      8 = double
0522++ 8000             DEFTBL:         .equ     $F6CA
0523++ 8000             
0524++ 8000             ; F6E4-F7B4: work area for execution of self defined functions
0525++ 8000             
0526++ 8000             ; F6E4-F6E5: contains address ; of previous parameter block on the stack;
0527++ 8000             ; needed for garbage collection
0528++ 8000             PRMSTK:         .equ     $F6E4
0529++ 8000             
0530++ 8000             ; F6E6-F6E7:  amount of valid bytes in PARM1
0531++ 8000             PRMLEN:         .equ     $F6E6
0532++ 8000             
0533++ 8000             ; F6E8-F74B: contains definitions of the variables in the parameter lists
0534++ 8000             ; of self defined functions
0535++ 8000             PARM1:          .equ     $F6E8
0536++ 8000             
0537++ 8000             ; F74C-F74D: previous value of PRMSTK
0538++ 8000             PRMDRV:         .equ     $F74C
0539++ 8000             
0540++ 8000             ; F74E-F74F: number of valid bytes in PARM2
0541++ 8000             PRMLN2:         .equ     $F74E
0542++ 8000             
0543++ 8000             ; F750-F7B3: area used for calculation of values that end up in PARM1
0544++ 8000             PARM2:          .equ     $F750
0545++ 8000             
0546++ 8000             ; F7B4: switch indicating of while searching a variable name PARM1 has
0547++ 8000             ; been looked at; 0 = no, 1 = yes
0548++ 8000             PRMFLG:         .equ     $F7B4
0549++ 8000             
0550++ 8000             ; F7B5-F7B6: address of first byte where it is no longer needed to search
0551++ 8000             ; for a variable name; it is .equal to ARYTAB when the normal variable area
0552++ 8000             ; is searched, and .equal to PARM1+PRMLEN when PARM1 is searched
0553++ 8000             ARYTA2:         .equ     $F7B5
0554++ 8000             
0555++ 8000             ; F7B7-F7B8: switch indicating iif PARM1 contains a valid parameter block
0556++ 8000             ; 0 = no, 1 = yes
0557++ 8000             NOFUNS:         .equ     $F7B7
0558++ 8000             
0559++ 8000             ; F7B8-F7B9: temporarely memory used while searching parameter blocks on
0560++ 8000             ; the stack
0561++ 8000             TEMP9:          .equ     $F7B8
0562++ 8000             
0563++ 8000             ; F7BA-F7BB: counter of the nesting-dept of the function being evaluated
0564++ 8000             FUNACT:         .equ     $F7BA
0565++ 8000             
0566++ 8000             ; F7BC-F7C3: work area when executing the SWAP statement; the first variable
0567++ 8000             ; is stored here
0568++ 8000             SWPTMP:         .equ     $F7BC
0569++ 8000             
0570++ 8000             ; F7C4: switch indicating if TRON is on; 0 = off, >0 = on
0571++ 8000             TRCFLG:         .equ     $F7C4
0572++ 8000             
0573++ 8000             ; F7C5-F7F4: workarea when executing numeric operators
0574++ 8000             FBUFFR:         .equ     $F7C5
0575++ 8000             DECTMP:         .equ     $F7F0
0576++ 8000             DECTM2:         .equ     $F7F2
0577++ 8000             DECCNT:         .equ     $F7F4
0578++ 8000             
0579++ 8000             ; F7F6-F805: workarea when executing numeric operators; intermediate
0580++ 8000             ; results are stored here; also used for parameter transfer when using
0581++ 8000             ; the USR functions; VALTYPE then contains the type, and the value is
0582++ 8000             ; stored like this:
0583++ 8000             ; typename  type  where
0584++ 8000             ; integer   2     F7F8-F7F9
0585++ 8000             ; string    3     F7F8-F7F9 (address descriptor)
0586++ 8000             ; single    4     F7F6-F7F9
0587++ 8000             ; double    8     F7F6-F7FD
0588++ 8000             DAC:            .equ     $F7F6
0589++ 8000             
0590++ 8000             ; F806-F856: workarea when executing numeric operators
0591++ 8000             HOLD8:          .equ     $F806
0592++ 8000             HOLD2:          .equ     $F836
0593++ 8000             HOLD:           .equ     $F83E
0594++ 8000             ARG:            .equ     $F847
0595++ 8000             
0596++ 8000             ; F857-F85E: last calculated random double
0597++ 8000             RNDX:           .equ     $F857
0598++ 8000             
0599++ 8000             ; --------------------
0600++ 8000             ; filesystem work area
0601++ 8000             ; --------------------
0602++ 8000             
0603++ 8000             ; F85F: # of filedescriptors reserved minus 1
0604++ 8000             ; this is also the maximum number of open files possible
0605++ 8000             MAXFIL:         .equ     $F85F
0606++ 8000             
0607++ 8000             ; F860-F861: start address of the file information table
0608++ 8000             FILTAB:         .equ     $F860
0609++ 8000             
0610++ 8000             ; F862-F863: start address of the first file-buffer
0611++ 8000             NULBUF:         .equ     $F862
0612++ 8000             
0613++ 8000             ; F864-F865: during file I/O the start address of the active file-buffer
0614++ 8000             PTRFIL:         .equ     $F864
0615++ 8000             
0616++ 8000             ; F866: flag indicating if the file that is being loaded have to be started
0617++ 8000             ; immediately; 0 = no, FF = yes
0618++ 8000             RUNFLG:         .equ     $F866
0619++ 8000             
0620++ 8000             ; note that RUNFLG and FILNAM overlap!
0621++ 8000             
0622++ 8000             ; F866-F870: filename of last file that has been active;
0623++ 8000             ; first 8 chars are name, last 3 are extension
0624++ 8000             FILNAM:         .equ     $F866
0625++ 8000             
0626++ 8000             ; F871-F87B: second filename if needed, e.g. the NAME command
0627++ 8000             FILNM2:         .equ     $F871
0628++ 8000             
0629++ 8000             ; F87C: switch indicating if currently a BASIC program is being loaded
0630++ 8000             ; 0 = no, 1 = yes
0631++ 8000             NLONLY:         .equ     $F87C
0632++ 8000             
0633++ 8000             ; F87D-F87E: workarea for BLOAD and BSAVE; when a part of normal memory
0634++ 8000             ; is written, it contains the end address of the written memory region
0635++ 8000             ; if video memory is written it contains $4BE5 + start address of the
0636++ 8000             ; written memory region ??
0637++ 8000             SAVEND:         .equ     $F87D
0638++ 8000             
0639++ 8000             ; F87F-F91E: storage area for the text of the function keys 10x16 bytes,
0640++ 8000             ; but strings need to be zero-terminated, soo maximum length of command is
0641++ 8000             ; 15 characters
0642++ 8000             FNKSTR:         .equ     $F87F
0643++ 8000             
0644++ 8000             ; ------------------------
0645++ 8000             ; screen routine work area
0646++ 8000             ; ------------------------
0647++ 8000             
0648++ 8000             ; F91F-F921: start address of the standard ASCII pattern table
0649++ 8000             ; at every change towar.ds a text mode it is copied in the pattern table
0650++ 8000             ; of the VDP
0651++ 8000             ;   F91F: slot indication (ini: 0)
0652++ 8000             ;   F920-F921: address (ini: 1BBF)
0653++ 8000             ; TODO: make CBIOS use this value instead of hardcoded value
0654++ 8000             CGPNT:          .equ     $F91F
0655++ 8000             
0656++ 8000             ; F922-F923: start address of the nametable in the VRAM
0657++ 8000             NAMBAS:         .equ     $F922
0658++ 8000             
0659++ 8000             ; F924-F925: start address of the pattern table in the VRAM
0660++ 8000             CGPBAS:         .equ     $F924
0661++ 8000             
0662++ 8000             ; F926-F927: start address of the sprite pattern table in the VRAM
0663++ 8000             PATBAS:         .equ     $F926
0664++ 8000             
0665++ 8000             ; F928-F929: start address of the sprite location table in the VRAM
0666++ 8000             ATRBAS:         .equ     $F928
0667++ 8000             
0668++ 8000             ; F92A-F92B: address in VRAM of the pattern of the current position
0669++ 8000             ; on screen
0670++ 8000             CLOC:           .equ     $F92A
0671++ 8000             
0672++ 8000             ; F92C: mask for CLOC selecting the right bits that correspond with
0673++ 8000             ; the current position
0674++ 8000             CMASK:          .equ     $F92C
0675++ 8000             
0676++ 8000             ; F92D-F930: work area for graphical calculations
0677++ 8000             MINDEL:         .equ     $F92D
0678++ 8000             MAXDEL:         .equ     $F92F
0679++ 8000             
0680++ 8000             ; ----------------------------------------------
0681++ 8000             ; F931-F941: work area for calculation of CIRCLE
0682++ 8000             ; ----------------------------------------------
0683++ 8000             
0684++ 8000             ; F931-F932: ratio of # of dots in the horizontal and vertical direction
0685++ 8000             ; if = $0100 then ASPCT1 and ASPCT2 are used
0686++ 8000             ; if < $0100 then it is the # of dots in one direction for each
0687++ 8000             ; $0100 # of dots in the other direction; the direction is indicated
0688++ 8000             ; by CSCLXY
0689++ 8000             ASPECT:         .equ     $F931
0690++ 8000             
0691++ 8000             ; F933:F934: ; distance, in # of dots from the center of the most
0692++ 8000             ; distant point of the circle
0693++ 8000             CENCNT:         .equ     $F933
0694++ 8000             
0695++ 8000             ; F935: switch indication if the start and/or end point need to be
0696++ 8000             ; connected to the center
0697++ 8000             ;  bit 7: connect end point; 1 = yes
0698++ 8000             ;  bit 0: connect start point; 1 = yes
0699++ 8000             CLINEF:         .equ     $F935
0700++ 8000             
0701++ 8000             ; F936-F937: used during calculation of CIRCLE
0702++ 8000             CNPNTS:         .equ     $F936
0703++ 8000             
0704++ 8000             ; F938: direction of drawing of circle:
0705++ 8000             ;  00 = from CSTCNT towar.ds CENCNT
0706++ 8000             ;  FF = from CENCNT towar.ds CSTCNT
0707++ 8000             CPLOTF:         .equ     $F938
0708++ 8000             
0709++ 8000             ; F939-F93A: used during calculation of CIRCLE
0710++ 8000             CPCNT:          .equ     $F939
0711++ 8000             
0712++ 8000             ; F93B-F93C: ; contains the total # of dots of the full circle,
0713++ 8000             ; even when only a part is drawn
0714++ 8000             CPCNT8:         .equ     $F93B
0715++ 8000             
0716++ 8000             ; F93D-F93E: used during calculation of CIRCLE
0717++ 8000             CRCSUM:         .equ     $F93D
0718++ 8000             
0719++ 8000             ; F93F-F940: ; distance in dots from the center towar.ds the closest
0720++ 8000             ; circle point
0721++ 8000             CSTCNT:         .equ     $F93F
0722++ 8000             
0723++ 8000             ; F941: switch indicating if the X or Y direction nee.ds to be streched:
0724++ 8000             ; 0 = X, 1 = Y
0725++ 8000             CSCLXY:         .equ     $F941
0726++ 8000             
0727++ 8000             ; F942-F943: store of CLOC, also used for PAINT
0728++ 8000             CSAVEA:         .equ     $F942
0729++ 8000             
0730++ 8000             ; F944: storage of CMASK; also used for PAINT
0731++ 8000             CSAVEM:         .equ     $F944
0732++ 8000             
0733++ 8000             ; F945-F946: horizontal distance towar.ds the center
0734++ 8000             CXOFF:          .equ     $F945
0735++ 8000             
0736++ 8000             ; F947-F948: vertical distance towar.ds the center
0737++ 8000             CYOFF:          .equ     $F947
0738++ 8000             
0739++ 8000             ; -------------------------------------------
0740++ 8000             ; work area for executing the PAINT statement
0741++ 8000             ; -------------------------------------------
0742++ 8000             
0743++ 8000             ; F949: leftmost position of protrusion towar.ds the left
0744++ 8000             LOHMSK:         .equ     $F949
0745++ 8000             
0746++ 8000             ; F94A: new workdirection for protrusion towar.ds the left
0747++ 8000             LOHDIR:         .equ     $F94A
0748++ 8000             
0749++ 8000             ;F94B-F94C: leftmost position of protrusion towar.ds the left
0750++ 8000             LOHADR:         .equ     $F94B
0751++ 8000             
0752++ 8000             ; F94D: size of protrusion towar.ds the left
0753++ 8000             LOHCNT:         .equ     $F94D
0754++ 8000             
0755++ 8000             ; F94F-F950: # of pixels that may be skipped
0756++ 8000             SKPCNT:         .equ     $F94F
0757++ 8000             
0758++ 8000             ; F951-F952: # of movements
0759++ 8000             MOVCNT:         .equ     $F951
0760++ 8000             
0761++ 8000             ; F953: current direction; $40 = \/, $C0 = /\, $00 = stop
0762++ 8000             PDIREC:         .equ     $F953
0763++ 8000             
0764++ 8000             ; F954: indicate if paint towar.ds the left worked
0765++ 8000             LFPROG:         .equ     $F954
0766++ 8000             
0767++ 8000             ; F955: indicate of a paint towar.ds the right worked
0768++ 8000             RTPROG:         .equ     $F955
0769++ 8000             
0770++ 8000             ; F956-F957: start address of a jumptable for subcomman.ds
0771++ 8000             ; contained in a string variable, used for both PLAY and DRAW
0772++ 8000             ; where this systemvar points to either the PLAY or the DRAW
0773++ 8000             ; table
0774++ 8000             MCLTAB:         .equ     $F956
0775++ 8000             
0776++ 8000             ; F958: switch indication if MCLTAB is for PLAY or DRAW
0777++ 8000             ; $0 = DRAW, $FF = PLAY
0778++ 8000             MCLFLG:         .equ     $F958
0779++ 8000             
0780++ 8000             ; ------------------------------------------
0781++ 8000             ; work area for sound and queueing and RS232
0782++ 8000             ; ------------------------------------------
0783++ 8000             
0784++ 8000             ; F959-F971: Variables for three music queues and one RS232 queue
0785++ 8000             ; F959: VOICAQ put position
0786++ 8000             ; F95A: VOICAQ get position
0787++ 8000             ; F95B: VOICAQ putback flag
0788++ 8000             ; F95C: VOICAQ size
0789++ 8000             ; F95D: VOICAQ address
0790++ 8000             ; F95F-F964: VOICBQ
0791++ 8000             ; F965-F96A: VOICCQ
0792++ 8000             ; F96B-F970: RS2IQ
0793++ 8000             QUETAB:         .equ     $F959
0794++ 8000             
0795++ 8000             ; Putback characters for queues. TODO: what purpose do these have exactly?
0796++ 8000             QUEBAK:         .equ     $F971
0797++ 8000             
0798++ 8000             ; Buffers for queues.
0799++ 8000             VOICAQ:         .equ     $F975           ; Voice A queue
0800++ 8000             VOICBQ:         .equ     $F9F5           ; Voice B queue
0801++ 8000             VOICCQ:         .equ     $FA75           ; Voice C queue
0802++ 8000             RS2IQ:          .equ     $FAF5           ; RS232   queue
0803++ 8000             
0804++ 8000             ; in MSX2 the content of RS2IQ is used differently:
0805++ 8000             DPPAGE:         .equ     $FAF5           ; Display page (SCR5+)
0806++ 8000             ACPAGE:         .equ     $FAF6           ; Active page (SCR5+)
0807++ 8000             
0808++ 8000             ; FAF7: AV control port value storage
0809++ 8000             AVCSAV:         .equ     $FAF7
0810++ 8000             
0811++ 8000             ; FAF8: extended BASIC ROM slot address
0812++ 8000             EXBRSA:         .equ     $FAF8           ; TuÊu
0813++ 8000             
0814++ 8000             ; FAF9: character count for ROMA-KANA
0815++ 8000             CHRCNT:         .equ     $FAF9
0816++ 8000             
0817++ 8000             ; FAFA-FAFB: character save for ROMA-KANA
0818++ 8000             ROMA:           .equ     $FAFA
0819++ 8000             
0820++ 8000             ; ROMA-KANA extension mode switch or VRAM size??
0821++ 8000             MODE:           .equ     $FAFC
0822++ 8000             ;Reserved       .equ     $FAFD
0823++ 8000             
0824++ 8000             ; FAFE-FAFF: x position for mouse or lightpen
0825++ 8000             XSAVE:          .equ     $FAFE
0826++ 8000             
0827++ 8000             ; FB00-FB01: y position for mouse or lightpen
0828++ 8000             YSAVE:          .equ     $FB00
0829++ 8000             LOGOPR:         .equ     $FB02
0830++ 8000             ; FB21-FB28: Table which contains info for up to 4 disk ROMs, 2 bytes each:
0831++ 8000             ; - first byte: number of drives connected to this interface
0832++ 8000             ; - second byte: slot ID of the disk ROM
0833++ 8000             DRVINF:         .equ     $FB21
0834++ 8000             ; end of MSX2 only usage of RS2IQ
0835++ 8000             
0836++ 8000             ; --------------------------------
0837++ 8000             ; work area for the PLAY statement
0838++ 8000             ; --------------------------------
0839++ 8000             
0840++ 8000             ; FB35: status about the parsing of a PLAY string
0841++ 8000             ;  bit 7: only one time parsed; 1 = yes
0842++ 8000             ;  bit 1-0: number of parsed strings (0-3)
0843++ 8000             PRSCNT:         .equ     $FB35
0844++ 8000             
0845++ 8000             ; FB36-FB37: storage of stack
0846++ 8000             SAVSP:          .equ     $FB36
0847++ 8000             
0848++ 8000             ; FB38: # of voice currently being parsed (0-2)
0849++ 8000             VOICEN:         .equ     $FB38
0850++ 8000             
0851++ 8000             ; FB39-FB3A: storage of volume of a muted voice
0852++ 8000             SAVVOL:         .equ     $FB39
0853++ 8000             
0854++ 8000             ; FB3B: size of string being parsed (also used by DRAW)
0855++ 8000             MCLLEN:         .equ     $FB3B
0856++ 8000             
0857++ 8000             ; FB3C-FB3D: address of string being parsed (also used by DRAW)
0858++ 8000             MCLPTR:         .equ     $FB3C
0859++ 8000             
0860++ 8000             ; FB3E: temporarely storage of active queue # (0-2)
0861++ 8000             QUEUEN:         .equ     $FB3E
0862++ 8000             
0863++ 8000             ; FB3F: flag indicating which queues are active
0864++ 8000             ; bit 2 = queue 2; 1 = active
0865++ 8000             ; bit 1 = queue 1; 1 = active
0866++ 8000             ; bit 0 = queue 0; 1 = active
0867++ 8000             MUSICF:         .equ     $FB3F
0868++ 8000             
0869++ 8000             ; FB40: count of the # of PLAY statements parsed, but not executed yet
0870++ 8000             PLYCNT:         .equ     $FB40
0871++ 8000             
0872++ 8000             ; FB41-FB65: Voice Control Block for voice A (queue 0)
0873++ 8000             VCBA:           .equ     $FB41
0874++ 8000             ; FB66-FB8A: Voice Control Block for voice B (queue 1)
0875++ 8000             VCBB:           .equ     $FB66
0876++ 8000             ; FB8B-FBAF: Voice Control Block for voice C (queue 2)
0877++ 8000             VCBC:           .equ     $FB8B
0878++ 8000             
0879++ 8000             ; each VCB has the following structure:
0880++ 8000             
0881++ 8000             ; name                  offset  length  purpose
0882++ 8000             METREX:         .equ     0 ;     2       interrupt counter
0883++ 8000             VCXLEN:         .equ     2 ;     1       MCLLEN for voice
0884++ 8000             VCXPTR:         .equ     3 ;     2       MCLPTR for voice
0885++ 8000             VCXSTP:         .equ     5 ;     2       stack pointer
0886++ 8000             QLENGX:         .equ     7 ;     1       # bytes in queue
0887++ 8000             NTICSX:         .equ     8 ;     2       new counter ?
0888++ 8000             TONPRX:         .equ     10;     2       pitch
0889++ 8000             AMPLTX:         .equ     12;     1       amplitude
0890++ 8000             ENVPRX:         .equ     13;     2       envelope speed
0891++ 8000             OCTAVX:         .equ     15;     1       octave
0892++ 8000             NOTELX:         .equ     16;     1       tone length
0893++ 8000             TEMPOX:         .equ     17;     1       tempo
0894++ 8000             VOLUMX:         .equ     18;     1       volume
0895++ 8000             ENVLPX:         .equ     19;     1       envelope shape
0896++ 8000             MCLSTX:         .equ     33;             space for stack storage
0897++ 8000             MCLSEX:         .equ     36;             start of stack
0898++ 8000             ; the stack mentioned above is used to store bytevalues
0899++ 8000             ; that are readied to be put on the voice queue
0900++ 8000             
0901++ 8000             ; -----------------------------------------------
0902++ 8000             ; settings for screen editor and interrupt system
0903++ 8000             ; -----------------------------------------------
0904++ 8000             
0905++ 8000             ; FBB0: switch indicating if software reset is enabled
0906++ 8000             ; 0 = n, 1 = yes; can be used to reset BASIC by pressing
0907++ 8000             ; SHIFT-CODE-GRAPH; does not erase the existing program
0908++ 8000             ; (ini: 0)
0909++ 8000             ENSTOP:         .equ     $FBB0
0910++ 8000             
0911++ 8000             ; FBB1: switch indicating if the current BASIC program is in a ROM
0912++ 8000             ; 0 = no; 1 = yes
0913++ 8000             BASROM:         .equ     $FBB1
0914++ 8000             
0915++ 8000             ; FBB2-FBC9: table containing for each line if it continues on the
0916++ 8000             ; next line; 0 = yes, >0 = no
0917++ 8000             LINTTB:         .equ     $FBB2
0918++ 8000             
0919++ 8000             ; FBCA-FBCB storage of location of cursor for INLIN and QINLIN
0920++ 8000             ;  FBCA: CSRY , FBCB: CSRX
0921++ 8000             FSTPOS:         .equ     $FBCA
0922++ 8000             
0923++ 8000             ; ASCII code of the character currently covered by the cursor
0924++ 8000             ; TODO: is the name CURSAV or CO.dsAV ?
0925++ 8000             CURSAV:         .equ     $FBCC
0926++ 8000             
0927++ 8000             ; FBCD: switch indicating which function keys are to be displayed
0928++ 8000             ; on the screen; 0 = F6-F10, 1 = F1-F5
0929++ 8000             FNKSWI:         .equ     $FBCD
0930++ 8000             
0931++ 8000             ; FBCE-FBD7: for each function key, a flag indicating if it has
0932++ 8000             ; interrupt facility enabled; 0 = disabled, 1 = enabled
0933++ 8000             FNKFLG:         .equ     $FBCE
0934++ 8000             
0935++ 8000             ; FBD8: counter of # of interrupts that still have a pending ON .. GOSUB
0936++ 8000             ONGSBF:         .equ     $FBD8
0937++ 8000             
0938++ 8000             ; FBD9: flag indicating if a keyclick has already been generated, to avoid
0939++ 8000             ; keyclicks for a key that generates two ASCII codes
0940++ 8000             ; $00 = no click, $0F = click
0941++ 8000             CLIKFL:         .equ     $FBD9
0942++ 8000             
0943++ 8000             ; FBDA-FBE4: storage of keyboard matrix, used for detection key repetition
0944++ 8000             OLDKEY:         .equ     $FBDA
0945++ 8000             
0946++ 8000             ; FBE5-FBEF: current state of the keyboard matrix
0947++ 8000             NEWKEY:         .equ     $FBE5
0948++ 8000             
0949++ 8000             ; keyboard buffer; each char entered via the keyboard en.ds up here
0950++ 8000             KEYBUF:         .equ     $FBF0
0951++ 8000             ; LIMPNT: something about "key buffer pointer"
0952++ 8000             LIMPNT:         .equ     $FC17           ; L[obt@ÖÌ|C^
0953++ 8000             
0954++ 8000             ; FC18-FC3F: work area for processing the last typed line
0955++ 8000             LINWRK:         .equ     $FC18           ; 40ªÌobt@
0956++ 8000             
0957++ 8000             ; FC40-FC47: storage for the patter of an ASCII character
0958++ 8000             ; used when writing an ASCII character in a graphical mode
0959++ 8000             PATWRK:         .equ     $FC40
0960++ 8000             
0961++ 8000             ; FC48-FC49: lowest address of the RAM memory; initialized at startup
0962++ 8000             ; and not changed normally
0963++ 8000             BOTTOM:         .equ     $FC48
0964++ 8000             
0965++ 8000             ; FC4A-FC4B: highest address of the RAM memory that is not reserved by
0966++ 8000             ; the OS; string area, filebuffers and stack are below this address
0967++ 8000             ; initialized at startup and not changed normally
0968++ 8000             HIMEM:          .equ     $FC4A
0969++ 8000             
0970++ 8000             ; FC4C-FC99: table for interrupt facilities of MSX BASIC
0971++ 8000             ; each 3 bytes are used like this:
0972++ 8000             ; byte 1 is a flag:
0973++ 8000             ;  bit 2: interrupt happened; 1 = yes
0974++ 8000             ;  bit 1: interrupt stop; 1 = yes
0975++ 8000             ;  bit 0: interrupt off; 1 = no
0976++ 8000             ; byte 2-3 is the adress of the line in BASIC where should be
0977++ 8000             ; jumped too
0978++ 8000             ; the offsets in the table are:
0979++ 8000             ;  offset  address interrupt
0980++ 8000             ;       0  FC4C    F1
0981++ 8000             ;       3  FC4F    F2
0982++ 8000             ;       6  FC52    F3
0983++ 8000             ;       9  FC55    F4
0984++ 8000             ;      12  FC58    F5
0985++ 8000             ;      15  FC5B    F6
0986++ 8000             ;      18  FC5E    F7
0987++ 8000             ;      21  FC61    F8
0988++ 8000             ;      24  FC64    F9
0989++ 8000             ;      27  FC67    F10
0990++ 8000             ;      30  FC6A    STOP
0991++ 8000             ;      33  FC6D    sprite collision
0992++ 8000             ;      36  FC70    SPACE (trigger 0)
0993++ 8000             ;      39  FC73    joystick 1 button 1 (trigger 1)
0994++ 8000             ;      39  FC76    joystick 2 button 1 (trigger 2)
0995++ 8000             ;      39  FC79    joystick 1 button 2 (trigger 3)
0996++ 8000             ;      39  FC7C    joystick 2 button 2 (trigger 4)
0997++ 8000             ;      39  FC7F    interval
0998++ 8000             TRPTBL:         .equ     $FC4C
0999++ 8000             
1000++ 8000             ; FC9A: usage unknown
1001++ 8000             RTYCNT:         .equ     $FC9A
1002++ 8000             
1003++ 8000             ; FC9B: STOP indication
1004++ 8000             ; 0 = nothing; 3 = CTRL+STOP, 4 = STOP
1005++ 8000             INTFLG:         .equ     $FC9B
1006++ 8000             
1007++ 8000             ; FC9C: last read Y-position of a touchpad
1008++ 8000             PADY:           .equ     $FC9C
1009++ 8000             
1010++ 8000             ; FC9D: last read X-position of a touchpad
1011++ 8000             PADX:           .equ     $FC9D
1012++ 8000             
1013++ 8000             ; FC9E-FC9F: software clock, updated at each VDP interrupt
1014++ 8000             JIFFY:          .equ     $FC9E           ; timer counter
1015++ 8000             
1016++ 8000             ; FCA0-FCA1: initial value of INTCNT, used when INTCNT
1017++ 8000             ; reaches 0; used for ON INTERVAL GOSUB
1018++ 8000             INTVAL:         .equ     $FCA0
1019++ 8000             
1020++ 8000             ; FCA2-FCA3: interrupt counter; lowered at each VDP interrupt;
1021++ 8000             ; reset with value of INTVAL when it reaches zero; if interval
1022++ 8000             ; interrupt is needed, it is generated
1023++ 8000             INTCNT:         .equ     $FCA2
1024++ 8000             
1025++ 8000             ; FCA4-FCA5: parameter used at tap input, given a value during
1026++ 8000             ; reading of a headerblock from tape
1027++ 8000             LOWLIM:         .equ     $FCA4
1028++ 8000             WINWID:         .equ     $FCA5
1029++ 8000             
1030++ 8000             ; FCA6: flag indicating if the previous character written
1031++ 8000             ; to the screen was an extension character for graphical signs
1032++ 8000             ; (ASCII 1); 0 = no, 1 = yes
1033++ 8000             GRPHED:         .equ     $FCA6
1034++ 8000             
1035++ 8000             ; FCA7 ESCCNT State of a state machine that handles the printing of escape
1036++ 8000             ; s.equences. A subset of the VT52 escape s.equences is supported.
1037++ 8000             ; values:
1038++ 8000             ; $00: not inside an escape s.equence
1039++ 8000             ; $01: seen <ESC>x
1040++ 8000             ; $02: seen <ESC>y
1041++ 8000             ; $03: seen <ESC>Y<row>
1042++ 8000             ; $04: seen <ESC>Y
1043++ 8000             ; $FF: seen <ESC>
1044++ 8000             ESCCNT:         .equ     $FCA7
1045++ 8000             
1046++ 8000             ; FCA8: switch indicating insert or overwrite mode
1047++ 8000             ; $00 = overwrite; $FF = insert
1048++ 8000             ; the value of INSFLG is changed each time the INS key is pressed
1049++ 8000             INSFLG:         .equ     $FCA8
1050++ 8000             
1051++ 8000             ; FCA9: show cursor; 0 = no, 1 = yes
1052++ 8000             ; can be changed with escape s.equences x5 and y5
1053++ 8000             CSRSW:          .equ     $FCA9
1054++ 8000             
1055++ 8000             ; FCAA: shape of cursor; 0 = block; 1 = insert
1056++ 8000             ; pressing the INS key changes the value of CSTYLE
1057++ 8000             ; can be changed with escape s.equences x4 and y4
1058++ 8000             CSTYLE:         .equ     $FCAA
1059++ 8000             
1060++ 8000             ; switch indicating if the CAPS-LOCK is on
1061++ 8000             ; $00 = off, $FF = on (unofficial: $80 = perma-on)
1062++ 8000             CAPST:          .equ     $FCAB
1063++ 8000             
1064++ 8000             ; FCAC: dead key control in non-japanese MSX models
1065++ 8000             ; ad.ds a mark on the next char pressed, if applicable
1066++ 8000             ;  0 = no dead key
1067++ 8000             ;  1 = dead key                => accent grave
1068++ 8000             ;  2 = SHIFT + dead key        => accent aigu
1069++ 8000             ;  3 = CODE + dead key         => accent circumflex
1070++ 8000             ;  4 = SHIFT + CODE + dead key => trema
1071++ 8000             ; in japanese models it controls the charset used
1072++ 8000             KANAST:         .equ     $FCAC
1073++ 8000             
1074++ 8000             ; FCAD: only used in japanese MSX models; it defines
1075++ 8000             ; the used typeset (ini: $40)
1076++ 8000             KANAMD:         .equ     $FCAD
1077++ 8000             
1078++ 8000             ; ----
1079++ 8000             ; misc
1080++ 8000             ; ----
1081++ 8000             
1082++ 8000             FLBMEM:         .equ     $FCAE
1083++ 8000             SCRMOD:         .equ     $FCAF
1084++ 8000             OLDSCR:         .equ     $FCB0
1085++ 8000             CASPRV:         .equ     $FCB1
1086++ 8000             BRDATR:         .equ     $FCB2
1087++ 8000             GXPOS:          .equ     $FCB3
1088++ 8000             GYPOS:          .equ     $FCB5
1089++ 8000             GRPACX:         .equ     $FCB7
1090++ 8000             GRPACY:         .equ     $FCB9
1091++ 8000             DRWFLG:         .equ     $FCBB
1092++ 8000             DRWANG:         .equ     $FCBD
1093++ 8000             RUNBNF:         .equ     $FCBE
1094++ 8000             SAVENT:         .equ     $FCBF
1095++ 8000             
1096++ 8000             ; ---------------------------
1097++ 8000             ; storage of slot information
1098++ 8000             ; ---------------------------
1099++ 8000             
1100++ 8000             ; FCC1-FCC4: Information for each primary slot. The most significant bit is
1101++ 8000             ; set if the primary slot is found to be expanded.
1102++ 8000             EXPTBL:         .equ     $FCC1
1103++ 8000             
1104++ 8000             ; FCC5-FCC8: Duplicate the contents of the four possible secondary slot
1105++ 8000             ; registers.
1106++ 8000             SLTTBL:         .equ     $FCC5
1107++ 8000             
1108++ 8000             ; FCC9-FD08: Information for any extension ROMs found during the power-up
1109++ 8000             ; ROM search.
1110++ 8000             ; FCC9-FCCC: primary slot 0, secondary slot 0
1111++ 8000             ; FCCD-FCD0: primary slot 0, secondary slot 1
1112++ 8000             ; FCD1-FCD4: primary slot 0, secondary slot 2
1113++ 8000             ; FCD5-FCD8: primary slot 0, secondary slot 3
1114++ 8000             ; FCD9-FCE8: primary slot 1
1115++ 8000             ; FCE9-FCF8: primary slot 2
1116++ 8000             ; FCF9-FD08: primary slot 3
1117++ 8000             ; The information is stored as below.
1118++ 8000             ; bit 7 (set): BASIC program
1119++ 8000             ; bit 6 (set): device handler
1120++ 8000             ; bit 5 (set): statement handler
1121++ 8000             SLTATR:         .equ     $FCC9
1122++ 8000             
1123++ 8000             SLTWRK:         .equ     $FD09
1124++ 8000             
1125++ 8000             ; ------------------------------
1126++ 8000             ; storage of ROM-page parameters
1127++ 8000             ; ------------------------------
1128++ 8000             
1129++ 8000             PROCNM:         .equ     $FD89
1130++ 8000             DEVICE:         .equ     $FD99
1131++ 8000             ; ------------
1132++ 8000             ; system hooks
1133++ 8000             ; ------------
1134++ 8000             
1135++ 8000             ; system hooks are defined in hooks.asm
1136++ 8000             
1137++ 8000             ; ------------------
1138++ 8000             ; storage of VDP8-23
1139++ 8000             ; ------------------
1140++ 8000             
1141++ 8000             ; FFE7-FFF6: storage of VDP 8-23
1142++ 8000             RG8SAV:         .equ     $FFE7
1143++ 8000             
1144++ 8000             ; ----------------------
1145++ 8000             ; extra slot information
1146++ 8000             ; ----------------------
1147++ 8000             
1148++ 8000             ; FFF7: slot address of main-rom
1149++ 8000             ;?????:         .equ     $FFF7
1150++ 8000             
1151++ 8000             ; ------------------
1152++ 8000             ; storage of VDP25-27
1153++ 8000             ; ------------------
1154++ 8000             
1155++ 8000             ; FFFA-FFFC: storage of VDP 25-27
1156++ 8000             RG25SAV:         .equ     $FFFA
1157++ 8000             
1158++ 8000             ; ---------------------------
1159++ 8000             ; subslot switching addresses
1160++ 8000             ; ---------------------------
1161++ 8000             
1162++ 8000             ; FFFF: subslot switching address
1163++ 8000             ; This is not actually a system variable, it is a har.dware register:
1164++ 8000             ;   SSL_REGS (see har.dware.asm).
1165++ 8000             
1166++ 8000             ; -------
1167++ 8000             ; the end
1168++ 8000             ; -------
1169++ 8000             
1170++ 8000             ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
0028+  8000             
0029+  8000             ;
0030+  8000 43 2D 42 49 logo_ident:     .db      "C-BIOS Logo ROM",$FF
0030+  8004 4F 53 20 4C 
0030+  8008 6F 67 6F 20 
0030+  800C 52 4F 4D FF 
0031+  8010             
0032+  8010             logo_show:
0033+  8010                     .IF VDP = TMS99X8
0034+  8010 CD 6F 00                    call    $6f
0035+  8013             
0036+  8013 3E 05                       ld      a,5
0037+  8015 32 EA F3                    ld      (BAKCLR),a
0038+  8018 32 EB F3                    ld      (BDRCLR),a
0039+  801B CD 62 00                    call    $62
0040+  801E             
0041+  801E 2A 22 F9                    ld      hl,(NAMBAS)
0042+  8021 01 00 03                    ld      bc,768
0043+  8024 3E 00                       ld      a,$00
0044+  8026 CD 56 00                    call    $56
0045+  8029             
0046+  8029                             ; Set up SCREEN 2 mirrored
0047+  8029 01 00 02                    ld      bc,0 +(256* 2)
0048+  802C CD 47 00                    call    $47
0049+  802F 01 03 9F                    ld      bc,3 +(256* 159)
0050+  8032 CD 47 00                    call    $47
0051+  8035 01 04 00                    ld      bc,4 +(256* 0)
0052+  8038 CD 47 00                    call    $47
0053+  803B             
0054+  803B                             ; Fill the color table
0055+  803B 3A E9 F3                    ld      a,(FORCLR)
0056+  803E E6 0F                       and     15
0057+  8040 07                          rlca
0058+  8041 07                          rlca
0059+  8042 07                          rlca
0060+  8043 07                          rlca
0061+  8044 47                          ld      b,a
0062+  8045 3A EA F3                    ld      a,(BAKCLR)
0063+  8048 E6 0F                       and     15
0064+  804A B0                          or      b
0065+  804B 01 00 08                    ld      bc,2048
0066+  804E 2A C9 F3                    ld      hl,(GRPCOL)
0067+  8051 CD 56 00                    call    $56
0068+  8054             
0069+  8054 2A 24 F9                    ld      hl,(CGPBAS)
0070+  8057 01 00 04                    ld      bc,8 * logo_patoffset
0071+  805A 09                          add     hl,bc
0072+  805B EB                          ex      de,hl
0073+  805C 01 30 03                    ld      bc,8 * logo_npatterns
0074+  805F 21 BC 80                    ld      hl,logo_patterns
0075+  8062 CD 5C 00                    call    $5c
0076+  8065             
0077+  8065 2A 24 F9                    ld      hl,(CGPBAS)
0078+  8068 01 00 01                    ld      bc,8 * 32
0079+  806B 09                          add     hl,bc
0080+  806C EB                          ex      de,hl
0081+  806D 2A 04 00                    ld      hl,(4)
0082+  8070 09                          add     hl,bc
0083+  8071 01 00 03                    ld      bc,8 * 96
0084+  8074 CD 5C 00                    call    $5c
0085+  8077             
0086+  8077 2A C9 F3                    ld      hl,(GRPCOL)
0087+  807A 01 00 04                    ld      bc,8 * logo_patoffset
0088+  807D 09                          add     hl,bc
0089+  807E EB                          ex      de,hl
0090+  807F 01 30 03                    ld      bc,8 * logo_ncolors
0091+  8082 21 EC 83                    ld      hl,logo_colors
0092+  8085 CD 5C 00                    call    $5c
0093+  8088             
0094+  8088 2A C9 F3                    ld      hl,(GRPCOL)
0095+  808B 11 00 01                    ld      de,8 * 32
0096+  808E 19                          add     hl,de
0097+  808F 01 00 03                    ld      bc,8 * 96
0098+  8092 3E F1                       ld      a,$f1
0099+  8094 CD 56 00                    call    $56
0100+  8097             
0101+  8097 2A 22 F9                    ld      hl,(NAMBAS)
0102+  809A 01 84 00                    ld      bc,logo_namoffset
0103+  809D 09                          add     hl,bc
0104+  809E EB                          ex      de,hl
0105+  809F 21 1C 87                    ld      hl,logo_names
0106+  80A2 06 0A                       ld      b,logo_height
0107+  80A4             plot_logo_nam:
0108+  80A4 C5                          push    bc
0109+  80A5 E5                          push    hl
0110+  80A6 D5                          push    de
0111+  80A7 01 18 00                    ld      bc,logo_width
0112+  80AA CD 5C 00                    call    $5c
0113+  80AD E1                          pop     hl                      ; value of DE
0114+  80AE 01 20 00                    ld      bc,32
0115+  80B1 09                          add     hl,bc
0116+  80B2 EB                          ex      de,hl
0117+  80B3 E1                          pop     hl                      ; value of HL
0118+  80B4 01 18 00                    ld      bc,logo_width
0119+  80B7 09                          add     hl,bc
0120+  80B8 C1                          pop     bc
0121+  80B9 10 E9                       djnz    plot_logo_nam
0122+  80BB             
0123+  80BB C9                          ret
0124+  80BC             ;
0125+  80BC             logo_patoffset: .equ     128
0126+  80BC             logo_namoffset: .equ     (4 *32)+ 4                ; Y *32+ 4
0127+  80BC             ;
0128+  80BC             logo_patterns:
0129+  80BC 00 00 00 00                 .db      $00,$00,$00,$00,$00,$00,$00,$00
0129+  80C0 00 00 00 00 
0130+  80C4             logo_patlength: .equ     $ - logo_patterns
0131+  80C4 00 00 00 00                 .db      $00,$00,$00,$00,$00,$00,$FE,$F8
0131+  80C8 00 00 FE F8 
0132+  80CC 00 00 FE F8                 .db      $00,$00,$FE,$F8,$1F,$7F,$00,$00
0132+  80D0 1F 7F 00 00 
0133+  80D4 FE 3F 00 00                 .db      $FE,$3F,$00,$00,$00,$00,$00,$00
0133+  80D8 00 00 00 00 
0134+  80DC 00 00 00 00                 .db      $00,$00,$00,$00,$00,$00,$00,$00
0134+  80E0 00 00 00 00 
0135+  80E4 1F 00 00 00                 .db      $1F,$00,$00,$00,$00,$00,$00,$00
0135+  80E8 00 00 00 00 
0136+  80EC 00 00 1F F8                 .db      $00,$00,$1F,$F8,$FE,$00,$00,$00
0136+  80F0 FE 00 00 00 
0137+  80F4 00 00 00 00                 .db      $00,$00,$00,$00,$00,$7F,$1F,$F0
0137+  80F8 00 7F 1F F0 
0138+  80FC 00 00 00 00                 .db      $00,$00,$00,$00,$FE,$FC,$F8,$F0
0138+  8100 FE FC F8 F0 
0139+  8104 1F 3F 7F 00                 .db      $1F,$3F,$7F,$00,$00,$00,$00,$00
0139+  8108 00 00 00 00 
0140+  810C 00 00 00 00                 .db      $00,$00,$00,$00,$FE,$FC,$F8,$F0
0140+  8110 FE FC F8 F0 
0141+  8114 00 F8 1F 7F                 .db      $00,$F8,$1F,$7F,$00,$00,$00,$00
0141+  8118 00 00 00 00 
0142+  811C 00 00 00 00                 .db      $00,$00,$00,$00,$00,$00,$00,$00
0142+  8120 00 00 00 00 
0143+  8124 00 1F F8 FE                 .db      $00,$1F,$F8,$FE,$00,$00,$00,$00
0143+  8128 00 00 00 00 
0144+  812C 00 00 00 00                .db      $00,$00,$00,$00,$00,$7F,$3F,$1F
0144+  8130 00 7F 3F 1F 
0145+  8134 F8 FC FE 00                .db      $F8,$FC,$FE,$00,$00,$00,$00,$00
0145+  8138 00 00 00 00 
0146+  813C 00 00 00 00                .db      $00,$00,$00,$00,$7F,$3F,$1F,$F0
0146+  8140 7F 3F 1F F0 
0147+  8144 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$FE,$FE
0147+  8148 00 00 FE FE 
0148+  814C 1F 3F 7F 7F                .db      $1F,$3F,$7F,$7F,$00,$00,$00,$00
0148+  8150 00 00 00 00 
0149+  8154 00 00 00 00                .db      $00,$00,$00,$00,$00,$FE,$FE,$FC
0149+  8158 00 FE FE FC 
0150+  815C 1F 3F 7F 00                .db      $1F,$3F,$7F,$00,$00,$00,$00,$00
0150+  8160 00 00 00 00 
0151+  8164 F8 F8 F8 F8                .db      $F8,$F8,$F8,$F8,$F0,$F0,$F0,$F0
0151+  8168 F0 F0 F0 F0 
0152+  816C 1F 1F 1F 1F                .db      $1F,$1F,$1F,$1F,$3F,$3F,$3F,$3F
0152+  8170 3F 3F 3F 3F 
0153+  8174 F8 F8 F8 F8                .db      $F8,$F8,$F8,$F8,$00,$00,$00,$00
0153+  8178 00 00 00 00 
0154+  817C F8 F8 F0 F0                .db      $F8,$F8,$F0,$F0,$F0,$1F,$1F,$1F
0154+  8180 F0 1F 1F 1F 
0155+  8184 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0155+  8188 00 00 00 00 
0156+  818C F8 F8 F0 F0                .db      $F8,$F8,$F0,$F0,$F0,$1F,$1F,$1F
0156+  8190 F0 1F 1F 1F 
0157+  8194 F0 F0 F0 F0                .db      $F0,$F0,$F0,$F0,$1F,$1F,$1F,$1F
0157+  8198 1F 1F 1F 1F 
0158+  819C 3F C7 DF 00                .db      $3F,$C7,$DF,$00,$00,$F8,$F0,$1F
0158+  81A0 00 F8 F0 1F 
0159+  81A4 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0159+  81A8 00 00 00 00 
0160+  81AC 00 00 00 00                .db      $00,$00,$00,$00,$F8,$00,$00,$00
0160+  81B0 F8 00 00 00 
0161+  81B4 00 1F F8 FC                .db      $00,$1F,$F8,$FC,$FE,$00,$7F,$3F
0161+  81B8 FE 00 7F 3F 
0162+  81BC FE FE FE FE                .db      $FE,$FE,$FE,$FE,$FC,$FC,$FC,$7C
0162+  81C0 FC FC FC 7C 
0163+  81C4 F0 F0 F0 F0                .db      $F0,$F0,$F0,$F0,$1F,$1F,$1F,$1F
0163+  81C8 1F 1F 1F 1F 
0164+  81CC 00 00 FC F8                .db      $00,$00,$FC,$F8,$1F,$3F,$7F,$FE
0164+  81D0 1F 3F 7F FE 
0165+  81D4 1F 00 00 00                .db      $1F,$00,$00,$00,$F0,$7F,$00,$00
0165+  81D8 F0 7F 00 00 
0166+  81DC 1F FC 00 00                .db      $1F,$FC,$00,$00,$00,$1F,$F0,$F8
0166+  81E0 00 1F F0 F8 
0167+  81E4 00 00 00 7F                .db      $00,$00,$00,$7F,$3F,$1F,$1F,$F0
0167+  81E8 3F 1F 1F F0 
0168+  81EC FE F8 F0 1F                .db      $FE,$F8,$F0,$1F,$7F,$7C,$FC,$F8
0168+  81F0 7F 7C FC F8 
0169+  81F4 3F 3F 7F 7F                .db      $3F,$3F,$7F,$7F,$7F,$7F,$7F,$7F
0169+  81F8 7F 7F 7F 7F 
0170+  81FC 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0170+  8200 00 00 00 00 
0171+  8204 3F 3F 7F 7F                .db      $3F,$3F,$7F,$7F,$7F,$7F,$7F,$7F
0171+  8208 7F 7F 7F 7F 
0172+  820C 1F 1F 1F 1F                .db      $1F,$1F,$1F,$1F,$3F,$3F,$3F,$3F
0172+  8210 3F 3F 3F 3F 
0173+  8214 3F 7F 7F 7F                .db      $3F,$7F,$7F,$7F,$00,$00,$00,$00
0173+  8218 00 00 00 00 
0174+  821C 1F F0 F8 F8                .db      $1F,$F0,$F8,$F8,$F8,$F8,$F8,$F8
0174+  8220 F8 F8 F8 F8 
0175+  8224 7C 3C 3C 3C                .db      $7C,$3C,$3C,$3C,$C7,$C7,$C7,$C7
0175+  8228 C7 C7 C7 C7 
0176+  822C 1F 1E E3 E3                .db      $1F,$1E,$E3,$E3,$C7,$C7,$C7,$C7
0176+  8230 C7 C7 C7 C7 
0177+  8234 FC F8 F0 F0                .db      $FC,$F8,$F0,$F0,$1F,$3F,$3F,$3F
0177+  8238 1F 3F 3F 3F 
0178+  823C FC FE 00 00                .db      $FC,$FE,$00,$00,$00,$00,$00,$00
0178+  8240 00 00 00 00 
0179+  8244 F0 F8 F8 F8                .db      $F0,$F8,$F8,$F8,$F8,$F8,$F8,$F8
0179+  8248 F8 F8 F8 F8 
0180+  824C F8 F8 F8 F8                .db      $F8,$F8,$F8,$F8,$F8,$FE,$7F,$3F
0180+  8250 F8 FE 7F 3F 
0181+  8254 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0181+  8258 00 00 00 00 
0182+  825C 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$7F,$1F
0182+  8260 00 00 7F 1F 
0183+  8264 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0183+  8268 00 00 00 00 
0184+  826C 3F 3F 3F 3F                .db      $3F,$3F,$3F,$3F,$7E,$7E,$7E,$7E
0184+  8270 7E 7E 7E 7E 
0185+  8274 F8 F8 F8 F0                .db      $F8,$F8,$F8,$F0,$1F,$1F,$3F,$7E
0185+  8278 1F 1F 3F 7E 
0186+  827C C7 C7 C7 C7                .db      $C7,$C7,$C7,$C7,$F0,$F0,$F0,$F0
0186+  8280 F0 F0 F0 F0 
0187+  8284 C7 C7 C7 C7                .db      $C7,$C7,$C7,$C7,$78,$78,$78,$7C
0187+  8288 78 78 78 7C 
0188+  828C 3F 3F 3F 3F                .db      $3F,$3F,$3F,$3F,$3F,$3F,$1F,$F0
0188+  8290 3F 3F 1F F0 
0189+  8294 00 00 00 FE                .db      $00,$00,$00,$FE,$FC,$FC,$F8,$F0
0189+  8298 FC FC F8 F0 
0190+  829C F8 F8 F8 F8                .db      $F8,$F8,$F8,$F8,$F0,$F0,$1F,$1F
0190+  82A0 F0 F0 1F 1F 
0191+  82A4 1F F8 00 00                .db      $1F,$F8,$00,$00,$00,$00,$00,$00
0191+  82A8 00 00 00 00 
0192+  82AC 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0192+  82B0 00 00 00 00 
0193+  82B4 00 00 FE 00                .db      $00,$00,$FE,$00,$00,$00,$00,$00
0193+  82B8 00 00 00 00 
0194+  82BC F0 F8 FC 7C                .db      $F0,$F8,$FC,$7C,$7C,$7C,$7C,$7C
0194+  82C0 7C 7C 7C 7C 
0195+  82C4 00 00 00 7F                .db      $00,$00,$00,$7F,$7F,$7F,$3F,$3F
0195+  82C8 7F 7F 3F 3F 
0196+  82CC 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0196+  82D0 00 00 00 00 
0197+  82D4 00 00 00 7F                .db      $00,$00,$00,$7F,$7F,$7F,$3F,$3F
0197+  82D8 7F 7F 3F 3F 
0198+  82DC 7E 7E 7E 7E                .db      $7E,$7E,$7E,$7E,$00,$00,$00,$00
0198+  82E0 00 00 00 00 
0199+  82E4 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0199+  82E8 00 00 00 00 
0200+  82EC 00 FE FC 1F                .db      $00,$FE,$FC,$1F,$00,$00,$FE,$F0
0200+  82F0 00 00 FE F0 
0201+  82F4 FE FC F8 F0                .db      $FE,$FC,$F8,$F0,$3C,$8F,$1F,$7F
0201+  82F8 3C 8F 1F 7F 
0202+  82FC F0 F0 F0 F0                .db      $F0,$F0,$F0,$F0,$9F,$9F,$9F,$9F
0202+  8300 9F 9F 9F 9F 
0203+  8304 7C 7E 7E 7F                .db      $7C,$7E,$7E,$7F,$E3,$3E,$3F,$3F
0203+  8308 E3 3E 3F 3F 
0204+  830C F8 FC FE 00                .db      $F8,$FC,$FE,$00,$7F,$3F,$F0,$3E
0204+  8310 7F 3F F0 3E 
0205+  8314 00 00 00 3F                .db      $00,$00,$00,$3F,$00,$00,$00,$00
0205+  8318 00 00 00 00 
0206+  831C 00 00 00 FC                .db      $00,$00,$00,$FC,$00,$00,$00,$FE
0206+  8320 00 00 00 FE 
0207+  8324 1F 3F 7F FE                .db      $1F,$3F,$7F,$FE,$F8,$F1,$3C,$F0
0207+  8328 F8 F1 3C F0 
0208+  832C 3F 7F 00 00                .db      $3F,$7F,$00,$00,$7F,$00,$00,$00
0208+  8330 7F 00 00 00 
0209+  8334 00 00 00 FC                .db      $00,$00,$00,$FC,$00,$00,$00,$FE
0209+  8338 00 00 00 FE 
0210+  833C 7C FC F8 F8                .db      $7C,$FC,$F8,$F8,$1F,$3F,$7F,$00
0210+  8340 1F 3F 7F 00 
0211+  8344 3F 3F 1F 1F                .db      $3F,$3F,$1F,$1F,$F0,$F0,$F8,$FC
0211+  8348 F0 F0 F8 FC 
0212+  834C 3F 1F 1F F0                .db      $3F,$1F,$1F,$F0,$F8,$F8,$FC,$FE
0212+  8350 F8 F8 FC FE 
0213+  8354 FC FE 00 00                .db      $FC,$FE,$00,$00,$00,$00,$00,$00
0213+  8358 00 00 00 00 
0214+  835C 00 00 00 7F                .db      $00,$00,$00,$7F,$3F,$1F,$F0,$F8
0214+  8360 3F 1F F0 F8 
0215+  8364 FE 00 00 00                .db      $FE,$00,$00,$00,$00,$00,$00,$00
0215+  8368 00 00 00 00 
0216+  836C 00 00 7F 3F                .db      $00,$00,$7F,$3F,$1F,$F8,$FE,$00
0216+  8370 1F F8 FE 00 
0217+  8374 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$3F
0217+  8378 00 00 00 3F 
0218+  837C 00 00 00 00                .db      $00,$00,$00,$00,$00,$FE,$F8,$3F
0218+  8380 00 FE F8 3F 
0219+  8384 F0 1F 3F 7F                .db      $F0,$1F,$3F,$7F,$00,$00,$00,$00
0219+  8388 00 00 00 00 
0220+  838C 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$FE,$FC
0220+  8390 00 00 FE FC 
0221+  8394 F8 F0 1F 3F                .db      $F8,$F0,$1F,$3F,$7F,$00,$00,$00
0221+  8398 7F 00 00 00 
0222+  839C FC FE 00 00                .db      $FC,$FE,$00,$00,$00,$00,$00,$00
0222+  83A0 00 00 00 00 
0223+  83A4 00 00 7F 1F                .db      $00,$00,$7F,$1F,$F8,$FE,$00,$00
0223+  83A8 F8 FE 00 00 
0224+  83AC 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$3F,$FE
0224+  83B0 00 00 3F FE 
0225+  83B4 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$1F
0225+  83B8 00 00 00 1F 
0226+  83BC 00 00 00 FE                .db      $00,$00,$00,$FE,$F8,$1F,$00,$00
0226+  83C0 F8 1F 00 00 
0227+  83C4 F0 1F 7F 00                .db      $F0,$1F,$7F,$00,$00,$00,$00,$00
0227+  83C8 00 00 00 00 
0228+  83CC 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0228+  83D0 00 00 00 00 
0229+  83D4 00 7F 7F 7F                .db      $00,$7F,$7F,$7F,$7F,$7F,$7F,$7F
0229+  83D8 7F 7F 7F 7F 
0230+  83DC 7F 7F 7F 7F                .db      $7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
0230+  83E0 7F 7F 7F 7F 
0231+  83E4 7F 00 00 00                .db      $7F,$00,$00,$00,$00,$00,$00,$00
0231+  83E8 00 00 00 00 
0232+  83EC             logo_npatterns: .equ     ($ - logo_patterns) / logo_patlength
0233+  83EC             ;
0234+  83EC             logo_colors:
0235+  83EC 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$00,$00
0235+  83F0 00 00 00 00 
0236+  83F4             logo_collength: .equ     $ - logo_colors
0237+  83F4 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$09,$09
0237+  83F8 00 00 09 09 
0238+  83FC 00 00 09 09                .db      $00,$00,$09,$09,$90,$90,$09,$09
0238+  8400 90 90 09 09 
0239+  8404 09 90 09 09                .db      $09,$90,$09,$09,$09,$09,$09,$09
0239+  8408 09 09 09 09 
0240+  840C 09 09 09 09                .db      $09,$09,$09,$09,$09,$09,$09,$09
0240+  8410 09 09 09 09 
0241+  8414 09 09 09 09                .db      $09,$09,$09,$09,$09,$09,$09,$09
0241+  8418 09 09 09 09 
0242+  841C 00 00 09 90                .db      $00,$00,$09,$90,$90,$09,$09,$09
0242+  8420 90 09 09 09 
0243+  8424 00 00 00 00                .db      $00,$00,$00,$00,$00,$09,$09,$90
0243+  8428 00 09 09 90 
0244+  842C 01 01 01 01                .db      $01,$01,$01,$01,$19,$19,$19,$19
0244+  8430 19 19 19 19 
0245+  8434 91 91 91 09                .db      $91,$91,$91,$09,$09,$09,$09,$09
0245+  8438 09 09 09 09 
0246+  843C 09 09 09 09                .db      $09,$09,$09,$09,$91,$91,$91,$91
0246+  8440 91 91 91 91 
0247+  8444 09 91 19 19                .db      $09,$91,$19,$19,$01,$01,$01,$01
0247+  8448 01 01 01 01 
0248+  844C 01 01 01 01                .db      $01,$01,$01,$01,$01,$01,$01,$01
0248+  8450 01 01 01 01 
0249+  8454 09 91 19 19                .db      $09,$91,$19,$19,$01,$01,$01,$01
0249+  8458 01 01 01 01 
0250+  845C 09 09 09 09                .db      $09,$09,$09,$09,$09,$91,$91,$91
0250+  8460 09 91 91 91 
0251+  8464 91 91 91 09                .db      $91,$91,$91,$09,$09,$09,$09,$09
0251+  8468 09 09 09 09 
0252+  846C 01 01 01 01                .db      $01,$01,$01,$01,$19,$19,$19,$91
0252+  8470 19 19 19 91 
0253+  8474 00 00 00 00                .db      $00,$00,$00,$00,$00,$00,$09,$09
0253+  8478 00 00 09 09 
0254+  847C 91 91 91 91                .db      $91,$91,$91,$91,$09,$09,$09,$09
0254+  8480 09 09 09 09 
0255+  8484 09 09 09 09                .db      $09,$09,$09,$09,$09,$91,$91,$91
0255+  8488 09 91 91 91 
0256+  848C 19 19 19 01                .db      $19,$19,$19,$01,$01,$01,$01,$01
0256+  8490 01 01 01 01 
0257+  8494 1F 1F 1F 1F                .db      $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
0257+  8498 1F 1F 1F 1F 
0258+  849C 1F 1F 1F 1F                .db      $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
0258+  84A0 1F 1F 1F 1F 
0259+  84A4 F1 F1 F1 F1                .db      $F1,$F1,$F1,$F1,$01,$01,$01,$01
0259+  84A8 01 01 01 01 
0260+  84AC 08 09 09 09                .db      $08,$09,$09,$09,$08,$90,$90,$90
0260+  84B0 08 90 90 90 
0261+  84B4 08 09 09 09                .db      $08,$09,$09,$09,$08,$09,$09,$09
0261+  84B8 08 09 09 09 
0262+  84BC 81 91 91 91                .db      $81,$91,$91,$91,$81,$19,$19,$19
0262+  84C0 81 19 19 19 
0263+  84C4 1F 1F 1F 1F                .db      $1F,$1F,$1F,$1F,$F1,$F1,$F1,$F1
0263+  84C8 F1 F1 F1 F1 
0264+  84CC 1F F1 F1 0F                .db      $1F,$F1,$F1,$0F,$0F,$F1,$F1,$1F
0264+  84D0 0F F1 F1 1F 
0265+  84D4 0F 0F 0F 0F                .db      $0F,$0F,$0F,$0F,$01,$01,$01,$01
0265+  84D8 01 01 01 01 
0266+  84DC 0F 0F 0F 0F                .db      $0F,$0F,$0F,$0F,$1F,$01,$01,$01
0266+  84E0 1F 01 01 01 
0267+  84E4 01 1F F1 F1                .db      $01,$1F,$F1,$F1,$F1,$0F,$F1,$F1
0267+  84E8 F1 0F F1 F1 
0268+  84EC 1F 1F 1F 1F                .db      $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
0268+  84F0 1F 1F 1F 1F 
0269+  84F4 F1 F1 F1 F1                .db      $F1,$F1,$F1,$F1,$1F,$1F,$1F,$1F
0269+  84F8 1F 1F 1F 1F 
0270+  84FC 01 01 1F 1F                .db      $01,$01,$1F,$1F,$F1,$F1,$F1,$F1
0270+  8500 F1 F1 F1 F1 
0271+  8504 F1 0F 0F 0F                .db      $F1,$0F,$0F,$0F,$F1,$1F,$01,$01
0271+  8508 F1 1F 01 01 
0272+  850C 1F F1 0F 0F                .db      $1F,$F1,$0F,$0F,$0F,$F1,$1F,$1F
0272+  8510 0F F1 1F 1F 
0273+  8514 01 01 01 1F                .db      $01,$01,$01,$1F,$1F,$1F,$1F,$F1
0273+  8518 1F 1F 1F F1 
0274+  851C 1F 1F 1F F1                .db      $1F,$1F,$1F,$F1,$F1,$F1,$F1,$F1
0274+  8520 F1 F1 F1 F1 
0275+  8524 80 90 90 80                .db      $80,$90,$90,$80,$90,$80,$80,$90
0275+  8528 90 80 80 90 
0276+  852C 08 09 09 08                .db      $08,$09,$09,$08,$09,$08,$08,$09
0276+  8530 09 08 08 09 
0277+  8534 18 19 19 18                .db      $18,$19,$19,$18,$19,$18,$18,$19
0277+  8538 19 18 18 19 
0278+  853C F1 F1 F1 F1                .db      $F1,$F1,$F1,$F1,$F1,$F1,$F1,$F1
0278+  8540 F1 F1 F1 F1 
0279+  8544 1F 1F 1F 1F                .db      $1F,$1F,$1F,$1F,$01,$01,$01,$01
0279+  8548 01 01 01 01 
0280+  854C F1 1F 1F 1F                .db      $F1,$1F,$1F,$1F,$1F,$1F,$1F,$1F
0280+  8550 1F 1F 1F 1F 
0281+  8554 1F 1F 1F 1F                .db      $1F,$1F,$1F,$1F,$F1,$F1,$F1,$F1
0281+  8558 F1 F1 F1 F1 
0282+  855C 1F 1F F1 F1                .db      $1F,$1F,$F1,$F1,$F1,$F1,$F1,$F1
0282+  8560 F1 F1 F1 F1 
0283+  8564 F1 F1 F1 F1                .db      $F1,$F1,$F1,$F1,$1F,$1F,$1F,$1F
0283+  8568 1F 1F 1F 1F 
0284+  856C 1F 1F 01 01                .db      $1F,$1F,$01,$01,$01,$01,$01,$01
0284+  8570 01 01 01 01 
0285+  8574 F1 F1 F1 F1                .db      $F1,$F1,$F1,$F1,$F1,$F1,$F1,$F1
0285+  8578 F1 F1 F1 F1 
0286+  857C F1 F1 F1 F1                .db      $F1,$F1,$F1,$F1,$F1,$F1,$F1,$F1
0286+  8580 F1 F1 F1 F1 
0287+  8584 01 01 01 01                .db      $01,$01,$01,$01,$01,$01,$0F,$0F
0287+  8588 01 01 0F 0F 
0288+  858C 01 01 01 01                .db      $01,$01,$01,$01,$01,$01,$1F,$1F
0288+  8590 01 01 1F 1F 
0289+  8594 08 08 08 09                .db      $08,$08,$08,$09,$08,$08,$08,$09
0289+  8598 08 08 08 09 
0290+  859C F1 F1 E1 F1                .db      $F1,$F1,$E1,$F1,$F1,$E1,$E1,$F1
0290+  85A0 F1 E1 E1 F1 
0291+  85A4 1F 1F 1E 1F                .db      $1F,$1F,$1E,$1F,$F1,$E1,$E1,$F1
0291+  85A8 F1 E1 E1 F1 
0292+  85AC F1 F1 E1 F1                .db      $F1,$F1,$E1,$F1,$1F,$1E,$1E,$1F
0292+  85B0 1F 1E 1E 1F 
0293+  85B4 F1 F1 E1 F1                .db      $F1,$F1,$E1,$F1,$1F,$1E,$1E,$1F
0293+  85B8 1F 1E 1E 1F 
0294+  85BC 1F 1F 1E 1F                .db      $1F,$1F,$1E,$1F,$1F,$1E,$1E,$F1
0294+  85C0 1F 1E 1E F1 
0295+  85C4 01 01 01 1F                .db      $01,$01,$01,$1F,$1F,$1E,$1E,$1F
0295+  85C8 1F 1E 1E 1F 
0296+  85CC F1 F1 E1 F1                .db      $F1,$F1,$E1,$F1,$F1,$E1,$1E,$1F
0296+  85D0 F1 E1 1E 1F 
0297+  85D4 F1 1F 01 01                .db      $F1,$1F,$01,$01,$01,$01,$01,$01
0297+  85D8 01 01 01 01 
0298+  85DC 0F 0F 01 01                .db      $0F,$0F,$01,$01,$01,$01,$01,$01
0298+  85E0 01 01 01 01 
0299+  85E4 0F 0F 1E 01                .db      $0F,$0F,$1E,$01,$01,$01,$01,$01
0299+  85E8 01 01 01 01 
0300+  85EC F1 F1 E1 F1                .db      $F1,$F1,$E1,$F1,$F1,$E1,$E1,$F1
0300+  85F0 F1 E1 E1 F1 
0301+  85F4 08 08 08 80                .db      $08,$08,$08,$80,$80,$80,$80,$80
0301+  85F8 80 80 80 80 
0302+  85FC 08 08 08 08                .db      $08,$08,$08,$08,$08,$08,$08,$08
0302+  8600 08 08 08 08 
0303+  8604 01 01 01 18                .db      $01,$01,$01,$18,$18,$18,$18,$18
0303+  8608 18 18 18 18 
0304+  860C E1 E1 E1 E1                .db      $E1,$E1,$E1,$E1,$0E,$0E,$0E,$0E
0304+  8610 0E 0E 0E 0E 
0305+  8614 01 01 01 01                .db      $01,$01,$01,$01,$0E,$0E,$0E,$0E
0305+  8618 0E 0E 0E 0E 
0306+  861C 01 1E 1E E1                .db      $01,$1E,$1E,$E1,$0E,$0E,$E1,$E1
0306+  8620 0E 0E E1 E1 
0307+  8624 E1 E1 E1 E1                .db      $E1,$E1,$E1,$E1,$1E,$E1,$E1,$E1
0307+  8628 1E E1 E1 E1 
0308+  862C 1E 1E 1E 1E                .db      $1E,$1E,$1E,$1E,$E1,$E1,$E1,$E1
0308+  8630 E1 E1 E1 E1 
0309+  8634 1E 1E 1E 1E                .db      $1E,$1E,$1E,$1E,$1E,$E1,$E1,$E1
0309+  8638 1E E1 E1 E1 
0310+  863C E1 E1 E1 0E                .db      $E1,$E1,$E1,$0E,$E1,$E1,$1E,$1E
0310+  8640 E1 E1 1E 1E 
0311+  8644 01 01 01 1E                .db      $01,$01,$01,$1E,$0E,$0E,$0E,$0E
0311+  8648 0E 0E 0E 0E 
0312+  864C 01 01 01 1E                .db      $01,$01,$01,$1E,$0E,$0E,$0E,$E1
0312+  8650 0E 0E 0E E1 
0313+  8654 E1 E1 E1 E1                .db      $E1,$E1,$E1,$E1,$E1,$E1,$1E,$1E
0313+  8658 E1 E1 1E 1E 
0314+  865C 1E 1E 01 01                .db      $1E,$1E,$01,$01,$E1,$0E,$0E,$0E
0314+  8660 E1 0E 0E 0E 
0315+  8664 01 01 01 1E                .db      $01,$01,$01,$1E,$0E,$0E,$0E,$E1
0315+  8668 0E 0E 0E E1 
0316+  866C E1 E1 E1 E1                .db      $E1,$E1,$E1,$E1,$1E,$1E,$1E,$01
0316+  8670 1E 1E 1E 01 
0317+  8674 80 80 80 80                .db      $80,$80,$80,$80,$08,$08,$08,$08
0317+  8678 08 08 08 08 
0318+  867C 18 18 18 81                .db      $18,$18,$18,$81,$81,$81,$81,$81
0318+  8680 81 81 81 81 
0319+  8684 08 08 00 00                .db      $08,$08,$00,$00,$00,$00,$00,$00
0319+  8688 00 00 00 00 
0320+  868C 08 08 08 81                .db      $08,$08,$08,$81,$81,$81,$18,$18
0320+  8690 81 81 18 18 
0321+  8694 81 08 08 08                .db      $81,$08,$08,$08,$08,$08,$08,$08
0321+  8698 08 08 08 08 
0322+  869C 01 01 18 18                .db      $01,$01,$18,$18,$18,$81,$81,$08
0322+  86A0 18 81 81 08 
0323+  86A4 01 01 01 01                .db      $01,$01,$01,$01,$01,$01,$01,$18
0323+  86A8 01 01 01 18 
0324+  86AC 01 01 01 01                .db      $01,$01,$01,$01,$01,$18,$18,$81
0324+  86B0 01 18 18 81 
0325+  86B4 18 81 81 81                .db      $18,$81,$81,$81,$08,$08,$08,$08
0325+  86B8 08 08 08 08 
0326+  86BC 08 08 08 08                .db      $08,$08,$08,$08,$08,$08,$81,$81
0326+  86C0 08 08 81 81 
0327+  86C4 81 81 18 18                .db      $81,$81,$18,$18,$18,$01,$01,$01
0327+  86C8 18 01 01 01 
0328+  86CC 08 08 00 00                .db      $08,$08,$00,$00,$00,$00,$00,$00
0328+  86D0 00 00 00 00 
0329+  86D4 08 08 80 80                .db      $08,$08,$80,$80,$08,$08,$00,$00
0329+  86D8 08 08 00 00 
0330+  86DC 08 08 08 08                .db      $08,$08,$08,$08,$08,$08,$80,$08
0330+  86E0 08 08 80 08 
0331+  86E4 08 08 08 08                .db      $08,$08,$08,$08,$08,$08,$08,$08
0331+  86E8 08 08 08 08 
0332+  86EC 08 08 08 80                .db      $08,$08,$08,$80,$80,$08,$00,$00
0332+  86F0 80 08 00 00 
0333+  86F4 84 08 08 00                .db      $84,$08,$08,$00,$00,$00,$00,$00
0333+  86F8 00 00 00 00 
0334+  86FC 04 00 00 00                .db      $04,$00,$00,$00,$00,$00,$00,$00
0334+  8700 00 00 00 00 
0335+  8704 00 04 04 04                .db      $00,$04,$04,$04,$04,$04,$04,$04
0335+  8708 04 04 04 04 
0336+  870C 04 04 04 04                .db      $04,$04,$04,$04,$04,$04,$04,$04
0336+  8710 04 04 04 04 
0337+  8714 04 00 00 00                .db      $04,$00,$00,$00,$00,$00,$00,$00
0337+  8718 00 00 00 00 
0338+  871C             logo_ncolors:   .equ     ($ - logo_colors) / logo_collength
0339+  871C             ;
0340+  871C             logo_names:
0341+  871C 80 80 81 82                .db      $80,$80,$81,$82,$83,$84,$85,$86,$87,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0341+  8720 83 84 85 86 
0341+  8724 87 80 80 80 
0341+  8728 80 80 80 80 
0341+  872C 80 80 80 80 
0341+  8730 80 80 80 80 
0342+  8734             logo_width:     .equ     $ - logo_names
0343+  8734 80 88 89 8A                .db      $80,$88,$89,$8A,$8B,$8C,$8D,$8E,$8F,$90,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$E3
0343+  8738 8B 8C 8D 8E 
0343+  873C 8F 90 8C 8C 
0343+  8740 8C 8C 8C 8C 
0343+  8744 8C 8C 8C 8C 
0343+  8748 8C 8C 8C E3 
0344+  874C 91 92 93 94                .db      $91,$92,$93,$94,$8C,$95,$96,$8C,$8C,$8C,$8C,$97,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$E4
0344+  8750 8C 95 96 8C 
0344+  8754 8C 8C 8C 97 
0344+  8758 8C 8C 8C 8C 
0344+  875C 8C 8C 8C 8C 
0344+  8760 8C 8C 8C E4 
0345+  8764 98 99 9A 8C                .db      $98,$99,$9A,$8C,$8C,$9B,$9C,$9D,$9E,$9F,$A0,$A1,$A2,$A3,$9D,$A4,$A5,$A6,$9D,$9D,$9D,$9D,$8C,$E4
0345+  8768 8C 9B 9C 9D 
0345+  876C 9E 9F A0 A1 
0345+  8770 A2 A3 9D A4 
0345+  8774 A5 A6 9D 9D 
0345+  8778 9D 9D 8C E4 
0346+  877C A7 A8 A9 8C                .db      $A7,$A8,$A9,$8C,$8C,$AA,$AB,$8C,$8C,$AC,$AD,$AE,$AF,$8C,$8C,$B0,$B1,$B2,$B3,$B3,$B3,$B4,$8C,$E4
0346+  8780 8C AA AB 8C 
0346+  8784 8C AC AD AE 
0346+  8788 AF 8C 8C B0 
0346+  878C B1 B2 B3 B3 
0346+  8790 B3 B4 8C E4 
0347+  8794 B5 B5 8C 8C                .db      $B5,$B5,$8C,$8C,$8C,$B6,$8C,$8C,$8C,$B7,$B8,$B9,$BA,$8C,$8C,$BB,$BC,$BD,$BE,$BE,$BF,$C0,$8C,$E4
0347+  8798 8C B6 8C 8C 
0347+  879C 8C B7 B8 B9 
0347+  87A0 BA 8C 8C BB 
0347+  87A4 BC BD BE BE 
0347+  87A8 BF C0 8C E4 
0348+  87AC C1 C2 C3 8C                .db      $C1,$C2,$C3,$8C,$8C,$C4,$C5,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$C5,$C5,$C5,$CF,$D0,$8C,$E4
0348+  87B0 8C C4 C5 C5 
0348+  87B4 C6 C7 C8 C9 
0348+  87B8 CA CB CC CD 
0348+  87BC CE C5 C5 C5 
0348+  87C0 CF D0 8C E4 
0349+  87C4 D1 C2 D2 8C                .db      $D1,$C2,$D2,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$E4
0349+  87C8 8C 8C 8C 8C 
0349+  87CC 8C 8C 8C 8C 
0349+  87D0 8C 8C 8C 8C 
0349+  87D4 8C 8C 8C 8C 
0349+  87D8 8C 8C 8C E4 
0350+  87DC D3 D4 D5 D6                .db      $D3,$D4,$D5,$D6,$D7,$D8,$D9,$DA,$DB,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C,$8C
0350+  87E0 D7 D8 D9 DA 
0350+  87E4 DB 8C 8C 8C 
0350+  87E8 8C 8C 8C 8C 
0350+  87EC 8C 8C 
0351+  87EE 4E                         .db      "N"
0352+  87EF 38 56 45 4D                .db      "8VEM"
0353+  87F3 E4                         .db      $E4
0354+  87F4 80 DC DD DE                .db      $80,$DC,$DD,$DE,$C2,$DF,$E0,$E1,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E2,$E5
0354+  87F8 C2 DF E0 E1 
0354+  87FC E2 E2 E2 E2 
0354+  8800 E2 E2 E2 E2 
0354+  8804 E2 E2 E2 E2 
0354+  8808 E2 E2 E2 E5 
0355+  880C             logo_height:    .equ     ($ - logo_names) / logo_width
0356+  880C             ;
0357+  880C                     .ENDIF
0358+  880C             ;
0359+  880C~                    .IF VDP = V9938
0360+  880C~                            ld      de,$c000
0361+  880C~                            ld      hl,msx2logodata
0362+  880C~                            call    unPack
0363+  880C~            
0364+  880C~                            ld      hl,0
0365+  880C~                            ld      (BAKCLR),hl
0366+  880C~                            ld      a,5
0367+  880C~                            call    $5f
0368+  880C~            
0369+  880C~                            ld      hl,palette1
0370+  880C~                            call    setpalette
0371+  880C~            
0372+  880C~                            call    $41
0373+  880C~            
0374+  880C~                            ld      hl,256
0375+  880C~                            ld      (BAKCLR),hl
0376+  880C~                            call    $62
0377+  880C~            
0378+  880C~                            ld      a,(RG8SAV+1)
0379+  880C~                            and     127
0380+  880C~                            ld      b,a
0381+  880C~                            ld      c,9
0382+  880C~                            call    $47
0383+  880C~            
0384+  880C~            wait_ce_logo:   ld      a,2
0385+  880C~                            ld      ix,$131
0386+  880C~                            call    $15f
0387+  880C~                            bit     0,a
0388+  880C~                            jr      nz,wait_ce_logo
0389+  880C~            
0390+  880C~                            push    de
0391+  880C~                            ld      bc,15
0392+  880C~                            ld      hl,logo_hmmc
0393+  880C~                            ldir
0394+  880C~            
0395+  880C~                            pop     hl
0396+  880C~                            ld      bc,13
0397+  880C~                            add     hl,bc
0398+  880C~                            ld      de,$c000
0399+  880C~                            ld      a,(de)
0400+  880C~                            inc     de
0401+  880C~                            ld      (hl),a
0402+  880C~                            ex      de,hl
0403+  880C~            
0404+  880C~                            di
0405+  880C~                            ld      a,32
0406+  880C~                            out     ($99),a
0407+  880C~                            ld      a,128+ 17
0408+  880C~                            out     ($99),a
0409+  880C~                            push    hl
0410+  880C~                            ld      bc,15 *256+ $9b
0411+  880C~                            ld      hl,logo_hmmc
0412+  880C~                            otir
0413+  880C~                            pop     hl
0414+  880C~                            ld      a,128+ 44
0415+  880C~                            out     ($99),a
0416+  880C~                            ld      a,128+ 17
0417+  880C~                            out     ($99),a
0418+  880C~                            ei
0419+  880C~            
0420+  880C~                            ld      b,255
0421+  880C~                            otir
0422+  880C~            
0423+  880C~            loop_logo:      ld      a,2
0424+  880C~                            ld      ix,$131
0425+  880C~                            call    $15f
0426+  880C~                            bit     0,a
0427+  880C~                            jr      z,done_logo
0428+  880C~            
0429+  880C~                            otir
0430+  880C~                            jr      loop_logo
0431+  880C~            
0432+  880C~            done_logo:      ld      bc,32
0433+  880C~                            ld      de,$c000
0434+  880C~                            ld      hl,palette1
0435+  880C~                            ldir
0436+  880C~            
0437+  880C~                            ld      hl,22 *8
0438+  880C~                            ld      (GRPACX),hl
0439+  880C~                            ld      hl,12 *8 +1
0440+  880C~                            ld      (GRPACY),hl
0441+  880C~                            ld      a,7
0442+  880C~                            ld      (FORCLR),a
0443+  880C~                            ld      a,8
0444+  880C~                            ld      (LOGOPR),a
0445+  880C~                            ld      hl,logo_ver
0446+  880C~                            call    prn_text
0447+  880C~                            ld      (LOGOPR),a
0448+  880C~            
0449+  880C~                            call    $44
0450+  880C~            
0451+  880C~            palette_loop:
0452+  880C~                            ld      b,16
0453+  880C~                            ld      de,palette2
0454+  880C~                            ld      hl,$c000
0455+  880C~            palette_color:
0456+  880C~                            ld      a,(de)                  ; change red
0457+  880C~                            and     240
0458+  880C~                            ld      c,a
0459+  880C~                            ld      a,(hl)
0460+  880C~                            and     240
0461+  880C~                            cp      c
0462+  880C~                            jr      z,palette_red_done
0463+  880C~                            jr      nc,palette_red_down
0464+  880C~                            add     a,16
0465+  880C~                            jr      palette_red_done
0466+  880C~            palette_red_down:
0467+  880C~                            sub     16
0468+  880C~            palette_red_done:
0469+  880C~                            ld      c,a
0470+  880C~                            ld      a,(hl)
0471+  880C~                            and     15
0472+  880C~                            or      c
0473+  880C~                            ld      (hl),a
0474+  880C~            
0475+  880C~                            ld      a,(de)
0476+  880C~                            and     15
0477+  880C~                            ld      c,a
0478+  880C~                            ld      a,(hl)
0479+  880C~                            and     15
0480+  880C~                            cp      c
0481+  880C~                            jr      z,palette_blue_done
0482+  880C~                            jr      nc,palette_blue_down
0483+  880C~                            inc     a
0484+  880C~                            jr      palette_blue_done
0485+  880C~            palette_blue_down:
0486+  880C~                            dec     a
0487+  880C~            palette_blue_done:
0488+  880C~                            ld      c,a
0489+  880C~                            ld      a,(hl)
0490+  880C~                            and     240
0491+  880C~                            or      c
0492+  880C~                            ld      (hl),a
0493+  880C~                            inc     de
0494+  880C~                            inc     hl
0495+  880C~            
0496+  880C~                            ld      a,(de)
0497+  880C~                            ld      c,a
0498+  880C~                            ld      a,(hl)
0499+  880C~                            cp      c
0500+  880C~                            jr      z,palette_green_done
0501+  880C~                            jr      nc,palette_green_down
0502+  880C~                            inc     a
0503+  880C~                            jr      palette_green_done
0504+  880C~            palette_green_down:
0505+  880C~                            dec     a
0506+  880C~            palette_green_done:
0507+  880C~                            ld      (hl),a
0508+  880C~                            inc     de
0509+  880C~                            inc     hl
0510+  880C~                            djnz    palette_color
0511+  880C~            
0512+  880C~                            ld      hl,$c000
0513+  880C~                            call    setpalette
0514+  880C~            
0515+  880C~                            ld      b,6
0516+  880C~            palette_wait:
0517+  880C~                            halt
0518+  880C~                            djnz    palette_wait
0519+  880C~            
0520+  880C~                            ld      b,32
0521+  880C~                            ld      de,palette2
0522+  880C~                            ld      hl,$c000
0523+  880C~            palette_check:
0524+  880C~                            ld      a,(de)
0525+  880C~                            cp      (hl)
0526+  880C~                            jr      nz,palette_loop
0527+  880C~                            inc     de
0528+  880C~                            inc     hl
0529+  880C~                            djnz    palette_check
0530+  880C~            
0531+  880C~                            ld      b,9
0532+  880C~                            ld      hl,glare
0533+  880C~            glare_loop:
0534+  880C~                            ld      e,(hl)
0535+  880C~                            inc     hl
0536+  880C~                            ld      d,(hl)
0537+  880C~                            inc     hl
0538+  880C~                            push    bc
0539+  880C~                            push    hl
0540+  880C~                            ex      de,hl
0541+  880C~                            call    setpalette
0542+  880C~                            pop     hl
0543+  880C~                            pop     bc
0544+  880C~            
0545+  880C~                            halt
0546+  880C~                            halt
0547+  880C~            
0548+  880C~                            djnz    glare_loop
0549+  880C~            
0550+  880C~                            ret
0551+  880C~            
0552+  880C~            setpalette:     di
0553+  880C~                            xor     a
0554+  880C~                            out     ($99),a
0555+  880C~                            ld      a,128+ 16
0556+  880C~                            out     ($99),a
0557+  880C~                            ld      bc,32 *256+ $9a
0558+  880C~                            otir
0559+  880C~                            ei
0560+  880C~                            ret
0561+  880C~            
0562+  880C~            prn_text:
0563+  880C~                            ld      a,(SCRMOD)
0564+  880C~                            cp      5
0565+  880C~                            jr      nc,prn_text_graph
0566+  880C~            prn_text_char:
0567+  880C~                            ld      a,(hl)
0568+  880C~                            or      a
0569+  880C~                            ret     z
0570+  880C~                            call    $a2
0571+  880C~                            inc     hl
0572+  880C~                            jr      prn_text_char
0573+  880C~            prn_text_graph:
0574+  880C~                            ld      a,(hl)
0575+  880C~                            or      a
0576+  880C~                            ret     z
0577+  880C~                            ld      ix,$0089
0578+  880C~                            call    $15f
0579+  880C~                            inc     hl
0580+  880C~                            jr      prn_text_graph
0581+  880C~            
0582+  880C~            logo_hmmc:      .dw      0
0583+  880C~                            .dw      0
0584+  880C~                            .dw      0
0585+  880C~                            .dw      31
0586+  880C~                            .dw      256
0587+  880C~                            .dw      85
0588+  880C~            col:           .db      0
0589+  880C~                           .db      0
0590+  880C~                           .db      $f0
0591+  880C~            
0592+  880C~            palette1:       .dw      $000,$327,$327,$327,$327,$327,$327,$327
0593+  880C~                            .dw      $327,$327,$327,$327,$327,$327,$327,$327
0594+  880C~            
0595+  880C~            palette2:       .dw      $000,$327,$117,$000,$111,$333,$555,$777
0596+  880C~                            .dw      $674,$563,$573,$572,$672,$772,$470,$270
0597+  880C~            
0598+  880C~            palette3:       .dw      $000,$327,$117,$000,$111,$333,$555,$777
0599+  880C~                            .dw      $674,$563,$573,$572,$672,$772,$470,$777
0600+  880C~            
0601+  880C~            palette4:       .dw      $000,$327,$117,$000,$111,$333,$555,$777
0602+  880C~                            .dw      $674,$563,$573,$572,$672,$772,$777,$270
0603+  880C~            
0604+  880C~            palette5:       .dw      $000,$327,$117,$000,$111,$333,$555,$777
0605+  880C~                            .dw      $674,$563,$573,$572,$672,$777,$470,$270
0606+  880C~            
0607+  880C~            palette6:       .dw      $000,$327,$117,$000,$111,$333,$555,$777
0608+  880C~                            .dw      $674,$563,$573,$572,$777,$772,$470,$270
0609+  880C~            
0610+  880C~            palette7:       .dw      $000,$327,$117,$000,$111,$333,$555,$777
0611+  880C~                            .dw      $674,$563,$573,$777,$672,$772,$470,$270
0612+  880C~            
0613+  880C~            palette8:       .dw      $000,$327,$117,$000,$111,$333,$555,$777
0614+  880C~                            .dw      $674,$563,$777,$572,$672,$772,$470,$270
0615+  880C~            
0616+  880C~            palette9:       .dw      $000,$327,$117,$000,$111,$333,$555,$777
0617+  880C~                            .dw      $777,$563,$573,$572,$672,$772,$470,$270
0618+  880C~            
0619+  880C~            palette10:      .dw      $000,$327,$117,$000,$111,$333,$555,$777
0620+  880C~                            .dw      $674,$777,$573,$572,$672,$772,$470,$270
0621+  880C~            
0622+  880C~            glare:          .dw      palette3,palette4,palette5,palette6
0623+  880C~                            .dw      palette7,palette8,palette9,palette10,palette2
0624+  880C~            ;
0625+  880C~            logo_ver:
0626+  880C~                           .db      "V"
0627+  880C~                           .DB     "N8VEM 1.24"
0628+  880C~                           .db      0
0629+  880C~            
0630+  880C~            ;
0631+  880C~            ; Bitbuster by Team Bomba
0632+  880C~            ;
0633+  880C~            
0634+  880C~            ;
0635+  880C~            ; In: HL = source
0636+  880C~            ;     DE = destination
0637+  880C~            ;
0638+  880C~            unPack:
0639+  880C~                            exx
0640+  880C~                            ld      bc,128          ; b' = 0 (register loading optimize)
0641+  880C~                                                    ; c' = bits from bitstream
0642+  880C~                            exx
0643+  880C~            
0644+  880C~            unPack_loop:
0645+  880C~                            exx
0646+  880C~                            call    getBit
0647+  880C~                            exx
0648+  880C~                            jr      c,unPack_outCompress    ; if set, we got LZ77 compression
0649+  880C~            
0650+  880C~            unPack_outLiteral:
0651+  880C~                            ldi                     ; copy byte from compressed data to destination
0652+  880C~                            jr      unPack_loop     ; handle more compressed data
0653+  880C~            
0654+  880C~            unPack_outCompress:
0655+  880C~                            ld      a,(hl)          ; get lowest 7 bits of offset, plus the offset
0656+  880C~                                                    ; extension bit
0657+  880C~                            inc     hl
0658+  880C~            
0659+  880C~                            or      a
0660+  880C~                            jr      z,unPack_outRle ; offset = 0, RLE compression used
0661+  880C~            
0662+  880C~            unPack_outMatch:
0663+  880C~                            exx
0664+  880C~                            ld      e,a
0665+  880C~                            ld      d,b             ; b' should be always clear when entering this part
0666+  880C~                            rlca                    ; offset extension bit set?
0667+  880C~                            jr      nc,unPack_outMatch1     ; no need to get extra bits if carry not set
0668+  880C~            
0669+  880C~                            call    getBit          ; get offset bit 10
0670+  880C~                            rl      d
0671+  880C~                            call    getBit          ; get offset bit 9
0672+  880C~                            rl      d
0673+  880C~                            call    getBit          ; get offset bit 8
0674+  880C~                            rl      d
0675+  880C~                            call    getBit          ; get offset bit 7
0676+  880C~            
0677+  880C~                            jr      c,unPack_outMatch1      ; since extension mark already makes bit 7 set
0678+  880C~                            res     7,e             ; only clear it if the bit should be cleared
0679+  880C~            unPack_outMatch1:
0680+  880C~                            inc     de
0681+  880C~                            call    getGammaValue_0 ; get the match length
0682+  880C~                                                    ; HL' = length
0683+  880C~            
0684+  880C~                            push    hl              ; save compressed data pointer
0685+  880C~                            exx
0686+  880C~                            push    hl              ; save match length
0687+  880C~                            push    de              ; save match offset
0688+  880C~                            exx
0689+  880C~            
0690+  880C~                            ld      h,d             ; destination in HL
0691+  880C~                            ld      l,e
0692+  880C~                            pop     bc              ; load match offset length
0693+  880C~                            sbc     hl,bc           ; calculate source address
0694+  880C~                            pop     bc              ; load match length
0695+  880C~                            ldir
0696+  880C~            
0697+  880C~                            pop     hl              ; load compressed data pointer
0698+  880C~                            jr      unPack_loop
0699+  880C~            
0700+  880C~            unPack_outRle:
0701+  880C~                            call    getGammaValue
0702+  880C~                            ret     c               ; HL' = repeat length
0703+  880C~            
0704+  880C~                            push    hl              ; save compressed data pointer
0705+  880C~                            exx
0706+  880C~                            push    hl              ; save repeat length
0707+  880C~                            exx
0708+  880C~                            pop     bc              ; load repeat length
0709+  880C~            
0710+  880C~                            ld      h,d             ; source = destination - 1
0711+  880C~                            ld      l,e
0712+  880C~                            dec     hl
0713+  880C~                            ldir
0714+  880C~            
0715+  880C~                            pop     hl              ; load compressed data pointer
0716+  880C~                            jr      unPack_loop
0717+  880C~            ;
0718+  880C~            getBit:
0719+  880C~                            sla     c               ; shift out new bit
0720+  880C~                            ret     nz              ; if remaining value != 0, we're done
0721+  880C~            
0722+  880C~                            exx
0723+  880C~                            ld      a,(hl)          ; get 8 bits from the compressed stream
0724+  880C~                            inc     hl
0725+  880C~                            exx
0726+  880C~            
0727+  880C~                            ld      c,a             ; 8 bits in C'
0728+  880C~                            sla     c               ; shift out new bit
0729+  880C~                            inc     c               ; set bit 0 so C' will be zero after shifting 8 times
0730+  880C~                            ret
0731+  880C~            ;
0732+  880C~            getGammaValue:
0733+  880C~                            exx                     ; get number of bits used to encode value
0734+  880C~            getGammaValue_0:
0735+  880C~                            ld      hl,1            ; initial length
0736+  880C~                            ld      b,1             ; bitcount
0737+  880C~            
0738+  880C~            getGammaValue_size:
0739+  880C~                            call    getBit          ; get more bits
0740+  880C~                            jr      nc,getGammaValue_sizeEnd        ; if bit is not set, bit length is known
0741+  880C~                            inc     b               ; increase bitcount
0742+  880C~                            jr      getGammaValue_size
0743+  880C~            
0744+  880C~            getGammaValue_bits:
0745+  880C~                            call    getBit          ; get next bit of value from the compressed stream
0746+  880C~                            adc     hl,hl           ; insert new bit in HL
0747+  880C~            getGammaValue_sizeEnd:
0748+  880C~                            djnz    getGammaValue_bits              ; repeat if more bits to go
0749+  880C~            
0750+  880C~            getGammaValue_end:
0751+  880C~                            inc     hl              ; correct HL (was stored as length - 2)
0752+  880C~                            exx
0753+  880C~                            ret
0754+  880C~            ;
0755+  880C~            msx2logodata:
0756+  880C~                           .db      $7E,$00,$00,$01,$04,$33,$00,$C1,$40,$00,$00,$FD,$A2,$43,$79,$36
0757+  880C~                           .db      $A9,$99,$00,$07,$7F,$34,$7D,$63,$FB,$10,$3A,$99,$9A,$6A,$BB,$00
0758+  880C~                           .db      $BA,$85,$24,$93,$83,$BF,$61,$7E,$0F,$AA,$AA,$BB,$00,$02,$AA,$A9
0759+  880C~                           .db      $80,$3F,$AE,$C7,$7E,$AB,$7E,$8C,$83,$AC,$80,$7F,$59,$7E,$EF,$80
0760+  880C~                           .db      $1F,$D7,$67,$7E,$7D,$AC,$80,$7F,$5B,$7E,$E2,$AA,$D9,$00,$89,$6A
0761+  880C~                           .db      $80,$2B,$85,$7E,$98,$05,$43,$E8,$72,$BA,$AA,$B5,$FD,$57,$89,$88
0762+  880C~                           .db      $63,$BA,$93,$50,$7A,$F9,$FC,$EF,$66,$F6,$D9,$B6,$F7,$61,$0D,$38
0763+  880C~                           .db      $98,$9A,$80,$1D,$4D,$81,$00,$FB,$1F,$7F,$96,$39,$BF,$F6,$0E,$3C
0764+  880C~                           .db      $91,$88,$80,$D2,$A9,$8E,$37,$01,$F5,$5F,$20,$7F,$94,$99,$F6,$7E
0765+  880C~                           .db      $8D,$80,$9E,$90,$26,$8E,$FE,$7F,$8C,$39,$9B,$E1,$7F,$B9,$6C,$E6
0766+  880C~                           .db      $88,$97,$80,$DF,$FC,$7F,$A4,$99,$EC,$F3,$EB,$1E,$82,$38,$8A,$BB
0767+  880C~                           .db      $80,$5F,$77,$7F,$F2,$63,$FE,$B8,$EA,$F5,$96,$80,$66,$93,$7F,$93
0768+  880C~                           .db      $7F,$41,$FE,$1F,$1C,$80,$AE,$8A,$31,$16,$EF,$7F,$FC,$8C,$FE,$7C
0769+  880C~                           .db      $B3,$01,$89,$89,$F8,$9F,$01,$93,$7F,$CF,$1C,$99,$CC,$00,$57,$E9
0770+  880C~                           .db      $EC,$FE,$7F,$E9,$39,$9C,$7E,$C1,$C9,$93,$7F,$FD,$B4,$FE,$7C,$2B
0771+  880C~                           .db      $66,$00,$4E,$E1,$7C,$36,$14,$7F,$7F,$C1,$B9,$9C,$7F,$8F,$FE,$21
0772+  880C~                           .db      $57,$77,$76,$4E,$F0,$BE,$35,$14,$3F,$7F,$E0,$A5,$FE,$E2,$7C,$56
0773+  880C~                           .db      $7F,$8F,$67,$7F,$E5,$07,$04,$3C,$CC,$7F,$28,$33,$FF,$F3,$7C,$66
0774+  880C~                           .db      $7F,$47,$55,$56,$7F,$F2,$64,$43,$CC,$FE,$FC,$11,$E9,$14,$77,$63
0775+  880C~                           .db      $FF,$FD,$39,$04,$33,$FE,$1D,$3F,$93,$7F,$B5,$3A,$03,$EE,$00,$7F
0776+  880C~                           .db      $33,$7F,$6B,$FE,$2F,$17,$7F,$F5,$94,$FD,$D5,$FD,$B9,$F5,$7F,$EF
0777+  880C~                           .db      $79,$01,$C4,$8A,$77,$09,$E7,$01,$CE,$B0,$3A,$7A,$01,$3F,$63,$7F
0778+  880C~                           .db      $21,$38,$7F,$F3,$CE,$44,$77,$00,$7B,$67,$4B,$57,$94,$51,$97,$5C
0779+  880C~                           .db      $1E,$18,$23,$76,$90,$C7,$11,$AF,$01,$0F,$7F,$C8,$27,$43,$3E,$FE
0780+  880C~                           .db      $A7,$E3,$7F,$B7,$52,$95,$67,$7F,$E7,$7E,$78,$66,$C7,$80,$59,$2B
0781+  880C~                           .db      $23,$79,$00,$FE,$7F,$53,$DD,$00,$96,$D9,$E9,$7A,$C8,$59,$67,$02
0782+  880C~                           .db      $65,$55,$DC,$00,$6E,$38,$76,$63,$7F,$E7,$06,$0F,$39,$19,$46,$56
0783+  880C~                           .db      $A1,$23,$66,$91,$8C,$2B,$7A,$55,$00,$FE,$7F,$38,$04,$43,$8D,$F8
0784+  880C~                           .db      $7F,$92,$56,$DC,$E7,$67,$73,$66,$FE,$9D,$45,$98,$19,$DE,$8F,$48
0785+  880C~                           .db      $67,$99,$E5,$66,$87,$2D,$D3,$FF,$E8,$DD,$FD,$FF,$1D,$3D,$C9,$7F
0786+  880C~                           .db      $D2,$66,$8D,$E3,$5F,$6F,$66,$7F,$31,$EB,$BE,$27,$3C,$0C,$DB,$AD
0787+  880C~                           .db      $CF,$7F,$F8,$69,$3B,$FE,$F8,$B6,$7F,$EB,$59,$F0,$66,$F0,$7F,$8E
0788+  880C~                           .db      $8B,$63,$99,$CB,$18,$8F,$7F,$D8,$23,$43,$3D,$FE,$97,$DC,$FB,$FA
0789+  880C~                           .db      $4B,$F1,$5E,$66,$4E,$66,$7F,$A3,$FE,$D2,$99,$37,$7A,$3B,$97,$E8
0790+  880C~                           .db      $53,$20,$FE,$E4,$BD,$DC,$38,$3B,$FE,$1E,$63,$0F,$DD,$7F,$FA,$19
0791+  880C~                           .db      $DF,$A8,$1F,$7F,$B8,$AE,$D7,$FD,$86,$FF,$38,$F7,$F9,$7E,$66,$A5
0792+  880C~                           .db      $89,$8F,$29,$47,$66,$7F,$ED,$D7,$FE,$CB,$7F,$F0,$5F,$FA,$1A,$66
0793+  880C~                           .db      $36,$A7,$EA,$7B,$A9,$AF,$14,$7F,$DC,$8F,$FF,$91,$57,$7F,$EE,$56
0794+  880C~                           .db      $D8,$7F,$EA,$C9,$FE,$76,$9E,$94,$7F,$7F,$69,$44,$7F,$F2,$4E,$D5
0795+  880C~                           .db      $3E,$73,$7F,$1E,$03,$65,$FE,$D7,$7F,$F8,$0B,$FE,$F9,$3E,$7F,$B7
0796+  880C~                           .db      $73,$7F,$C4,$56,$DE,$A0,$BF,$7F,$4A,$FE,$FE,$4F,$7F,$CE,$D3,$A1
0797+  880C~                           .db      $FD,$7D,$BF,$7F,$29,$3A,$7F,$FC,$1C,$80,$9D,$FB,$E9,$8D,$2E,$1F
0798+  880C~                           .db      $7F,$D3,$F2,$A2,$47,$FD,$97,$94,$35,$7F,$F8,$A9,$38,$FF,$E9,$93
0799+  880C~                           .db      $7F,$FB,$8E,$33,$FB,$F4,$D2,$94,$80,$5A,$FC,$7F,$04,$04,$FF,$7C
0800+  880C~                           .db      $A8,$34,$CE,$9E,$53,$66,$A3,$45,$66,$43,$03,$AF,$18,$69,$2A,$64
0801+  880C~                           .db      $F6,$4F,$00,$44,$46,$64,$7E,$43,$7F,$E4,$FF,$7C,$0C,$36,$FF,$D2
0802+  880C~                           .db      $57,$76,$FF,$3E,$2D,$8F,$77,$97,$AD,$0F,$7F,$DB,$CF,$FE,$81,$66
0803+  880C~                           .db      $E5,$9D,$FB,$7F,$EB,$8F,$C1,$7F,$F9,$F3,$FF,$F2,$48,$E5,$65,$97
0804+  880C~                           .db      $FE,$7C,$A8,$25,$E9,$81,$45,$56,$53,$FE,$2E,$F2,$EA,$CC,$AD,$FC
0805+  880C~                           .db      $11,$FF,$FB,$7E,$7F,$E6,$34,$46,$50,$70,$7F,$44,$27,$56,$55,$EA
0806+  880C~                           .db      $D5,$66,$FE,$3F,$0F,$7F,$F0,$32,$FF,$EF,$FE,$29,$FE,$DD,$53,$99
0807+  880C~                           .db      $B4,$FE,$A6,$F9,$7C,$72,$FF,$F9,$68,$AE,$FF,$FC,$18,$FE,$92,$65
0808+  880C~                           .db      $FE,$47,$FF,$29,$34,$1A,$55,$FE,$1E,$84,$54,$43,$FF,$7E,$E9,$33
0809+  880C~                           .db      $8E,$FF,$CF,$17,$7F,$B7,$65,$36,$E9,$CD,$80,$04,$75,$53,$98,$7B
0810+  880C~                           .db      $7C,$01,$11,$A4,$5B,$FF,$E4,$F7,$FF,$C9,$7F,$EB,$65,$37,$55,$65
0811+  880C~                           .db      $7F,$90,$44,$55,$67,$55,$8F,$98,$14,$65,$FE,$7C,$98,$93,$E1,$7F
0812+  880C~                           .db      $F8,$6F,$8A,$7F,$BF,$CF,$2A,$FC,$B6,$65,$55,$8E,$85,$24,$80,$18
0813+  880C~                           .db      $65,$55,$53,$A5,$CA,$55,$67,$8F,$FE,$92,$AF,$47,$44,$7F,$E4,$AB
0814+  880C~                           .db      $38,$80,$E2,$CD,$7F,$CD,$72,$95,$FD,$A7,$53,$85,$28,$06,$88,$C9
0815+  880C~                           .db      $80,$36,$E1,$EA,$19,$25,$C7,$67,$44,$00,$C3,$94,$4E,$1B,$FF,$F8
0816+  880C~                           .db      $56,$80,$F2,$67,$62,$01,$8C,$E3,$8C,$44,$7E,$52,$64,$D4,$CD,$89
0817+  880C~                           .db      $0A,$BC,$EC,$E0,$55,$8D,$8E,$BB,$9A,$00,$E0,$CF,$30,$7F,$DE,$F3
0818+  880C~                           .db      $00,$A7,$22,$F5,$71,$7F,$55,$7F,$62,$ED,$C4,$80,$45,$E6,$18,$66
0819+  880C~                           .db      $CE,$0C,$0B,$BC,$01,$FC,$7E,$3F,$7F,$11,$38,$80,$5F,$14,$CD,$BA
0820+  880C~                           .db      $39,$43,$0F,$CB,$04,$7F,$0E,$C7,$00,$67,$EA,$7E,$00,$37,$33,$7F
0821+  880C~                           .db      $E4,$DF,$80,$CD,$01,$FC,$37,$7F,$E1,$DB,$80,$83,$E3,$7F,$FB,$6B
0822+  880C~                           .db      $80,$6D,$EE,$7F,$FD,$AD,$80,$38,$3F,$EF,$7F,$B3,$52,$00,$AD,$3A
0823+  880C~                           .db      $8A,$7F,$7F,$F3,$7F,$6B,$80,$3E,$0F,$FF,$7F,$EC,$E7,$80,$E9,$3A
0824+  880C~                           .db      $3F,$FF,$00,$FE,$7F,$7E,$80,$7E,$64,$FF,$96,$FF,$03,$7F,$F8,$53
0825+  880C~                           .db      $80,$A4,$39,$9F,$E9,$7C,$51,$FE,$FC,$17,$7F,$E2,$4A,$80,$BA,$99
0826+  880C~                           .db      $6A,$8F,$EA,$3E,$7E,$EB,$95,$F6,$FF,$7F,$1E,$80,$5E,$28,$FE,$FE
0827+  880C~                           .db      $0F,$7F,$F1,$2F,$81,$65,$80,$C1,$FF,$FE,$1F,$C6,$7E,$7F,$2F,$82
0828+  880C~                           .db      $24,$80,$B8,$BD,$FF,$7E,$96,$FF,$FF,$FC,$FC,$80,$AE,$29,$11,$9A
0829+  880C~                           .db      $FF,$F0,$E6,$3F,$F4,$0D,$FE,$7F,$7D,$04,$29,$83,$38,$AF,$FF,$00
0830+  880C~                           .db      $E3,$63,$F4,$FF,$F4,$14,$81,$CE,$83,$24,$80,$7C,$87,$34,$22,$00
0831+  880C~                           .db      $EE,$7E,$7F,$33,$04,$83,$12,$80,$3E,$41,$33,$40,$00,$00,$FD,$22
0832+  880C~                           .db      $44,$80,$3E,$5F,$7E,$E9,$E5,$80,$63,$80,$E2,$3F,$33,$30,$7E,$A6
0833+  880C~                           .db      $96,$80,$23,$80,$5E,$AA,$7D,$43,$AF,$33,$34,$7E,$FA,$88,$80,$EC
0834+  880C~                           .db      $38,$AA,$4B,$AA,$83,$23,$FA,$AA,$F3,$7E,$FA,$C8,$80,$E7,$88,$16
0835+  880C~                           .db      $83,$4C,$00,$63,$AF,$08,$44,$7E,$FA,$C8,$80,$EA,$83,$53,$00,$83
0836+  880C~                           .db      $34,$44,$7E,$FA,$F8,$80,$EF,$01,$BF,$7E,$EC,$2D,$85,$9E,$01,$8F
0837+  880C~                           .db      $40,$00,$00,$ED,$63,$FB,$FA,$2F,$00,$FF,$F8
0838+  880C~            ;
0839+  880C                     .ENDIF
0840+  880C             ;
0841+  880C~                    .IF VDP = V9958
0842+  880C~                            call    $17a
0843+  880C~                            rla
0844+  880C~                            ret     c
0845+  880C~            
0846+  880C~                            ld      a,$80
0847+  880C~                            call    $17d
0848+  880C~                            ; MSX2+ logo version
0849+  880C~            
0850+  880C~                            ld      de,$c000
0851+  880C~                            ld      hl,msx2logodata_1
0852+  880C~                            call    unPack_1
0853+  880C~            
0854+  880C~                            ld      hl,0
0855+  880C~                            ld      (BAKCLR),hl
0856+  880C~                            ld      a,5
0857+  880C~                            call    $5f
0858+  880C~            
0859+  880C~                            ld      hl,palette1_1
0860+  880C~                            call    setpalette_1
0861+  880C~            
0862+  880C~                            call    $41
0863+  880C~            
0864+  880C~                            ld      hl,256
0865+  880C~                            ld      (BAKCLR),hl
0866+  880C~                            call    $62
0867+  880C~            
0868+  880C~                            ld      a,(RG8SAV+1)
0869+  880C~                            and     127
0870+  880C~                            ld      b,a
0871+  880C~                            ld      c,9
0872+  880C~                            call    $47
0873+  880C~            
0874+  880C~            wait_ce_logo_1: ld      a,2
0875+  880C~                            ld      ix,$131
0876+  880C~                            call    $15f
0877+  880C~                            bit     0,a
0878+  880C~                            jr      nz,wait_ce_logo_1
0879+  880C~            
0880+  880C~                            push    de
0881+  880C~                            ld      bc,15
0882+  880C~                            ld      hl,logo_hmmc_1
0883+  880C~                            ldir
0884+  880C~            
0885+  880C~                            pop     hl
0886+  880C~                            ld      bc,13
0887+  880C~                            add     hl,bc
0888+  880C~                            ld      de,$c000
0889+  880C~                            ld      a,(de)
0890+  880C~                            inc     de
0891+  880C~                            ld      (hl),a
0892+  880C~                            ex      de,hl
0893+  880C~            
0894+  880C~                            di
0895+  880C~                            ld      a,32
0896+  880C~                            out     ($99),a
0897+  880C~                            ld      a,128+ 17
0898+  880C~                            out     ($99),a
0899+  880C~                            push    hl
0900+  880C~                            ld      bc,15 *256+ $9b
0901+  880C~                            ld      hl,logo_hmmc_1
0902+  880C~                            otir
0903+  880C~                            pop     hl
0904+  880C~                            ld      a,128+ 44
0905+  880C~                            out     ($99),a
0906+  880C~                            ld      a,128+ 17
0907+  880C~                            out     ($99),a
0908+  880C~                            ei
0909+  880C~            
0910+  880C~                            ld      b,255
0911+  880C~                            otir
0912+  880C~            
0913+  880C~            loop_logo_1:    ld      a,2
0914+  880C~                            ld      ix,$131
0915+  880C~                            call    $15f
0916+  880C~                            bit     0,a
0917+  880C~                            jr      z,done_logo_1
0918+  880C~            
0919+  880C~                            otir
0920+  880C~                            jr      loop_logo_1
0921+  880C~            
0922+  880C~            done_logo_1:    ld      bc,32
0923+  880C~                            ld      de,$c000
0924+  880C~                            ld      hl,palette1_1
0925+  880C~                            ldir
0926+  880C~            
0927+  880C~                            ld      hl,22 *8
0928+  880C~                            ld      (GRPACX),hl
0929+  880C~                            ld      hl,12 *8 +1
0930+  880C~                            ld      (GRPACY),hl
0931+  880C~                            ld      a,7
0932+  880C~                            ld      (FORCLR),a
0933+  880C~                            ld      a,8
0934+  880C~                            ld      (LOGOPR),a
0935+  880C~                            ld      hl,logo_ver_1
0936+  880C~                            call    prn_text_1
0937+  880C~                            ld      (LOGOPR),a
0938+  880C~            
0939+  880C~                            call    $44
0940+  880C~            
0941+  880C~            palette_loop_1:
0942+  880C~                            ld      b,16
0943+  880C~                            ld      de,palette2_1
0944+  880C~                            ld      hl,$c000
0945+  880C~            palette_color_1:
0946+  880C~                            ld      a,(de)                  ; change red
0947+  880C~                            and     240
0948+  880C~                            ld      c,a
0949+  880C~                            ld      a,(hl)
0950+  880C~                            and     240
0951+  880C~                            cp      c
0952+  880C~                            jr      z,palette_red_done_1
0953+  880C~                            jr      nc,palette_red_down_1
0954+  880C~                            add     a,16
0955+  880C~                            jr      palette_red_done_1
0956+  880C~            palette_red_down_1:
0957+  880C~                            sub     16
0958+  880C~            palette_red_done_1:
0959+  880C~                            ld      c,a
0960+  880C~                            ld      a,(hl)
0961+  880C~                            and     15
0962+  880C~                            or      c
0963+  880C~                            ld      (hl),a
0964+  880C~            
0965+  880C~                            ld      a,(de)
0966+  880C~                            and     15
0967+  880C~                            ld      c,a
0968+  880C~                            ld      a,(hl)
0969+  880C~                            and     15
0970+  880C~                            cp      c
0971+  880C~                            jr      z,palette_blue_done_1
0972+  880C~                            jr      nc,palette_blue_down_1
0973+  880C~                            inc     a
0974+  880C~                            jr      palette_blue_done_1
0975+  880C~            palette_blue_down_1:
0976+  880C~                            dec     a
0977+  880C~            palette_blue_done_1:
0978+  880C~                            ld      c,a
0979+  880C~                            ld      a,(hl)
0980+  880C~                            and     240
0981+  880C~                            or      c
0982+  880C~                            ld      (hl),a
0983+  880C~                            inc     de
0984+  880C~                            inc     hl
0985+  880C~            
0986+  880C~                            ld      a,(de)
0987+  880C~                            ld      c,a
0988+  880C~                            ld      a,(hl)
0989+  880C~                            cp      c
0990+  880C~                            jr      z,palette_green_done_1
0991+  880C~                            jr      nc,palette_green_down_1
0992+  880C~                            inc     a
0993+  880C~                            jr      palette_green_done_1
0994+  880C~            palette_green_down_1:
0995+  880C~                            dec     a
0996+  880C~            palette_green_done_1:
0997+  880C~                            ld      (hl),a
0998+  880C~                            inc     de
0999+  880C~                            inc     hl
1000+  880C~                            djnz    palette_color_1
1001+  880C~            
1002+  880C~                            ld      hl,$c000
1003+  880C~                            call    setpalette_1
1004+  880C~            
1005+  880C~                            ld      b,6
1006+  880C~            palette_wait_1:
1007+  880C~                            halt
1008+  880C~                            djnz    palette_wait_1
1009+  880C~            
1010+  880C~                            ld      b,32
1011+  880C~                            ld      de,palette2_1
1012+  880C~                            ld      hl,$c000
1013+  880C~            palette_check_1:
1014+  880C~                            ld      a,(de)
1015+  880C~                            cp      (hl)
1016+  880C~                            jr      nz,palette_loop_1
1017+  880C~                            inc     de
1018+  880C~                            inc     hl
1019+  880C~                            djnz    palette_check_1
1020+  880C~            
1021+  880C~                            ld      b,9
1022+  880C~                            ld      hl,glare_1
1023+  880C~            glare_loop_1:
1024+  880C~                            ld      e,(hl)
1025+  880C~                            inc     hl
1026+  880C~                            ld      d,(hl)
1027+  880C~                            inc     hl
1028+  880C~                            push    bc
1029+  880C~                            push    hl
1030+  880C~                            ex      de,hl
1031+  880C~                            call    setpalette_1
1032+  880C~                            pop     hl
1033+  880C~                            pop     bc
1034+  880C~            
1035+  880C~                            halt
1036+  880C~                            halt
1037+  880C~            
1038+  880C~                            djnz    glare_loop_1
1039+  880C~            
1040+  880C~                            ret
1041+  880C~            
1042+  880C~            setpalette_1:   di
1043+  880C~                            xor     a
1044+  880C~                            out     ($99),a
1045+  880C~                            ld      a,128+ 16
1046+  880C~                            out     ($99),a
1047+  880C~                            ld      bc,32 *256+ $9a
1048+  880C~                            otir
1049+  880C~                            ei
1050+  880C~                            ret
1051+  880C~            
1052+  880C~            prn_text_1:
1053+  880C~                            ld      a,(SCRMOD)
1054+  880C~                            cp      5
1055+  880C~                            jr      nc,prn_text_graph_1
1056+  880C~            prn_text_char_1:
1057+  880C~                            ld      a,(hl)
1058+  880C~                            or      a
1059+  880C~                            ret     z
1060+  880C~                            call    $a2
1061+  880C~                            inc     hl
1062+  880C~                            jr      prn_text_char_1
1063+  880C~            prn_text_graph_1:
1064+  880C~                            ld      a,(hl)
1065+  880C~                            or      a
1066+  880C~                            ret     z
1067+  880C~                            ld      ix,$0089
1068+  880C~                            call    $15f
1069+  880C~                            inc     hl
1070+  880C~                            jr      prn_text_graph_1
1071+  880C~            
1072+  880C~            logo_hmmc_1:    .dw      0
1073+  880C~                            .dw      0
1074+  880C~                            .dw      0
1075+  880C~                            .dw      31
1076+  880C~                            .dw      256
1077+  880C~                            .dw      85
1078+  880C~            col_1:         .db      0
1079+  880C~                           .db      0
1080+  880C~                           .db      $f0
1081+  880C~            
1082+  880C~            palette1_1:     .dw      $000,$327,$327,$327,$327,$327,$327,$327
1083+  880C~                            .dw      $327,$327,$327,$327,$327,$327,$327,$327
1084+  880C~            
1085+  880C~            palette2_1:     .dw      $000,$327,$117,$000,$111,$333,$555,$777
1086+  880C~                            .dw      $674,$563,$573,$572,$672,$772,$470,$270
1087+  880C~            
1088+  880C~            palette3_1:     .dw      $000,$327,$117,$000,$111,$333,$555,$777
1089+  880C~                            .dw      $674,$563,$573,$572,$672,$772,$470,$777
1090+  880C~            
1091+  880C~            palette4_1:     .dw      $000,$327,$117,$000,$111,$333,$555,$777
1092+  880C~                            .dw      $674,$563,$573,$572,$672,$772,$777,$270
1093+  880C~            
1094+  880C~            palette5_1:     .dw      $000,$327,$117,$000,$111,$333,$555,$777
1095+  880C~                            .dw      $674,$563,$573,$572,$672,$777,$470,$270
1096+  880C~            
1097+  880C~            palette6_1:     .dw      $000,$327,$117,$000,$111,$333,$555,$777
1098+  880C~                            .dw      $674,$563,$573,$572,$777,$772,$470,$270
1099+  880C~            
1100+  880C~            palette7_1:     .dw      $000,$327,$117,$000,$111,$333,$555,$777
1101+  880C~                            .dw      $674,$563,$573,$777,$672,$772,$470,$270
1102+  880C~            
1103+  880C~            palette8_1:     .dw      $000,$327,$117,$000,$111,$333,$555,$777
1104+  880C~                            .dw      $674,$563,$777,$572,$672,$772,$470,$270
1105+  880C~            
1106+  880C~            palette9_1:     .dw      $000,$327,$117,$000,$111,$333,$555,$777
1107+  880C~                            .dw      $777,$563,$573,$572,$672,$772,$470,$270
1108+  880C~            
1109+  880C~            palette10_1:    .dw      $000,$327,$117,$000,$111,$333,$555,$777
1110+  880C~                            .dw      $674,$777,$573,$572,$672,$772,$470,$270
1111+  880C~            
1112+  880C~            glare_1:        .dw      palette3_1,palette4_1,palette5_1,palette6_1
1113+  880C~                            .dw      palette7_1,palette8_1,palette9_1,palette10_1,palette2_1
1114+  880C~            ;
1115+  880C~            logo_ver_1:
1116+  880C~                           .db      "V"
1117+  880C~                           .db  "N8VEM 1.24"
1118+  880C~                           .db      0
1119+  880C~            
1120+  880C~            ;
1121+  880C~            ; Bitbuster by Team Bomba
1122+  880C~            ;
1123+  880C~            
1124+  880C~            ;
1125+  880C~            ; In: HL = source
1126+  880C~            ;     DE = destination
1127+  880C~            ;
1128+  880C~            unPack_1:
1129+  880C~                            exx
1130+  880C~                            ld      bc,128          ; b' = 0 (register loading optimize)
1131+  880C~                                                    ; c' = bits from bitstream
1132+  880C~                            exx
1133+  880C~            
1134+  880C~            unPack_loop_1:
1135+  880C~                            exx
1136+  880C~                            call    getBit_1
1137+  880C~                            exx
1138+  880C~                            jr      c,unPack_outCompress_1  ; if set, we got LZ77 compression
1139+  880C~            
1140+  880C~            unPack_outLiteral_1:
1141+  880C~                            ldi                     ; copy byte from compressed data to destination
1142+  880C~                            jr      unPack_loop_1   ; handle more compressed data
1143+  880C~            
1144+  880C~            unPack_outCompress_1:
1145+  880C~                            ld      a,(hl)          ; get lowest 7 bits of offset, plus the offset
1146+  880C~                                                    ; extension bit
1147+  880C~                            inc     hl
1148+  880C~            
1149+  880C~                            or      a
1150+  880C~                            jr      z,unPack_outRle_1       ; offset = 0, RLE compression used
1151+  880C~            
1152+  880C~            unPack_outMatch_1:
1153+  880C~                            exx
1154+  880C~                            ld      e,a
1155+  880C~                            ld      d,b             ; b' should be always clear when entering this part
1156+  880C~                            rlca                    ; offset extension bit set?
1157+  880C~                            jr      nc,unPack_outMatch1_1   ; no need to get extra bits if carry not set
1158+  880C~            
1159+  880C~                            call    getBit_1        ; get offset bit 10
1160+  880C~                            rl      d
1161+  880C~                            call    getBit_1        ; get offset bit 9
1162+  880C~                            rl      d
1163+  880C~                            call    getBit_1        ; get offset bit 8
1164+  880C~                            rl      d
1165+  880C~                            call    getBit_1        ; get offset bit 7
1166+  880C~            
1167+  880C~                            jr      c,unPack_outMatch1_1    ; since extension mark already makes bit 7 set
1168+  880C~                            res     7,e             ; only clear it if the bit should be cleared
1169+  880C~            unPack_outMatch1_1:
1170+  880C~                            inc     de
1171+  880C~                            call    getGammaValue_0_1       ; get the match length
1172+  880C~                                                    ; HL' = length
1173+  880C~            
1174+  880C~                            push    hl              ; save compressed data pointer
1175+  880C~                            exx
1176+  880C~                            push    hl              ; save match length
1177+  880C~                            push    de              ; save match offset
1178+  880C~                            exx
1179+  880C~            
1180+  880C~                            ld      h,d             ; destination in HL
1181+  880C~                            ld      l,e
1182+  880C~                            pop     bc              ; load match offset length
1183+  880C~                            sbc     hl,bc           ; calculate source address
1184+  880C~                            pop     bc              ; load match length
1185+  880C~                            ldir
1186+  880C~            
1187+  880C~                            pop     hl              ; load compressed data pointer
1188+  880C~                            jr      unPack_loop_1
1189+  880C~            
1190+  880C~            unPack_outRle_1:
1191+  880C~                            call    getGammaValue_1
1192+  880C~                            ret     c               ; HL' = repeat length
1193+  880C~            
1194+  880C~                            push    hl              ; save compressed data pointer
1195+  880C~                            exx
1196+  880C~                            push    hl              ; save repeat length
1197+  880C~                            exx
1198+  880C~                            pop     bc              ; load repeat length
1199+  880C~            
1200+  880C~                            ld      h,d             ; source = destination - 1
1201+  880C~                            ld      l,e
1202+  880C~                            dec     hl
1203+  880C~                            ldir
1204+  880C~            
1205+  880C~                            pop     hl              ; load compressed data pointer
1206+  880C~                            jr      unPack_loop_1
1207+  880C~            ;
1208+  880C~            getBit_1:
1209+  880C~                            sla     c               ; shift out new bit
1210+  880C~                            ret     nz              ; if remaining value != 0, we're done
1211+  880C~            
1212+  880C~                            exx
1213+  880C~                            ld      a,(hl)          ; get 8 bits from the compressed stream
1214+  880C~                            inc     hl
1215+  880C~                            exx
1216+  880C~            
1217+  880C~                            ld      c,a             ; 8 bits in C'
1218+  880C~                            sla     c               ; shift out new bit
1219+  880C~                            inc     c               ; set bit 0 so C' will be zero after shifting 8 times
1220+  880C~                            ret
1221+  880C~            ;
1222+  880C~            getGammaValue_1:
1223+  880C~                            exx                     ; get number of bits used to encode value
1224+  880C~            getGammaValue_0_1:
1225+  880C~                            ld      hl,1            ; initial length
1226+  880C~                            ld      b,1             ; bitcount
1227+  880C~            
1228+  880C~            getGammaValue_size_1:
1229+  880C~                            call    getBit_1        ; get more bits
1230+  880C~                            jr      nc,getGammaValue_sizeEnd_1      ; if bit is not set, bit length is known
1231+  880C~                            inc     b               ; increase bitcount
1232+  880C~                            jr      getGammaValue_size_1
1233+  880C~            
1234+  880C~            getGammaValue_bits_1:
1235+  880C~                            call    getBit_1        ; get next bit of value from the compressed stream
1236+  880C~                            adc     hl,hl           ; insert new bit in HL
1237+  880C~            getGammaValue_sizeEnd_1:
1238+  880C~                            djnz    getGammaValue_bits_1            ; repeat if more bits to go
1239+  880C~            
1240+  880C~            getGammaValue_end_1:
1241+  880C~                            inc     hl              ; correct HL (was stored as length - 2)
1242+  880C~                            exx
1243+  880C~                            ret
1244+  880C~            ;
1245+  880C~            msx2logodata_1:
1246+  880C~                           .db      $7E,$00,$00,$01,$04,$33,$00,$C1,$40,$00,$00,$FD,$A2,$43,$79,$36
1247+  880C~                           .db      $A9,$99,$00,$07,$7F,$34,$7D,$63,$FB,$10,$3A,$99,$9A,$6A,$BB,$00
1248+  880C~                           .db      $BA,$85,$24,$93,$83,$BF,$61,$7E,$0F,$AA,$AA,$BB,$00,$02,$AA,$A9
1249+  880C~                           .db      $80,$3F,$AE,$C7,$7E,$AB,$7E,$8C,$83,$AC,$80,$7F,$59,$7E,$EF,$80
1250+  880C~                           .db      $1F,$D7,$67,$7E,$7D,$AC,$80,$7F,$5B,$7E,$E2,$AA,$D9,$00,$89,$6A
1251+  880C~                           .db      $80,$2B,$85,$7E,$98,$05,$43,$E8,$72,$BA,$AA,$B5,$FD,$57,$89,$88
1252+  880C~                           .db      $63,$BA,$93,$50,$7A,$F9,$FC,$EF,$66,$F6,$D9,$B6,$F7,$61,$0D,$38
1253+  880C~                           .db      $98,$9A,$80,$1D,$4D,$81,$00,$FB,$1F,$7F,$96,$39,$BF,$F6,$0E,$3C
1254+  880C~                           .db      $91,$88,$80,$D2,$A9,$8E,$37,$01,$F5,$5F,$20,$7F,$94,$99,$F6,$7E
1255+  880C~                           .db      $8D,$80,$9E,$90,$26,$8E,$FE,$7F,$8C,$39,$9B,$E1,$7F,$B9,$6C,$E6
1256+  880C~                           .db      $88,$97,$80,$DF,$FC,$7F,$A4,$99,$EC,$F3,$EB,$1E,$82,$38,$8A,$BB
1257+  880C~                           .db      $80,$5F,$77,$7F,$F2,$63,$FE,$B8,$EA,$F5,$96,$80,$66,$93,$7F,$93
1258+  880C~                           .db      $7F,$41,$FE,$1F,$1C,$80,$AE,$8A,$31,$16,$EF,$7F,$FC,$8C,$FE,$7C
1259+  880C~                           .db      $B3,$01,$89,$89,$F8,$9F,$01,$93,$7F,$CF,$1C,$99,$CC,$00,$57,$E9
1260+  880C~                           .db      $EC,$FE,$7F,$E9,$39,$9C,$7E,$C1,$C9,$93,$7F,$FD,$B4,$FE,$7C,$2B
1261+  880C~                           .db      $66,$00,$4E,$E1,$7C,$36,$14,$7F,$7F,$C1,$B9,$9C,$7F,$8F,$FE,$21
1262+  880C~                           .db      $57,$77,$76,$4E,$F0,$BE,$35,$14,$3F,$7F,$E0,$A5,$FE,$E2,$7C,$56
1263+  880C~                           .db      $7F,$8F,$67,$7F,$E5,$07,$04,$3C,$CC,$7F,$28,$33,$FF,$F3,$7C,$66
1264+  880C~                           .db      $7F,$47,$55,$56,$7F,$F2,$64,$43,$CC,$FE,$FC,$11,$E9,$14,$77,$63
1265+  880C~                           .db      $FF,$FD,$39,$04,$33,$FE,$1D,$3F,$93,$7F,$B5,$3A,$03,$EE,$00,$7F
1266+  880C~                           .db      $33,$7F,$6B,$FE,$2F,$17,$7F,$F5,$94,$FD,$D5,$FD,$B9,$F5,$7F,$EF
1267+  880C~                           .db      $79,$01,$C4,$8A,$77,$09,$E7,$01,$CE,$B0,$3A,$7A,$01,$3F,$63,$7F
1268+  880C~                           .db      $21,$38,$7F,$F3,$CE,$44,$77,$00,$7B,$67,$4B,$57,$94,$51,$97,$5C
1269+  880C~                           .db      $1E,$18,$23,$76,$90,$C7,$11,$AF,$01,$0F,$7F,$C8,$27,$43,$3E,$FE
1270+  880C~                           .db      $A7,$E3,$7F,$B7,$52,$95,$67,$7F,$E7,$7E,$78,$66,$C7,$80,$59,$2B
1271+  880C~                           .db      $23,$79,$00,$FE,$7F,$53,$DD,$00,$96,$D9,$E9,$7A,$C8,$59,$67,$02
1272+  880C~                           .db      $65,$55,$DC,$00,$6E,$38,$76,$63,$7F,$E7,$06,$0F,$39,$19,$46,$56
1273+  880C~                           .db      $A1,$23,$66,$91,$8C,$2B,$7A,$55,$00,$FE,$7F,$38,$04,$43,$8D,$F8
1274+  880C~                           .db      $7F,$92,$56,$DC,$E7,$67,$73,$66,$FE,$9D,$45,$98,$19,$DE,$8F,$48
1275+  880C~                           .db      $67,$99,$E5,$66,$87,$2D,$D3,$FF,$E8,$DD,$FD,$FF,$1D,$3D,$C9,$7F
1276+  880C~                           .db      $D2,$66,$8D,$E3,$5F,$6F,$66,$7F,$31,$EB,$BE,$27,$3C,$0C,$DB,$AD
1277+  880C~                           .db      $CF,$7F,$F8,$69,$3B,$FE,$F8,$B6,$7F,$EB,$59,$F0,$66,$F0,$7F,$8E
1278+  880C~                           .db      $8B,$63,$99,$CB,$18,$8F,$7F,$D8,$23,$43,$3D,$FE,$97,$DC,$FB,$FA
1279+  880C~                           .db      $4B,$F1,$5E,$66,$4E,$66,$7F,$A3,$FE,$D2,$99,$37,$7A,$3B,$97,$E8
1280+  880C~                           .db      $53,$20,$FE,$E4,$BD,$DC,$38,$3B,$FE,$1E,$63,$0F,$DD,$7F,$FA,$19
1281+  880C~                           .db      $DF,$A8,$1F,$7F,$B8,$AE,$D7,$FD,$86,$FF,$38,$F7,$F9,$7E,$66,$A5
1282+  880C~                           .db      $89,$8F,$29,$47,$66,$7F,$ED,$D7,$FE,$CB,$7F,$F0,$5F,$FA,$1A,$66
1283+  880C~                           .db      $36,$A7,$EA,$7B,$A9,$AF,$14,$7F,$DC,$8F,$FF,$91,$57,$7F,$EE,$56
1284+  880C~                           .db      $D8,$7F,$EA,$C9,$FE,$76,$9E,$94,$7F,$7F,$69,$44,$7F,$F2,$4E,$D5
1285+  880C~                           .db      $3E,$73,$7F,$1E,$03,$65,$FE,$D7,$7F,$F8,$0B,$FE,$F9,$3E,$7F,$B7
1286+  880C~                           .db      $73,$7F,$C4,$56,$DE,$A0,$BF,$7F,$4A,$FE,$FE,$4F,$7F,$CE,$D3,$A1
1287+  880C~                           .db      $FD,$7D,$BF,$7F,$29,$3A,$7F,$FC,$1C,$80,$9D,$FB,$E9,$8D,$2E,$1F
1288+  880C~                           .db      $7F,$D3,$F2,$A2,$47,$FD,$97,$94,$35,$7F,$F8,$A9,$38,$FF,$E9,$93
1289+  880C~                           .db      $7F,$FB,$8E,$33,$FB,$F4,$D2,$94,$80,$5A,$FC,$7F,$04,$04,$FF,$7C
1290+  880C~                           .db      $A8,$34,$CE,$9E,$53,$66,$A3,$45,$66,$43,$03,$AF,$18,$69,$2A,$64
1291+  880C~                           .db      $F6,$4F,$00,$44,$46,$64,$7E,$43,$7F,$E4,$FF,$7C,$0C,$36,$FF,$D2
1292+  880C~                           .db      $57,$76,$FF,$3E,$2D,$8F,$77,$97,$AD,$0F,$7F,$DB,$CF,$FE,$81,$66
1293+  880C~                           .db      $E5,$9D,$FB,$7F,$EB,$8F,$C1,$7F,$F9,$F3,$FF,$F2,$48,$E5,$65,$97
1294+  880C~                           .db      $FE,$7C,$A8,$25,$E9,$81,$45,$56,$53,$FE,$2E,$F2,$EA,$CC,$AD,$FC
1295+  880C~                           .db      $11,$FF,$FB,$7E,$7F,$E6,$34,$46,$50,$70,$7F,$44,$27,$56,$55,$EA
1296+  880C~                           .db      $D5,$66,$FE,$3F,$0F,$7F,$F0,$32,$FF,$EF,$FE,$29,$FE,$DD,$53,$99
1297+  880C~                           .db      $B4,$FE,$A6,$F9,$7C,$72,$FF,$F9,$68,$AE,$FF,$FC,$18,$FE,$92,$65
1298+  880C~                           .db      $FE,$47,$FF,$29,$34,$1A,$55,$FE,$1E,$84,$54,$43,$FF,$7E,$E9,$33
1299+  880C~                           .db      $8E,$FF,$CF,$17,$7F,$B7,$65,$36,$E9,$CD,$80,$04,$75,$53,$98,$7B
1300+  880C~                           .db      $7C,$01,$11,$A4,$5B,$FF,$E4,$F7,$FF,$C9,$7F,$EB,$65,$37,$55,$65
1301+  880C~                           .db      $7F,$90,$44,$55,$67,$55,$8F,$98,$14,$65,$FE,$7C,$98,$93,$E1,$7F
1302+  880C~                           .db      $F8,$6F,$8A,$7F,$BF,$CF,$2A,$FC,$B6,$65,$55,$8E,$85,$24,$80,$18
1303+  880C~                           .db      $65,$55,$53,$A5,$CA,$55,$67,$8F,$FE,$92,$AF,$47,$44,$7F,$E4,$AB
1304+  880C~                           .db      $38,$80,$E2,$CD,$7F,$CD,$72,$95,$FD,$A7,$53,$85,$28,$06,$88,$C9
1305+  880C~                           .db      $80,$36,$E1,$EA,$19,$25,$C7,$67,$44,$00,$C3,$94,$4E,$1B,$FF,$F8
1306+  880C~                           .db      $56,$80,$F2,$67,$62,$01,$8C,$E3,$8C,$44,$7E,$52,$64,$D4,$CD,$89
1307+  880C~                           .db      $0A,$BC,$EC,$E0,$55,$8D,$8E,$BB,$9A,$00,$E0,$CF,$30,$7F,$DE,$F3
1308+  880C~                           .db      $00,$A7,$22,$F5,$71,$7F,$55,$7F,$62,$ED,$C4,$80,$45,$E6,$18,$66
1309+  880C~                           .db      $CE,$0C,$0B,$BC,$01,$FC,$7E,$3F,$7F,$11,$38,$80,$5F,$14,$CD,$BA
1310+  880C~                           .db      $39,$43,$0F,$CB,$04,$7F,$0E,$C7,$00,$67,$EA,$7E,$00,$37,$33,$7F
1311+  880C~                           .db      $E4,$DF,$80,$CD,$01,$FC,$37,$7F,$E1,$DB,$80,$83,$E3,$7F,$FB,$6B
1312+  880C~                           .db      $80,$6D,$EE,$7F,$FD,$AD,$80,$38,$3F,$EF,$7F,$B3,$52,$00,$AD,$3A
1313+  880C~                           .db      $8A,$7F,$7F,$F3,$7F,$6B,$80,$3E,$0F,$FF,$7F,$EC,$E7,$80,$E9,$3A
1314+  880C~                           .db      $3F,$FF,$00,$FE,$7F,$7E,$80,$7E,$64,$FF,$96,$FF,$03,$7F,$F8,$53
1315+  880C~                           .db      $80,$A4,$39,$9F,$E9,$7C,$51,$FE,$FC,$17,$7F,$E2,$4A,$80,$BA,$99
1316+  880C~                           .db      $6A,$8F,$EA,$3E,$7E,$EB,$95,$F6,$FF,$7F,$1E,$80,$5E,$28,$FE,$FE
1317+  880C~                           .db      $0F,$7F,$F1,$2F,$81,$65,$80,$C1,$FF,$FE,$1F,$C6,$7E,$7F,$2F,$82
1318+  880C~                           .db      $24,$80,$B8,$BD,$FF,$7E,$96,$FF,$FF,$FC,$FC,$80,$AE,$29,$11,$9A
1319+  880C~                           .db      $FF,$F0,$E6,$3F,$F4,$0D,$FE,$7F,$7D,$04,$29,$83,$38,$AF,$FF,$00
1320+  880C~                           .db      $E3,$63,$F4,$FF,$F4,$14,$81,$CE,$83,$24,$80,$7C,$87,$34,$22,$00
1321+  880C~                           .db      $EE,$7E,$7F,$33,$04,$83,$12,$80,$3E,$41,$33,$40,$00,$00,$FD,$22
1322+  880C~                           .db      $44,$80,$3E,$5F,$7E,$E9,$E5,$80,$63,$80,$E2,$3F,$33,$30,$7E,$A6
1323+  880C~                           .db      $96,$80,$23,$80,$5E,$AA,$7D,$43,$AF,$33,$34,$7E,$FA,$88,$80,$EC
1324+  880C~                           .db      $38,$AA,$4B,$AA,$83,$23,$FA,$AA,$F3,$7E,$FA,$C8,$80,$E7,$88,$16
1325+  880C~                           .db      $83,$4C,$00,$63,$AF,$08,$44,$7E,$FA,$C8,$80,$EA,$83,$53,$00,$83
1326+  880C~                           .db      $34,$44,$7E,$FA,$F8,$80,$EF,$01,$BF,$7E,$EC,$2D,$85,$9E,$01,$8F
1327+  880C~                           .db      $40,$00,$00,$ED,$63,$FB,$FA,$2F,$00,$FF,$F8
1328+  880C~            ;
1329+  880C                     .ENDIF
1330+  880C             ;
1331+  880C                             .ds      $c000 - $
1332+  C000 FF                          .db $ff
0035   C001             
0036   C001             ; vim:ts=8:expandtab:filetype=z8a:syntax=z8a:
0037   C001             
0038   C001             	.END
tasm: Number of errors = 0
